{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u8fd9\u662f\u6211\u7528\u6765\u8bb0\u5f55\u7684\u4e2a\u4eba\u535a\u5ba2 \u00b6 \u8be5\u535a\u5ba2\u7684\u5730\u5740\u662f( https://908760230.github.io/MyRecords ) \u5206\u7c7b \u00b6 \u8bbe\u8ba1\u6a21\u5f0f - \u81ea\u5df1\u5199\u7684\u8bbe\u8ba1\u6a21\u5f0f\u7b14\u8bb0 \u6570\u636e\u7ed3\u6784 - \u76ee\u524d\u53ea\u6709AVL\u6811 mkdocs\u603b\u7ed3 - \u6211\u9047\u5230\u7684mkdocs\u5404\u79cd\u9519\u8bef\u603b\u7ed3. C++ - \u4e00\u4e9b\u57fa\u7840\u6216\u8005\u5bb9\u6613\u5fd8\u8bb0\u7684C++\u77e5\u8bc6. Libevent - libevent \u7684\u5b66\u4e60\u603b\u7ed3. Lua - \u5173\u952e\u77e5\u8bc6\u70b9. NoahGameFrame - NoahGameFrame\u6e90\u7801\u89e3\u6790.","title":"\u4ecb\u7ecd"},{"location":"#_1","text":"\u8be5\u535a\u5ba2\u7684\u5730\u5740\u662f( https://908760230.github.io/MyRecords )","title":"\u8fd9\u662f\u6211\u7528\u6765\u8bb0\u5f55\u7684\u4e2a\u4eba\u535a\u5ba2"},{"location":"#_2","text":"\u8bbe\u8ba1\u6a21\u5f0f - \u81ea\u5df1\u5199\u7684\u8bbe\u8ba1\u6a21\u5f0f\u7b14\u8bb0 \u6570\u636e\u7ed3\u6784 - \u76ee\u524d\u53ea\u6709AVL\u6811 mkdocs\u603b\u7ed3 - \u6211\u9047\u5230\u7684mkdocs\u5404\u79cd\u9519\u8bef\u603b\u7ed3. C++ - \u4e00\u4e9b\u57fa\u7840\u6216\u8005\u5bb9\u6613\u5fd8\u8bb0\u7684C++\u77e5\u8bc6. Libevent - libevent \u7684\u5b66\u4e60\u603b\u7ed3. Lua - \u5173\u952e\u77e5\u8bc6\u70b9. NoahGameFrame - NoahGameFrame\u6e90\u7801\u89e3\u6790.","title":"\u5206\u7c7b"},{"location":"C%2B%2B/C%2B%2B11%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E9%94%81/","text":"\u3010\u8f6c\u8f7d\u3011C++11\u7ebf\u7a0b\u4e2d\u7684\u51e0\u79cd\u9501 \u00b6 \u7ebf\u7a0b\u4e4b\u95f4\u7684\u9501\u6709\uff1a \u4e92\u65a5\u9501\u3001\u6761\u4ef6\u9501\u3001\u81ea\u65cb\u9501\u3001\u8bfb\u5199\u9501\u3001\u9012\u5f52\u9501 \u3002\u4e00\u822c\u800c\u8a00\uff0c\u9501\u7684\u529f\u80fd\u4e0e\u6027\u80fd\u6210\u53cd\u6bd4\u3002\u4e0d\u8fc7\u6211\u4eec\u4e00\u822c\u4e0d\u4f7f\u7528\u9012\u5f52\u9501\uff08C++\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86std::recursive_mutex\uff09\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u4e0d\u63a8\u8350\u4e86\u3002 \u4e92\u65a5\u9501\uff08Mutex\uff09 \u00b6 \u4e92\u65a5\u9501\u7528\u4e8e\u63a7\u5236\u591a\u4e2a\u7ebf\u7a0b\u5bf9\u4ed6\u4eec\u4e4b\u95f4\u5171\u4eab\u8d44\u6e90\u4e92\u65a5\u8bbf\u95ee\u7684\u4e00\u4e2a\u4fe1\u53f7\u91cf\u3002\u4e5f\u5c31\u662f\u8bf4\u662f\u4e3a\u4e86\u907f\u514d\u591a\u4e2a\u7ebf\u7a0b\u5728\u67d0\u4e00\u65f6\u523b\u540c\u65f6\u64cd\u4f5c\u4e00\u4e2a\u5171\u4eab\u8d44\u6e90\u3002\u4f8b\u5982\u7ebf\u7a0b\u6c60\u4e2d\u7684\u6709\u591a\u4e2a\u7a7a\u95f2\u7ebf\u7a0b\u548c\u4e00\u4e2a\u4efb\u52a1\u961f\u5217\u3002\u4efb\u4f55\u662f\u4e00\u4e2a\u7ebf\u7a0b\u90fd\u8981\u4f7f\u7528\u4e92\u65a5\u9501\u4e92\u65a5\u8bbf\u95ee\u4efb\u52a1\u961f\u5217\uff0c\u4ee5\u907f\u514d\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bbf\u95ee\u4efb\u52a1\u961f\u5217\u4ee5\u53d1\u751f\u9519\u4e71\u3002 \u5728\u67d0\u4e00\u65f6\u523b\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u83b7\u53d6\u4e92\u65a5\u9501\uff0c\u5728\u91ca\u653e\u4e92\u65a5\u9501\u4e4b\u524d\u5176\u4ed6\u7ebf\u7a0b\u90fd\u4e0d\u80fd\u83b7\u53d6\u8be5\u4e92\u65a5\u9501\u3002\u5982\u679c\u5176\u4ed6\u7ebf\u7a0b\u60f3\u8981\u83b7\u53d6\u8fd9\u4e2a\u4e92\u65a5\u9501\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7ebf\u7a0b\u53ea\u80fd\u4ee5\u963b\u585e\u65b9\u5f0f\u8fdb\u884c\u7b49\u5f85\u3002 \u5934\u6587\u4ef6\uff1a< mutex > \u7c7b\u578b\uff1a std::mutex \u7528\u6cd5\uff1a\u5728C++\u4e2d\uff0c\u901a\u8fc7\u6784\u9020std::mutex\u7684\u5b9e\u4f8b\u521b\u5efa\u4e92\u65a5\u5143\uff0c\u8c03\u7528\u6210\u5458\u51fd\u6570lock()\u6765\u9501\u5b9a\u5b83\uff0c\u8c03\u7528unlock()\u6765\u89e3\u9501\uff0c\u4e0d\u8fc7\u4e00\u822c\u4e0d\u63a8\u8350\u8fd9\u79cd\u505a\u6cd5\uff0c\u6807\u51c6C++\u5e93\u63d0\u4f9b\u4e86std::lock_guard\u7c7b\u6a21\u677f\uff0c\u5b9e\u73b0\u4e86\u4e92\u65a5\u5143\u7684RAII\u60ef\u7528\u8bed\u6cd5\u3002std::mutex\u548cstd::lock _ guard\u3002\u90fd\u58f0\u660e\u5728< mutex >\u5934\u6587\u4ef6\u4e2d\u3002 \u53c2\u8003\u4ee3\u7801\uff1a //\u7528\u4e92\u65a5\u5143\u4fdd\u62a4\u5217\u8868 #include <list> #include <mutex> std :: list < int > some_list ; std :: mutex some_mutex ; void add_to_list ( int new_value ) { std :: lock_guard < std :: mutex > guard ( some_mutex ); some_list . push_back ( new_value ); } \u4e92\u65a5\u9501\u53c8\u53ef\u5206\u4e3a\u4e24\u79cd\uff1a \u9012\u5f52\u9501 \u548c \u975e\u9012\u5f52\u9501 \u3002 \u540c\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u591a\u6b21\u83b7\u53d6\u540c\u4e00\u4e2a\u9012\u5f52\u9501\uff0c\u4e0d\u4f1a\u4ea7\u751f\u6b7b\u9501\u3002\u800c\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u591a\u6b21\u83b7\u53d6\u540c\u4e00\u4e2a\u975e\u9012\u5f52\u9501\uff0c\u5219\u4f1a\u4ea7\u751f\u6b7b\u9501\u3002 \u4e92\u65a5\u9501\u9ed8\u8ba4\u5c5e\u6027\u662f\u975e\u9012\u5f52\u7684\uff0c \u6761\u4ef6\u9501 \u00b6 \u6761\u4ef6\u9501\u5c31\u662f\u6240\u8c13\u7684\u6761\u4ef6\u53d8\u91cf\uff0c\u67d0\u4e00\u4e2a\u7ebf\u7a0b\u56e0\u4e3a\u67d0\u4e2a\u6761\u4ef6\u4e3a\u6ee1\u8db3\u65f6\u53ef\u4ee5\u4f7f\u7528\u6761\u4ef6\u53d8\u91cf\u4f7f\u6539\u7a0b\u5e8f\u5904\u4e8e\u963b\u585e\u72b6\u6001\u3002\u4e00\u65e6\u6761\u4ef6\u6ee1\u8db3\u4ee5\u201c\u4fe1\u53f7\u91cf\u201d\u7684\u65b9\u5f0f\u5524\u9192\u4e00\u4e2a\u56e0\u4e3a\u8be5\u6761\u4ef6\u800c\u88ab\u963b\u585e\u7684\u7ebf\u7a0b\u3002\u6700\u4e3a\u5e38\u89c1\u5c31\u662f\u5728\u7ebf\u7a0b\u6c60\u4e2d\uff0c\u8d77\u521d\u6ca1\u6709\u4efb\u52a1\u65f6\u4efb\u52a1\u961f\u5217\u4e3a\u7a7a\uff0c\u6b64\u65f6\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u56e0\u4e3a\u201c\u4efb\u52a1\u961f\u5217\u4e3a\u7a7a\u201d\u8fd9\u4e2a\u6761\u4ef6\u5904\u4e8e\u963b\u585e\u72b6\u6001\u3002\u4e00\u65e6\u6709\u4efb\u52a1\u8fdb\u6765\uff0c\u5c31\u4f1a\u4ee5\u4fe1\u53f7\u91cf\u7684\u65b9\u5f0f\u5524\u9192\u4e00\u4e2a\u7ebf\u7a0b\u6765\u5904\u7406\u8fd9\u4e2a\u4efb\u52a1\u3002 \u5934\u6587\u4ef6\uff1a< condition_variable > \u7c7b\u578b\uff1astd::condition_variable\uff08\u53ea\u548cstd::mutex\u4e00\u8d77\u5de5\u4f5c\uff09 \u548c std::condition_variable_any\uff08\u7b26\u5408\u7c7b\u4f3c\u4e92\u65a5\u5143\u7684\u6700\u4f4e\u6807\u51c6\u7684\u4efb\u4f55\u4e1c\u897f\u4e00\u8d77\u5de5\u4f5c\uff09\u3002 //\u4f7f\u7528std::condition_variable\u7b49\u5f85\u6570\u636e std :: mutex mut ; std :: queue < data_chunk > data_queue ; std :: condition_variable data_cond ; void data_preparation_thread () { while ( more_data_to_prepare ()) { data_chunk const data = prepare_data (); std :: lock_guard < std :: mutex > lk ( mut ); data_queue . push ( data ); data_cond . notify_one (); } } void data_processing_thread () { while ( true ) { std :: unique_lock < std :: mutex > lk ( mut ); //\u8fd9\u91cc\u4f7f\u7528unique_lock\u662f\u4e3a\u4e86\u540e\u9762\u65b9\u4fbf\u89e3\u9501 data_cond . wait ( lk ,{[] return ! data_queue . empty ();}); data_chunk data = data_queue . front (); data_queue . pop (); lk . unlock (); process ( data ); if ( is_last_chunk ( data )) break ; } } 1\uff09wait()\u7684\u5b9e\u73b0\u63a5\u4e0b\u6765\u68c0\u67e5\u6761\u4ef6\uff0c\u5e76\u5728\u6ee1\u8db3\u65f6\u8fd4\u56de\u3002\u5982\u679c\u6761\u4ef6\u4e0d\u6ee1\u8db3\uff0cwait()\u89e3\u9501\u4e92\u65a5\u5143\uff0c\u5e76\u5c06\u8be5\u7ebf\u7a0b\u7f6e\u4e8e\u963b\u585e\u6216\u7b49\u5f85\u72b6\u6001\u3002\u5f53\u6765\u81ea\u6570\u636e\u51c6\u5907\u7ebf\u7a0b\u4e2d\u5bf9notify_one()\u7684\u8c03\u7528\u901a\u77e5\u6761\u4ef6\u53d8\u91cf\u65f6\uff0c\u7ebf\u7a0b\u4ece\u7761\u7720\u72b6\u6001\u4e2d\u82cf\u9192\uff08\u89e3\u9664\u5176\u963b\u585e\uff09\uff0c\u91cd\u65b0\u83b7\u5f97\u4e92\u65a5\u5143\u4e0a\u7684\u9501\uff0c\u5e76\u518d\u6b21\u68c0\u67e5\u6761\u4ef6\uff0c\u5982\u679c\u6761\u4ef6\u5df2\u7ecf\u6ee1\u8db3\uff0c\u5c31\u4ecewait()\u8fd4\u56de\u503c\uff0c\u4e92\u65a5\u5143\u4ecd\u88ab\u9501\u5b9a\u3002\u5982\u679c\u6761\u4ef6\u4e0d\u6ee1\u8db3\uff0c\u8be5\u7ebf\u7a0b\u89e3\u9501\u4e92\u65a5\u5143\uff0c\u5e76\u6062\u590d\u7b49\u5f85\u3002 2\uff09\u5982\u679c\u7b49\u5f85\u7ebf\u7a0b\u53ea\u6253\u7b97\u7b49\u5f85\u4e00\u6b21\uff0c\u90a3\u4e48\u5f53\u6761\u4ef6\u4e3atrue\u65f6\u5b83\u5c31\u4e0d\u4f1a\u518d\u7b49\u5f85\u8fd9\u4e2a\u6761\u4ef6\u53d8\u91cf\u4e86\uff0c\u6761\u4ef6\u53d8\u91cf\u672a\u5fc5\u662f\u540c\u6b65\u673a\u5236\u7684\u6700\u4f73\u9009\u62e9\u3002\u5982\u679c\u7b49\u5f85\u7684\u6761\u4ef6\u662f\u4e00\u4e2a\u7279\u5b9a\u6570\u636e\u5757\u7684\u53ef\u7528\u6027\u65f6\uff0c\u8fd9\u5c24\u5176\u6b63\u786e\u3002\u5728\u8fd9\u4e2a\u573a\u666f\u4e2d\uff0c\u4f7f\u7528\u671f\u503c\uff08future\uff09\u66f4\u5408\u9002\u3002\u4f7f\u7528future\u7b49\u5f85\u4e00\u6b21\u6027\u4e8b\u4ef6\u3002 \u81ea\u65cb\u9501 \u00b6 \u524d\u9762\u7684\u4e24\u79cd\u9501\u662f\u6bd4\u8f83\u5e38\u89c1\u7684\u9501\uff0c\u4e5f\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\u3002\u4e0b\u9762\u901a\u8fc7\u6bd4\u8f83\u4e92\u65a5\u9501\u548c\u81ea\u65cb\u9501\u539f\u7406\u7684\u4e0d\u540c\uff0c\u8fd9\u5bf9\u4e8e\u771f\u6b63\u7406\u89e3\u81ea\u65cb\u9501\u6709\u5f88\u5927\u5e2e\u52a9\u3002 \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u4e24\u4e2a\u5904\u7406\u5668core1\u548ccore2\u8ba1\u7b97\u673a\uff0c\u73b0\u5728\u5728\u8fd9\u53f0\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u7684\u7a0b\u5e8f\u4e2d\u6709\u4e24\u4e2a\u7ebf\u7a0b\uff1aT1\u548cT2\u5206\u522b\u5728\u5904\u7406\u5668core1\u548ccore2\u4e0a\u8fd0\u884c\uff0c\u4e24\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u5171\u4eab\u7740\u4e00\u4e2a\u8d44\u6e90\u3002 \u9996\u5148\u6211\u4eec\u8bf4\u660e\u4e92\u65a5\u9501\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u4e92\u65a5\u9501\u662f\u662f\u4e00\u79cdsleep-waiting\u7684\u9501\u3002\u5047\u8bbe\u7ebf\u7a0bT1\u83b7\u53d6\u4e92\u65a5\u9501\u5e76\u4e14\u6b63\u5728core1\u4e0a\u8fd0\u884c\u65f6\uff0c\u6b64\u65f6\u7ebf\u7a0bT2\u4e5f\u60f3\u8981\u83b7\u53d6\u4e92\u65a5\u9501\uff08pthread_mutex_lock\uff09\uff0c\u4f46\u662f\u7531\u4e8eT1\u6b63\u5728\u4f7f\u7528\u4e92\u65a5\u9501\u4f7f\u5f97T2\u88ab\u963b\u585e\u3002\u5f53T2\u5904\u4e8e\u963b\u585e\u72b6\u6001\u65f6\uff0cT2\u88ab\u653e\u5165\u5230\u7b49\u5f85\u961f\u5217\u4e2d\u53bb\uff0c\u5904\u7406\u5668core2\u4f1a\u53bb\u5904\u7406\u5176\u4ed6\u4efb\u52a1\u800c\u4e0d\u5fc5\u4e00\u76f4\u7b49\u5f85\uff08\u5fd9\u7b49\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\u5904\u7406\u5668\u4e0d\u4f1a\u56e0\u4e3a\u7ebf\u7a0b\u963b\u585e\u800c\u7a7a\u95f2\u7740\uff0c\u5b83\u53bb\u5904\u7406\u5176\u4ed6\u4e8b\u52a1\u53bb\u4e86\u3002 \u800c\u81ea\u65cb\u9501\u5c31\u4e0d\u540c\u4e86\uff0c\u81ea\u65cb\u9501\u662f\u4e00\u79cdbusy-waiting\u7684\u9501\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679cT1\u6b63\u5728\u4f7f\u7528\u81ea\u65cb\u9501\uff0c\u800cT2\u4e5f\u53bb\u7533\u8bf7\u8fd9\u4e2a\u81ea\u65cb\u9501\uff0c\u6b64\u65f6T2\u80af\u5b9a\u5f97\u4e0d\u5230\u8fd9\u4e2a\u81ea\u65cb\u9501\u3002\u4e0e\u4e92\u65a5\u9501\u76f8\u53cd\u7684\u662f\uff0c\u6b64\u65f6\u8fd0\u884cT2\u7684\u5904\u7406\u5668core2\u4f1a\u4e00\u76f4\u4e0d\u65ad\u5730\u5faa\u73af\u68c0\u67e5\u9501\u662f\u5426\u53ef\u7528\uff08\u81ea\u65cb\u9501\u8bf7\u6c42\uff09\uff0c\u76f4\u5230\u83b7\u53d6\u5230\u8fd9\u4e2a\u81ea\u65cb\u9501\u4e3a\u6b62\u3002 \u4ece\u201c\u81ea\u65cb\u9501\u201d\u7684\u540d\u5b57\u4e5f\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u60f3\u8981\u83b7\u53d6\u4e00\u4e2a\u88ab\u4f7f\u7528\u7684\u81ea\u65cb\u9501\uff0c\u90a3\u4e48\u5b83\u4f1a\u4e00\u81f4\u5360\u7528CPU\u8bf7\u6c42\u8fd9\u4e2a\u81ea\u65cb\u9501\u4f7f\u5f97CPU\u4e0d\u80fd\u53bb\u505a\u5176\u4ed6\u7684\u4e8b\u60c5\uff0c\u76f4\u5230\u83b7\u53d6\u8fd9\u4e2a\u9501\u4e3a\u6b62\uff0c\u8fd9\u5c31\u662f\u201c\u81ea\u65cb\u201d\u7684\u542b\u4e49\u3002 \u5f53\u53d1\u751f\u963b\u585e\u65f6\uff0c\u4e92\u65a5\u9501\u53ef\u4ee5\u8ba9CPU\u53bb\u5904\u7406\u5176\u4ed6\u7684\u4efb\u52a1\uff1b\u800c\u81ea\u65cb\u9501\u8ba9CPU\u4e00\u76f4\u4e0d\u65ad\u5faa\u73af\u8bf7\u6c42\u83b7\u53d6\u8fd9\u4e2a\u9501\u3002\u901a\u8fc7\u4e24\u4e2a\u542b\u4e49\u7684\u5bf9\u6bd4\u53ef\u4ee5\u6211\u4eec\u77e5\u9053\u201c\u81ea\u65cb\u9501\u201d\u662f\u6bd4\u8f83\u8017\u8d39CPU\u7684\u3002 //\u4f7f\u7528std::atomic_flag\u7684\u81ea\u65cb\u9501\u4e92\u65a5\u5b9e\u73b0 class spinlock_mutex { std :: atomic_flag flag ; public : spinlock_mutex () : flag ( ATOMIC_FLAG_INIT ) {} void lock () { while ( flag . test_and_set ( std :: memory_order_acquire )); } void unlock () { flag . clear ( std :: memory_order_release ); } } \u8bfb\u5199\u9501 \u00b6 \u8bf4\u5230\u8bfb\u5199\u9501\u6211\u4eec\u53ef\u4ee5\u501f\u52a9\u4e8e\u201c\u8bfb\u8005-\u5199\u8005\u201d\u95ee\u9898\u8fdb\u884c\u7406\u89e3\u3002\u9996\u5148\u6211\u4eec\u7b80\u5355\u8bf4\u4e0b\u201c\u8bfb\u8005-\u5199\u8005\u201d\u95ee\u9898\u3002 \u8ba1\u7b97\u673a\u4e2d\u67d0\u4e9b\u6570\u636e\u88ab\u591a\u4e2a\u8fdb\u7a0b\u5171\u4eab\uff0c\u5bf9\u6570\u636e\u5e93\u7684\u64cd\u4f5c\u6709\u4e24\u79cd\uff1a\u4e00\u79cd\u662f\u8bfb\u64cd\u4f5c\uff0c\u5c31\u662f\u4ece\u6570\u636e\u5e93\u4e2d\u8bfb\u53d6\u6570\u636e\u4e0d\u4f1a\u4fee\u6539\u6570\u636e\u5e93\u4e2d\u5185\u5bb9\uff1b\u53e6\u4e00\u79cd\u5c31\u662f\u5199\u64cd\u4f5c\uff0c\u5199\u64cd\u4f5c\u4f1a\u4fee\u6539\u6570\u636e\u5e93\u4e2d\u5b58\u653e\u7684\u6570\u636e\u3002\u56e0\u6b64\u53ef\u4ee5\u5f97\u5230\u6211\u4eec\u5141\u8bb8\u5728\u6570\u636e\u5e93\u4e0a\u540c\u65f6\u6267\u884c\u591a\u4e2a\u201c\u8bfb\u201d\u64cd\u4f5c\uff0c\u4f46\u662f\u67d0\u4e00\u65f6\u523b\u53ea\u80fd\u5728\u6570\u636e\u5e93\u4e0a\u6709\u4e00\u4e2a\u201c\u5199\u201d\u64cd\u4f5c\u6765\u66f4\u65b0\u6570\u636e\u3002\u8fd9\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8bfb\u8005-\u5199\u8005\u6a21\u578b\u3002 \u5934\u6587\u4ef6\uff1aboost/thread/shared_mutex.cpp \u7c7b\u578b\uff1aboost::shared_lock \u7528\u6cd5\uff1a\u4f60\u53ef\u4ee5\u4f7f\u7528boost::shared_ mutex\u7684\u5b9e\u4f8b\u6765\u5b9e\u73b0\u540c\u6b65\uff0c\u800c\u4e0d\u662f\u4f7f\u7528std::mutex\u7684\u5b9e\u4f8b\u3002\u5bf9\u4e8e\u66f4\u65b0\u64cd\u4f5c\uff0cstd::lock_guard< boost::shared _mutex>\u548c std::unique _lock< boost::shared _mutex>\u53ef\u7528\u4e8e\u9501\u5b9a\uff0c\u4ee5\u53d6\u4ee3\u76f8\u5e94\u7684std::mutex\u7279\u5316\u3002\u8fd9\u786e\u4fdd\u4e86\u72ec\u5360\u8bbf\u95ee\uff0c\u5c31\u50cfstd::mutex\u90a3\u6837\u3002\u90a3\u4e9b\u4e0d\u9700\u8981\u66f4\u65b0\u6570\u636e\u7ed3\u6784\u7684\u7ebf\u7a0b\u80fd\u591f\u8f6c\u800c\u4f7f\u7528 boost::shared _lock< boost::shared _mutex>\u6765\u83b7\u5f97\u5171\u4eab\u8bbf\u95ee\u3002\u8fd9\u4e0estd::unique _lock\u7528\u8d77\u6765\u6b63\u662f\u76f8\u540c\u7684\uff0c\u9664\u4e86\u591a\u4e2a\u7ebf\u7a0b\u5728\u540c\u4e00\u65f6\u95f4\uff0c\u540c\u4e00boost::shared _mutex\u4e0a\u53ef\u80fd\u4f1a\u5177\u6709\u5171\u4eab\u9501\u3002\u552f\u4e00\u7684\u9650\u5236\u662f\uff0c\u5982\u679c\u4efb\u610f\u4e00\u4e2a\u7ebf\u7a0b\u62e5\u6709\u4e00\u4e2a\u5171\u4eab\u9501\uff0c\u8bd5\u56fe\u83b7\u53d6\u72ec\u5360\u9501\u7684\u7ebf\u7a0b\u4f1a\u88ab\u963b\u585e\uff0c\u77e5\u9053\u5176\u4ed6\u7ebf\u7a0b\u5168\u90fd\u64a4\u56de\u5b83\u4eec\u7684\u9501\u3002\u540c\u6837\u7684\uff0c\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u5177\u6709\u72ec\u5360\u9501\uff0c\u5176\u4ed6\u7ebf\u7a0b\u90fd\u4e0d\u80fd\u83b7\u53d6\u5171\u4eab\u9501\u6216\u72ec\u5360\u9501\uff0c\u76f4\u5230\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u64a4\u56de\u5b83\u7684\u9501\u3002","title":"C++11\u7ebf\u7a0b\u4e2d\u7684\u51e0\u79cd\u9501"},{"location":"C%2B%2B/C%2B%2B11%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E9%94%81/#c11","text":"\u7ebf\u7a0b\u4e4b\u95f4\u7684\u9501\u6709\uff1a \u4e92\u65a5\u9501\u3001\u6761\u4ef6\u9501\u3001\u81ea\u65cb\u9501\u3001\u8bfb\u5199\u9501\u3001\u9012\u5f52\u9501 \u3002\u4e00\u822c\u800c\u8a00\uff0c\u9501\u7684\u529f\u80fd\u4e0e\u6027\u80fd\u6210\u53cd\u6bd4\u3002\u4e0d\u8fc7\u6211\u4eec\u4e00\u822c\u4e0d\u4f7f\u7528\u9012\u5f52\u9501\uff08C++\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86std::recursive_mutex\uff09\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u4e0d\u63a8\u8350\u4e86\u3002","title":"\u3010\u8f6c\u8f7d\u3011C++11\u7ebf\u7a0b\u4e2d\u7684\u51e0\u79cd\u9501"},{"location":"C%2B%2B/C%2B%2B11%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E9%94%81/#mutex","text":"\u4e92\u65a5\u9501\u7528\u4e8e\u63a7\u5236\u591a\u4e2a\u7ebf\u7a0b\u5bf9\u4ed6\u4eec\u4e4b\u95f4\u5171\u4eab\u8d44\u6e90\u4e92\u65a5\u8bbf\u95ee\u7684\u4e00\u4e2a\u4fe1\u53f7\u91cf\u3002\u4e5f\u5c31\u662f\u8bf4\u662f\u4e3a\u4e86\u907f\u514d\u591a\u4e2a\u7ebf\u7a0b\u5728\u67d0\u4e00\u65f6\u523b\u540c\u65f6\u64cd\u4f5c\u4e00\u4e2a\u5171\u4eab\u8d44\u6e90\u3002\u4f8b\u5982\u7ebf\u7a0b\u6c60\u4e2d\u7684\u6709\u591a\u4e2a\u7a7a\u95f2\u7ebf\u7a0b\u548c\u4e00\u4e2a\u4efb\u52a1\u961f\u5217\u3002\u4efb\u4f55\u662f\u4e00\u4e2a\u7ebf\u7a0b\u90fd\u8981\u4f7f\u7528\u4e92\u65a5\u9501\u4e92\u65a5\u8bbf\u95ee\u4efb\u52a1\u961f\u5217\uff0c\u4ee5\u907f\u514d\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bbf\u95ee\u4efb\u52a1\u961f\u5217\u4ee5\u53d1\u751f\u9519\u4e71\u3002 \u5728\u67d0\u4e00\u65f6\u523b\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u83b7\u53d6\u4e92\u65a5\u9501\uff0c\u5728\u91ca\u653e\u4e92\u65a5\u9501\u4e4b\u524d\u5176\u4ed6\u7ebf\u7a0b\u90fd\u4e0d\u80fd\u83b7\u53d6\u8be5\u4e92\u65a5\u9501\u3002\u5982\u679c\u5176\u4ed6\u7ebf\u7a0b\u60f3\u8981\u83b7\u53d6\u8fd9\u4e2a\u4e92\u65a5\u9501\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7ebf\u7a0b\u53ea\u80fd\u4ee5\u963b\u585e\u65b9\u5f0f\u8fdb\u884c\u7b49\u5f85\u3002 \u5934\u6587\u4ef6\uff1a< mutex > \u7c7b\u578b\uff1a std::mutex \u7528\u6cd5\uff1a\u5728C++\u4e2d\uff0c\u901a\u8fc7\u6784\u9020std::mutex\u7684\u5b9e\u4f8b\u521b\u5efa\u4e92\u65a5\u5143\uff0c\u8c03\u7528\u6210\u5458\u51fd\u6570lock()\u6765\u9501\u5b9a\u5b83\uff0c\u8c03\u7528unlock()\u6765\u89e3\u9501\uff0c\u4e0d\u8fc7\u4e00\u822c\u4e0d\u63a8\u8350\u8fd9\u79cd\u505a\u6cd5\uff0c\u6807\u51c6C++\u5e93\u63d0\u4f9b\u4e86std::lock_guard\u7c7b\u6a21\u677f\uff0c\u5b9e\u73b0\u4e86\u4e92\u65a5\u5143\u7684RAII\u60ef\u7528\u8bed\u6cd5\u3002std::mutex\u548cstd::lock _ guard\u3002\u90fd\u58f0\u660e\u5728< mutex >\u5934\u6587\u4ef6\u4e2d\u3002 \u53c2\u8003\u4ee3\u7801\uff1a //\u7528\u4e92\u65a5\u5143\u4fdd\u62a4\u5217\u8868 #include <list> #include <mutex> std :: list < int > some_list ; std :: mutex some_mutex ; void add_to_list ( int new_value ) { std :: lock_guard < std :: mutex > guard ( some_mutex ); some_list . push_back ( new_value ); } \u4e92\u65a5\u9501\u53c8\u53ef\u5206\u4e3a\u4e24\u79cd\uff1a \u9012\u5f52\u9501 \u548c \u975e\u9012\u5f52\u9501 \u3002 \u540c\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u591a\u6b21\u83b7\u53d6\u540c\u4e00\u4e2a\u9012\u5f52\u9501\uff0c\u4e0d\u4f1a\u4ea7\u751f\u6b7b\u9501\u3002\u800c\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u591a\u6b21\u83b7\u53d6\u540c\u4e00\u4e2a\u975e\u9012\u5f52\u9501\uff0c\u5219\u4f1a\u4ea7\u751f\u6b7b\u9501\u3002 \u4e92\u65a5\u9501\u9ed8\u8ba4\u5c5e\u6027\u662f\u975e\u9012\u5f52\u7684\uff0c","title":"\u4e92\u65a5\u9501\uff08Mutex\uff09"},{"location":"C%2B%2B/C%2B%2B11%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E9%94%81/#_1","text":"\u6761\u4ef6\u9501\u5c31\u662f\u6240\u8c13\u7684\u6761\u4ef6\u53d8\u91cf\uff0c\u67d0\u4e00\u4e2a\u7ebf\u7a0b\u56e0\u4e3a\u67d0\u4e2a\u6761\u4ef6\u4e3a\u6ee1\u8db3\u65f6\u53ef\u4ee5\u4f7f\u7528\u6761\u4ef6\u53d8\u91cf\u4f7f\u6539\u7a0b\u5e8f\u5904\u4e8e\u963b\u585e\u72b6\u6001\u3002\u4e00\u65e6\u6761\u4ef6\u6ee1\u8db3\u4ee5\u201c\u4fe1\u53f7\u91cf\u201d\u7684\u65b9\u5f0f\u5524\u9192\u4e00\u4e2a\u56e0\u4e3a\u8be5\u6761\u4ef6\u800c\u88ab\u963b\u585e\u7684\u7ebf\u7a0b\u3002\u6700\u4e3a\u5e38\u89c1\u5c31\u662f\u5728\u7ebf\u7a0b\u6c60\u4e2d\uff0c\u8d77\u521d\u6ca1\u6709\u4efb\u52a1\u65f6\u4efb\u52a1\u961f\u5217\u4e3a\u7a7a\uff0c\u6b64\u65f6\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u56e0\u4e3a\u201c\u4efb\u52a1\u961f\u5217\u4e3a\u7a7a\u201d\u8fd9\u4e2a\u6761\u4ef6\u5904\u4e8e\u963b\u585e\u72b6\u6001\u3002\u4e00\u65e6\u6709\u4efb\u52a1\u8fdb\u6765\uff0c\u5c31\u4f1a\u4ee5\u4fe1\u53f7\u91cf\u7684\u65b9\u5f0f\u5524\u9192\u4e00\u4e2a\u7ebf\u7a0b\u6765\u5904\u7406\u8fd9\u4e2a\u4efb\u52a1\u3002 \u5934\u6587\u4ef6\uff1a< condition_variable > \u7c7b\u578b\uff1astd::condition_variable\uff08\u53ea\u548cstd::mutex\u4e00\u8d77\u5de5\u4f5c\uff09 \u548c std::condition_variable_any\uff08\u7b26\u5408\u7c7b\u4f3c\u4e92\u65a5\u5143\u7684\u6700\u4f4e\u6807\u51c6\u7684\u4efb\u4f55\u4e1c\u897f\u4e00\u8d77\u5de5\u4f5c\uff09\u3002 //\u4f7f\u7528std::condition_variable\u7b49\u5f85\u6570\u636e std :: mutex mut ; std :: queue < data_chunk > data_queue ; std :: condition_variable data_cond ; void data_preparation_thread () { while ( more_data_to_prepare ()) { data_chunk const data = prepare_data (); std :: lock_guard < std :: mutex > lk ( mut ); data_queue . push ( data ); data_cond . notify_one (); } } void data_processing_thread () { while ( true ) { std :: unique_lock < std :: mutex > lk ( mut ); //\u8fd9\u91cc\u4f7f\u7528unique_lock\u662f\u4e3a\u4e86\u540e\u9762\u65b9\u4fbf\u89e3\u9501 data_cond . wait ( lk ,{[] return ! data_queue . empty ();}); data_chunk data = data_queue . front (); data_queue . pop (); lk . unlock (); process ( data ); if ( is_last_chunk ( data )) break ; } } 1\uff09wait()\u7684\u5b9e\u73b0\u63a5\u4e0b\u6765\u68c0\u67e5\u6761\u4ef6\uff0c\u5e76\u5728\u6ee1\u8db3\u65f6\u8fd4\u56de\u3002\u5982\u679c\u6761\u4ef6\u4e0d\u6ee1\u8db3\uff0cwait()\u89e3\u9501\u4e92\u65a5\u5143\uff0c\u5e76\u5c06\u8be5\u7ebf\u7a0b\u7f6e\u4e8e\u963b\u585e\u6216\u7b49\u5f85\u72b6\u6001\u3002\u5f53\u6765\u81ea\u6570\u636e\u51c6\u5907\u7ebf\u7a0b\u4e2d\u5bf9notify_one()\u7684\u8c03\u7528\u901a\u77e5\u6761\u4ef6\u53d8\u91cf\u65f6\uff0c\u7ebf\u7a0b\u4ece\u7761\u7720\u72b6\u6001\u4e2d\u82cf\u9192\uff08\u89e3\u9664\u5176\u963b\u585e\uff09\uff0c\u91cd\u65b0\u83b7\u5f97\u4e92\u65a5\u5143\u4e0a\u7684\u9501\uff0c\u5e76\u518d\u6b21\u68c0\u67e5\u6761\u4ef6\uff0c\u5982\u679c\u6761\u4ef6\u5df2\u7ecf\u6ee1\u8db3\uff0c\u5c31\u4ecewait()\u8fd4\u56de\u503c\uff0c\u4e92\u65a5\u5143\u4ecd\u88ab\u9501\u5b9a\u3002\u5982\u679c\u6761\u4ef6\u4e0d\u6ee1\u8db3\uff0c\u8be5\u7ebf\u7a0b\u89e3\u9501\u4e92\u65a5\u5143\uff0c\u5e76\u6062\u590d\u7b49\u5f85\u3002 2\uff09\u5982\u679c\u7b49\u5f85\u7ebf\u7a0b\u53ea\u6253\u7b97\u7b49\u5f85\u4e00\u6b21\uff0c\u90a3\u4e48\u5f53\u6761\u4ef6\u4e3atrue\u65f6\u5b83\u5c31\u4e0d\u4f1a\u518d\u7b49\u5f85\u8fd9\u4e2a\u6761\u4ef6\u53d8\u91cf\u4e86\uff0c\u6761\u4ef6\u53d8\u91cf\u672a\u5fc5\u662f\u540c\u6b65\u673a\u5236\u7684\u6700\u4f73\u9009\u62e9\u3002\u5982\u679c\u7b49\u5f85\u7684\u6761\u4ef6\u662f\u4e00\u4e2a\u7279\u5b9a\u6570\u636e\u5757\u7684\u53ef\u7528\u6027\u65f6\uff0c\u8fd9\u5c24\u5176\u6b63\u786e\u3002\u5728\u8fd9\u4e2a\u573a\u666f\u4e2d\uff0c\u4f7f\u7528\u671f\u503c\uff08future\uff09\u66f4\u5408\u9002\u3002\u4f7f\u7528future\u7b49\u5f85\u4e00\u6b21\u6027\u4e8b\u4ef6\u3002","title":"\u6761\u4ef6\u9501"},{"location":"C%2B%2B/C%2B%2B11%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E9%94%81/#_2","text":"\u524d\u9762\u7684\u4e24\u79cd\u9501\u662f\u6bd4\u8f83\u5e38\u89c1\u7684\u9501\uff0c\u4e5f\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\u3002\u4e0b\u9762\u901a\u8fc7\u6bd4\u8f83\u4e92\u65a5\u9501\u548c\u81ea\u65cb\u9501\u539f\u7406\u7684\u4e0d\u540c\uff0c\u8fd9\u5bf9\u4e8e\u771f\u6b63\u7406\u89e3\u81ea\u65cb\u9501\u6709\u5f88\u5927\u5e2e\u52a9\u3002 \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u4e24\u4e2a\u5904\u7406\u5668core1\u548ccore2\u8ba1\u7b97\u673a\uff0c\u73b0\u5728\u5728\u8fd9\u53f0\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u7684\u7a0b\u5e8f\u4e2d\u6709\u4e24\u4e2a\u7ebf\u7a0b\uff1aT1\u548cT2\u5206\u522b\u5728\u5904\u7406\u5668core1\u548ccore2\u4e0a\u8fd0\u884c\uff0c\u4e24\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u5171\u4eab\u7740\u4e00\u4e2a\u8d44\u6e90\u3002 \u9996\u5148\u6211\u4eec\u8bf4\u660e\u4e92\u65a5\u9501\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u4e92\u65a5\u9501\u662f\u662f\u4e00\u79cdsleep-waiting\u7684\u9501\u3002\u5047\u8bbe\u7ebf\u7a0bT1\u83b7\u53d6\u4e92\u65a5\u9501\u5e76\u4e14\u6b63\u5728core1\u4e0a\u8fd0\u884c\u65f6\uff0c\u6b64\u65f6\u7ebf\u7a0bT2\u4e5f\u60f3\u8981\u83b7\u53d6\u4e92\u65a5\u9501\uff08pthread_mutex_lock\uff09\uff0c\u4f46\u662f\u7531\u4e8eT1\u6b63\u5728\u4f7f\u7528\u4e92\u65a5\u9501\u4f7f\u5f97T2\u88ab\u963b\u585e\u3002\u5f53T2\u5904\u4e8e\u963b\u585e\u72b6\u6001\u65f6\uff0cT2\u88ab\u653e\u5165\u5230\u7b49\u5f85\u961f\u5217\u4e2d\u53bb\uff0c\u5904\u7406\u5668core2\u4f1a\u53bb\u5904\u7406\u5176\u4ed6\u4efb\u52a1\u800c\u4e0d\u5fc5\u4e00\u76f4\u7b49\u5f85\uff08\u5fd9\u7b49\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\u5904\u7406\u5668\u4e0d\u4f1a\u56e0\u4e3a\u7ebf\u7a0b\u963b\u585e\u800c\u7a7a\u95f2\u7740\uff0c\u5b83\u53bb\u5904\u7406\u5176\u4ed6\u4e8b\u52a1\u53bb\u4e86\u3002 \u800c\u81ea\u65cb\u9501\u5c31\u4e0d\u540c\u4e86\uff0c\u81ea\u65cb\u9501\u662f\u4e00\u79cdbusy-waiting\u7684\u9501\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679cT1\u6b63\u5728\u4f7f\u7528\u81ea\u65cb\u9501\uff0c\u800cT2\u4e5f\u53bb\u7533\u8bf7\u8fd9\u4e2a\u81ea\u65cb\u9501\uff0c\u6b64\u65f6T2\u80af\u5b9a\u5f97\u4e0d\u5230\u8fd9\u4e2a\u81ea\u65cb\u9501\u3002\u4e0e\u4e92\u65a5\u9501\u76f8\u53cd\u7684\u662f\uff0c\u6b64\u65f6\u8fd0\u884cT2\u7684\u5904\u7406\u5668core2\u4f1a\u4e00\u76f4\u4e0d\u65ad\u5730\u5faa\u73af\u68c0\u67e5\u9501\u662f\u5426\u53ef\u7528\uff08\u81ea\u65cb\u9501\u8bf7\u6c42\uff09\uff0c\u76f4\u5230\u83b7\u53d6\u5230\u8fd9\u4e2a\u81ea\u65cb\u9501\u4e3a\u6b62\u3002 \u4ece\u201c\u81ea\u65cb\u9501\u201d\u7684\u540d\u5b57\u4e5f\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u60f3\u8981\u83b7\u53d6\u4e00\u4e2a\u88ab\u4f7f\u7528\u7684\u81ea\u65cb\u9501\uff0c\u90a3\u4e48\u5b83\u4f1a\u4e00\u81f4\u5360\u7528CPU\u8bf7\u6c42\u8fd9\u4e2a\u81ea\u65cb\u9501\u4f7f\u5f97CPU\u4e0d\u80fd\u53bb\u505a\u5176\u4ed6\u7684\u4e8b\u60c5\uff0c\u76f4\u5230\u83b7\u53d6\u8fd9\u4e2a\u9501\u4e3a\u6b62\uff0c\u8fd9\u5c31\u662f\u201c\u81ea\u65cb\u201d\u7684\u542b\u4e49\u3002 \u5f53\u53d1\u751f\u963b\u585e\u65f6\uff0c\u4e92\u65a5\u9501\u53ef\u4ee5\u8ba9CPU\u53bb\u5904\u7406\u5176\u4ed6\u7684\u4efb\u52a1\uff1b\u800c\u81ea\u65cb\u9501\u8ba9CPU\u4e00\u76f4\u4e0d\u65ad\u5faa\u73af\u8bf7\u6c42\u83b7\u53d6\u8fd9\u4e2a\u9501\u3002\u901a\u8fc7\u4e24\u4e2a\u542b\u4e49\u7684\u5bf9\u6bd4\u53ef\u4ee5\u6211\u4eec\u77e5\u9053\u201c\u81ea\u65cb\u9501\u201d\u662f\u6bd4\u8f83\u8017\u8d39CPU\u7684\u3002 //\u4f7f\u7528std::atomic_flag\u7684\u81ea\u65cb\u9501\u4e92\u65a5\u5b9e\u73b0 class spinlock_mutex { std :: atomic_flag flag ; public : spinlock_mutex () : flag ( ATOMIC_FLAG_INIT ) {} void lock () { while ( flag . test_and_set ( std :: memory_order_acquire )); } void unlock () { flag . clear ( std :: memory_order_release ); } }","title":"\u81ea\u65cb\u9501"},{"location":"C%2B%2B/C%2B%2B11%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E9%94%81/#_3","text":"\u8bf4\u5230\u8bfb\u5199\u9501\u6211\u4eec\u53ef\u4ee5\u501f\u52a9\u4e8e\u201c\u8bfb\u8005-\u5199\u8005\u201d\u95ee\u9898\u8fdb\u884c\u7406\u89e3\u3002\u9996\u5148\u6211\u4eec\u7b80\u5355\u8bf4\u4e0b\u201c\u8bfb\u8005-\u5199\u8005\u201d\u95ee\u9898\u3002 \u8ba1\u7b97\u673a\u4e2d\u67d0\u4e9b\u6570\u636e\u88ab\u591a\u4e2a\u8fdb\u7a0b\u5171\u4eab\uff0c\u5bf9\u6570\u636e\u5e93\u7684\u64cd\u4f5c\u6709\u4e24\u79cd\uff1a\u4e00\u79cd\u662f\u8bfb\u64cd\u4f5c\uff0c\u5c31\u662f\u4ece\u6570\u636e\u5e93\u4e2d\u8bfb\u53d6\u6570\u636e\u4e0d\u4f1a\u4fee\u6539\u6570\u636e\u5e93\u4e2d\u5185\u5bb9\uff1b\u53e6\u4e00\u79cd\u5c31\u662f\u5199\u64cd\u4f5c\uff0c\u5199\u64cd\u4f5c\u4f1a\u4fee\u6539\u6570\u636e\u5e93\u4e2d\u5b58\u653e\u7684\u6570\u636e\u3002\u56e0\u6b64\u53ef\u4ee5\u5f97\u5230\u6211\u4eec\u5141\u8bb8\u5728\u6570\u636e\u5e93\u4e0a\u540c\u65f6\u6267\u884c\u591a\u4e2a\u201c\u8bfb\u201d\u64cd\u4f5c\uff0c\u4f46\u662f\u67d0\u4e00\u65f6\u523b\u53ea\u80fd\u5728\u6570\u636e\u5e93\u4e0a\u6709\u4e00\u4e2a\u201c\u5199\u201d\u64cd\u4f5c\u6765\u66f4\u65b0\u6570\u636e\u3002\u8fd9\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8bfb\u8005-\u5199\u8005\u6a21\u578b\u3002 \u5934\u6587\u4ef6\uff1aboost/thread/shared_mutex.cpp \u7c7b\u578b\uff1aboost::shared_lock \u7528\u6cd5\uff1a\u4f60\u53ef\u4ee5\u4f7f\u7528boost::shared_ mutex\u7684\u5b9e\u4f8b\u6765\u5b9e\u73b0\u540c\u6b65\uff0c\u800c\u4e0d\u662f\u4f7f\u7528std::mutex\u7684\u5b9e\u4f8b\u3002\u5bf9\u4e8e\u66f4\u65b0\u64cd\u4f5c\uff0cstd::lock_guard< boost::shared _mutex>\u548c std::unique _lock< boost::shared _mutex>\u53ef\u7528\u4e8e\u9501\u5b9a\uff0c\u4ee5\u53d6\u4ee3\u76f8\u5e94\u7684std::mutex\u7279\u5316\u3002\u8fd9\u786e\u4fdd\u4e86\u72ec\u5360\u8bbf\u95ee\uff0c\u5c31\u50cfstd::mutex\u90a3\u6837\u3002\u90a3\u4e9b\u4e0d\u9700\u8981\u66f4\u65b0\u6570\u636e\u7ed3\u6784\u7684\u7ebf\u7a0b\u80fd\u591f\u8f6c\u800c\u4f7f\u7528 boost::shared _lock< boost::shared _mutex>\u6765\u83b7\u5f97\u5171\u4eab\u8bbf\u95ee\u3002\u8fd9\u4e0estd::unique _lock\u7528\u8d77\u6765\u6b63\u662f\u76f8\u540c\u7684\uff0c\u9664\u4e86\u591a\u4e2a\u7ebf\u7a0b\u5728\u540c\u4e00\u65f6\u95f4\uff0c\u540c\u4e00boost::shared _mutex\u4e0a\u53ef\u80fd\u4f1a\u5177\u6709\u5171\u4eab\u9501\u3002\u552f\u4e00\u7684\u9650\u5236\u662f\uff0c\u5982\u679c\u4efb\u610f\u4e00\u4e2a\u7ebf\u7a0b\u62e5\u6709\u4e00\u4e2a\u5171\u4eab\u9501\uff0c\u8bd5\u56fe\u83b7\u53d6\u72ec\u5360\u9501\u7684\u7ebf\u7a0b\u4f1a\u88ab\u963b\u585e\uff0c\u77e5\u9053\u5176\u4ed6\u7ebf\u7a0b\u5168\u90fd\u64a4\u56de\u5b83\u4eec\u7684\u9501\u3002\u540c\u6837\u7684\uff0c\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u5177\u6709\u72ec\u5360\u9501\uff0c\u5176\u4ed6\u7ebf\u7a0b\u90fd\u4e0d\u80fd\u83b7\u53d6\u5171\u4eab\u9501\u6216\u72ec\u5360\u9501\uff0c\u76f4\u5230\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u64a4\u56de\u5b83\u7684\u9501\u3002","title":"\u8bfb\u5199\u9501"},{"location":"C%2B%2B/%E5%85%B3%E9%94%AE%E5%AD%97decltype/","text":"C++11\u65b0\u6807\u51c6\u5b66\u4e60\uff1adecltype\u5173\u952e\u5b57 \u00b6 1. decltype\u7684\u610f\u4e49 \u00b6 \u6709\u65f6\u6211\u4eec\u5e0c\u671b\u4ece\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u63a8\u65ad\u51fa\u8981\u5b9a\u4e49\u7684\u53d8\u91cf\u7c7b\u578b\uff0c\u4f46\u662f\u4e0d\u60f3\u7528\u8be5\u8868\u8fbe\u5f0f\u7684\u503c\u521d\u59cb\u5316\u53d8\u91cf\uff08\u521d\u59cb\u5316\u53ef\u4ee5\u7528 auto \uff09\u3002\u4e3a\u4e86\u6ee1\u8db3\u8fd9\u4e00\u9700\u6c42\uff0cC++11\u65b0\u6807\u51c6\u5f15\u5165\u4e86 decltype \u7c7b\u578b\u8bf4\u660e\u7b26\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u9009\u62e9\u5e76\u8fd4\u56de\u64cd\u4f5c\u6570\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u7f16\u8bd1\u5668\u5206\u6790\u8868\u8fbe\u5f0f\u5e76\u5f97\u5230\u5b83\u7684\u7c7b\u578b\uff0c\u5374\u4e0d\u5b9e\u9645\u8ba1\u7b97\u8868\u8fbe\u5f0f\u7684\u503c\u3002 2. decltype\u7528\u6cd5 \u00b6 (1) \u57fa\u672c\u7528\u6cd5 int getSize(); int main(void) { int tempA = 2; /*1.dclTempA\u4e3aint.*/ decltype(tempA) dclTempA; /*2.dclTempB\u4e3aint\uff0c\u5bf9\u4e8egetSize\u6839\u672c\u6ca1\u6709\u5b9a\u4e49\uff0c\u4f46\u662f\u7a0b\u5e8f\u4f9d\u65e7\u6b63\u5e38\uff0c\u56e0\u4e3adecltype\u53ea\u505a\u5206\u6790\uff0c\u5e76\u4e0d\u8c03\u7528getSize().*/ decltype(getSize()) dclTempB; return 0; } (2) \u4e0econst\u7ed3\u5408 double tempA = 3.0; const double ctempA = 5.0; const double ctempB = 6.0\uff1b const double *const cptrTempA = &ctempA; /*1.dclTempA\u63a8\u65ad\u4e3aconst double\uff08\u4fdd\u7559\u9876\u5c42const\uff0c\u6b64\u5904\u4e0eauto\u4e0d\u540c\uff09*/ decltype(ctempA) dclTempA = 4.1; /*2.dclTempA\u4e3aconst double\uff0c\u4e0d\u80fd\u5bf9\u5176\u8d4b\u503c\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ dclTempA = 5; /*3.dclTempB\u63a8\u65ad\u4e3aconst double * const*/ decltype(cptrTempA) dclTempB = &ctempA; /*4.\u8f93\u51fa\u4e3a4\uff0832\u4f4d\u8ba1\u7b97\u673a\uff09\u548c5*/ cout<<sizeof(dclTempB)<<\" \"<<*dclTempB<<endl; /*5.\u4fdd\u7559\u9876\u5c42const\uff0c\u4e0d\u80fd\u4fee\u6539\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ dclTempB = &ctempB; /*6.\u4fdd\u7559\u5e95\u5c42const\uff0c\u4e0d\u80fd\u4fee\u6539\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\u7684\u503c\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ *dclTempB = 7.0; (3) \u4e0e\u5f15\u7528\u7ed3\u5408 int tempA = 0, &refTempA = tempA; /*1.dclTempA\u4e3a\u5f15\u7528\uff0c\u7ed1\u5b9a\u5230tempA*/ decltype(refTempA) dclTempA = tempA; /*2.dclTempB\u4e3a\u5f15\u7528\uff0c\u5fc5\u987b\u7ed1\u5b9a\u5230\u53d8\u91cf\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ decltype(refTempA) dclTempB = 0; /*3.dclTempC\u4e3a\u5f15\u7528\uff0c\u5fc5\u987b\u521d\u59cb\u5316\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ decltype(refTempA) dclTempC; /*4.\u53cc\u5c42\u62ec\u53f7\u8868\u793a\u5f15\u7528\uff0cdclTempD\u4e3a\u5f15\u7528\uff0c\u7ed1\u5b9a\u5230tempA*/ decltype((tempA)) dclTempD = tempA; const int ctempA = 1, &crefTempA = ctempA; /*5.dclTempE\u4e3a\u5e38\u91cf\u5f15\u7528\uff0c\u53ef\u4ee5\u7ed1\u5b9a\u5230\u666e\u901a\u53d8\u91cftempA*/ decltype(crefTempA) dclTempE = tempA; /*6.dclTempF\u4e3a\u5e38\u91cf\u5f15\u7528\uff0c\u53ef\u4ee5\u7ed1\u5b9a\u5230\u5e38\u91cfctempA*/ decltype(crefTempA) dclTempF = ctempA; /*7.dclTempG\u4e3a\u5e38\u91cf\u5f15\u7528\uff0c\u7ed1\u5b9a\u5230\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf*/ decltype(crefTempA) dclTempG = 0; /*8.dclTempH\u4e3a\u5e38\u91cf\u5f15\u7528\uff0c\u5fc5\u987b\u521d\u59cb\u5316\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ decltype(crefTempA) dclTempH; /*9.\u53cc\u5c42\u62ec\u53f7\u8868\u793a\u5f15\u7528,dclTempI\u4e3a\u5e38\u91cf\u5f15\u7528\uff0c\u53ef\u4ee5\u7ed1\u5b9a\u5230\u666e\u901a\u53d8\u91cftempA*/ decltype((ctempA)) dclTempI = ctempA; (4) \u4e0e\u6307\u9488\u7ed3\u5408 int tempA = 2; int *ptrTempA = &tempA; /*1.\u5e38\u89c4\u4f7f\u7528dclTempA\u4e3a\u4e00\u4e2aint *\u7684\u6307\u9488*/ decltype(ptrTempA) dclTempA; /*2.\u9700\u8981\u7279\u522b\u6ce8\u610f\uff0c\u8868\u8fbe\u5f0f\u5185\u5bb9\u4e3a\u89e3\u5f15\u7528\u64cd\u4f5c\uff0cdclTempB\u4e3a\u4e00\u4e2a\u5f15\u7528\uff0c\u5f15\u7528\u5fc5\u987b\u521d\u59cb\u5316\uff0c\u6545\u7f16\u8bd1\u4e0d\u8fc7*/ decltype(*ptrTempA) dclTempB; 3. decltype\u603b\u7ed3 \u00b6 decltype\u548cauto\u90fd\u53ef\u4ee5\u7528\u6765\u63a8\u65ad\u7c7b\u578b\uff0c\u4f46\u662f\u4e8c\u8005\u6709\u51e0\u5904\u660e\u663e\u7684\u5dee\u5f02\uff1a auto\u5ffd\u7565\u9876\u5c42const\uff0cdecltype\u4fdd\u7559\u9876\u5c42const\uff1b \u5bf9\u5f15\u7528\u64cd\u4f5c\uff0cauto\u63a8\u65ad\u51fa\u539f\u6709\u7c7b\u578b\uff0cdecltype\u63a8\u65ad\u51fa\u5f15\u7528\uff1b \u5bf9\u89e3\u5f15\u7528\u64cd\u4f5c\uff0cauto\u63a8\u65ad\u51fa\u539f\u6709\u7c7b\u578b\uff0cdecltype\u63a8\u65ad\u51fa\u5f15\u7528\uff1b auto\u63a8\u65ad\u65f6\u4f1a\u5b9e\u9645\u6267\u884c\uff0cdecltype\u4e0d\u4f1a\u6267\u884c\uff0c\u53ea\u505a\u5206\u6790\u3002\u603b\u4e4b\u5728\u4f7f\u7528\u4e2d\u8fc7\u7a0b\u4e2d\u548cconst\u3001\u5f15\u7528\u548c\u6307\u9488\u7ed3\u5408\u65f6\u9700\u8981\u7279\u522b\u5c0f\u5fc3\u3002","title":"\u5173\u952e\u5b57decltype"},{"location":"C%2B%2B/%E5%85%B3%E9%94%AE%E5%AD%97decltype/#c11decltype","text":"","title":"C++11\u65b0\u6807\u51c6\u5b66\u4e60\uff1adecltype\u5173\u952e\u5b57"},{"location":"C%2B%2B/%E5%85%B3%E9%94%AE%E5%AD%97decltype/#1-decltype","text":"\u6709\u65f6\u6211\u4eec\u5e0c\u671b\u4ece\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u63a8\u65ad\u51fa\u8981\u5b9a\u4e49\u7684\u53d8\u91cf\u7c7b\u578b\uff0c\u4f46\u662f\u4e0d\u60f3\u7528\u8be5\u8868\u8fbe\u5f0f\u7684\u503c\u521d\u59cb\u5316\u53d8\u91cf\uff08\u521d\u59cb\u5316\u53ef\u4ee5\u7528 auto \uff09\u3002\u4e3a\u4e86\u6ee1\u8db3\u8fd9\u4e00\u9700\u6c42\uff0cC++11\u65b0\u6807\u51c6\u5f15\u5165\u4e86 decltype \u7c7b\u578b\u8bf4\u660e\u7b26\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u9009\u62e9\u5e76\u8fd4\u56de\u64cd\u4f5c\u6570\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u7f16\u8bd1\u5668\u5206\u6790\u8868\u8fbe\u5f0f\u5e76\u5f97\u5230\u5b83\u7684\u7c7b\u578b\uff0c\u5374\u4e0d\u5b9e\u9645\u8ba1\u7b97\u8868\u8fbe\u5f0f\u7684\u503c\u3002","title":"1. decltype\u7684\u610f\u4e49"},{"location":"C%2B%2B/%E5%85%B3%E9%94%AE%E5%AD%97decltype/#2-decltype","text":"(1) \u57fa\u672c\u7528\u6cd5 int getSize(); int main(void) { int tempA = 2; /*1.dclTempA\u4e3aint.*/ decltype(tempA) dclTempA; /*2.dclTempB\u4e3aint\uff0c\u5bf9\u4e8egetSize\u6839\u672c\u6ca1\u6709\u5b9a\u4e49\uff0c\u4f46\u662f\u7a0b\u5e8f\u4f9d\u65e7\u6b63\u5e38\uff0c\u56e0\u4e3adecltype\u53ea\u505a\u5206\u6790\uff0c\u5e76\u4e0d\u8c03\u7528getSize().*/ decltype(getSize()) dclTempB; return 0; } (2) \u4e0econst\u7ed3\u5408 double tempA = 3.0; const double ctempA = 5.0; const double ctempB = 6.0\uff1b const double *const cptrTempA = &ctempA; /*1.dclTempA\u63a8\u65ad\u4e3aconst double\uff08\u4fdd\u7559\u9876\u5c42const\uff0c\u6b64\u5904\u4e0eauto\u4e0d\u540c\uff09*/ decltype(ctempA) dclTempA = 4.1; /*2.dclTempA\u4e3aconst double\uff0c\u4e0d\u80fd\u5bf9\u5176\u8d4b\u503c\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ dclTempA = 5; /*3.dclTempB\u63a8\u65ad\u4e3aconst double * const*/ decltype(cptrTempA) dclTempB = &ctempA; /*4.\u8f93\u51fa\u4e3a4\uff0832\u4f4d\u8ba1\u7b97\u673a\uff09\u548c5*/ cout<<sizeof(dclTempB)<<\" \"<<*dclTempB<<endl; /*5.\u4fdd\u7559\u9876\u5c42const\uff0c\u4e0d\u80fd\u4fee\u6539\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ dclTempB = &ctempB; /*6.\u4fdd\u7559\u5e95\u5c42const\uff0c\u4e0d\u80fd\u4fee\u6539\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\u7684\u503c\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ *dclTempB = 7.0; (3) \u4e0e\u5f15\u7528\u7ed3\u5408 int tempA = 0, &refTempA = tempA; /*1.dclTempA\u4e3a\u5f15\u7528\uff0c\u7ed1\u5b9a\u5230tempA*/ decltype(refTempA) dclTempA = tempA; /*2.dclTempB\u4e3a\u5f15\u7528\uff0c\u5fc5\u987b\u7ed1\u5b9a\u5230\u53d8\u91cf\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ decltype(refTempA) dclTempB = 0; /*3.dclTempC\u4e3a\u5f15\u7528\uff0c\u5fc5\u987b\u521d\u59cb\u5316\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ decltype(refTempA) dclTempC; /*4.\u53cc\u5c42\u62ec\u53f7\u8868\u793a\u5f15\u7528\uff0cdclTempD\u4e3a\u5f15\u7528\uff0c\u7ed1\u5b9a\u5230tempA*/ decltype((tempA)) dclTempD = tempA; const int ctempA = 1, &crefTempA = ctempA; /*5.dclTempE\u4e3a\u5e38\u91cf\u5f15\u7528\uff0c\u53ef\u4ee5\u7ed1\u5b9a\u5230\u666e\u901a\u53d8\u91cftempA*/ decltype(crefTempA) dclTempE = tempA; /*6.dclTempF\u4e3a\u5e38\u91cf\u5f15\u7528\uff0c\u53ef\u4ee5\u7ed1\u5b9a\u5230\u5e38\u91cfctempA*/ decltype(crefTempA) dclTempF = ctempA; /*7.dclTempG\u4e3a\u5e38\u91cf\u5f15\u7528\uff0c\u7ed1\u5b9a\u5230\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf*/ decltype(crefTempA) dclTempG = 0; /*8.dclTempH\u4e3a\u5e38\u91cf\u5f15\u7528\uff0c\u5fc5\u987b\u521d\u59cb\u5316\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ decltype(crefTempA) dclTempH; /*9.\u53cc\u5c42\u62ec\u53f7\u8868\u793a\u5f15\u7528,dclTempI\u4e3a\u5e38\u91cf\u5f15\u7528\uff0c\u53ef\u4ee5\u7ed1\u5b9a\u5230\u666e\u901a\u53d8\u91cftempA*/ decltype((ctempA)) dclTempI = ctempA; (4) \u4e0e\u6307\u9488\u7ed3\u5408 int tempA = 2; int *ptrTempA = &tempA; /*1.\u5e38\u89c4\u4f7f\u7528dclTempA\u4e3a\u4e00\u4e2aint *\u7684\u6307\u9488*/ decltype(ptrTempA) dclTempA; /*2.\u9700\u8981\u7279\u522b\u6ce8\u610f\uff0c\u8868\u8fbe\u5f0f\u5185\u5bb9\u4e3a\u89e3\u5f15\u7528\u64cd\u4f5c\uff0cdclTempB\u4e3a\u4e00\u4e2a\u5f15\u7528\uff0c\u5f15\u7528\u5fc5\u987b\u521d\u59cb\u5316\uff0c\u6545\u7f16\u8bd1\u4e0d\u8fc7*/ decltype(*ptrTempA) dclTempB;","title":"2. decltype\u7528\u6cd5"},{"location":"C%2B%2B/%E5%85%B3%E9%94%AE%E5%AD%97decltype/#3-decltype","text":"decltype\u548cauto\u90fd\u53ef\u4ee5\u7528\u6765\u63a8\u65ad\u7c7b\u578b\uff0c\u4f46\u662f\u4e8c\u8005\u6709\u51e0\u5904\u660e\u663e\u7684\u5dee\u5f02\uff1a auto\u5ffd\u7565\u9876\u5c42const\uff0cdecltype\u4fdd\u7559\u9876\u5c42const\uff1b \u5bf9\u5f15\u7528\u64cd\u4f5c\uff0cauto\u63a8\u65ad\u51fa\u539f\u6709\u7c7b\u578b\uff0cdecltype\u63a8\u65ad\u51fa\u5f15\u7528\uff1b \u5bf9\u89e3\u5f15\u7528\u64cd\u4f5c\uff0cauto\u63a8\u65ad\u51fa\u539f\u6709\u7c7b\u578b\uff0cdecltype\u63a8\u65ad\u51fa\u5f15\u7528\uff1b auto\u63a8\u65ad\u65f6\u4f1a\u5b9e\u9645\u6267\u884c\uff0cdecltype\u4e0d\u4f1a\u6267\u884c\uff0c\u53ea\u505a\u5206\u6790\u3002\u603b\u4e4b\u5728\u4f7f\u7528\u4e2d\u8fc7\u7a0b\u4e2d\u548cconst\u3001\u5f15\u7528\u548c\u6307\u9488\u7ed3\u5408\u65f6\u9700\u8981\u7279\u522b\u5c0f\u5fc3\u3002","title":"3. decltype\u603b\u7ed3"},{"location":"C%2B%2B/%E5%85%B3%E9%94%AE%E5%AD%97volatile/","text":"[\u8f6c\u8f7d]\u5b98\u65b9\u89e3\u91ca\uff1a \u00b6 \u200b volatile \u4f5c\u4e3a\u6307\u4ee4\u5173\u952e\u5b57\uff0c\u786e\u4fdd\u672c\u6761\u6307\u4ee4\u4e0d\u4f1a\u56e0\u7f16\u8bd1\u5668\u7684\u4f18\u5316\u800c\u88ab\u7701\u7565\uff0c\u5373\u7cfb\u7edf\u6bcf\u6b21\u4ece\u53d8\u91cf\u6240\u5728\u5185\u5b58\u8bfb\u53d6\u6570\u636e\u800c\u4e0d\u662f\u4ece\u5bc4\u5b58\u5668\u8bfb\u53d6\u5907\u4efd\u3002 \u6613\u53d8\u6027 \u00b6 \u7f16\u8bd1\u5668\u5bf9volatile\u4fee\u9970\u7684\u53d8\u91cf\uff0c\u5f53\u8981\u8bfb\u53d6\u8fd9\u4e2a\u53d8\u91cf\u65f6\uff0c\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u4f1a\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\uff0c\u800c\u4e0d\u4f1a\u4ece\u5bc4\u5b58\u5668\u7f13\u5b58\u4e2d\u8bfb\u53d6\uff08\u56e0\u4e3a\u6bcf\u6b21\u90fd\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u4f53\u73b0\u51fa\u53d8\u91cf\u7684\u201c\u6613\u53d8\u201d\uff09 \u5bf9\u4e8e\u975evolatile\u53d8\u91cf \u5bf9 b = a + 1;\u8fd9\u6761\u8bed\u53e5\uff0c\u5bf9\u5e94\u7684\u6c47\u7f16\u6307\u4ee4\u662f\uff1alea ecx, [eax + 1]\u3002 \u7531\u4e8e\u53d8\u91cfa\uff0c\u5728\u524d\u4e00\u6761\u8bed\u53e5a = fn\u00a9\u6267\u884c\u65f6\uff0c\u88ab\u7f13\u5b58\u5728\u4e86\u5bc4\u5b58\u5668eax\u4e2d\uff0c\u56e0\u6b64b = a + 1\uff1b\u8bed\u53e5\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4ecd\u65e7\u5728\u5bc4\u5b58\u5668eax\u4e2d\u7684\u5185\u5bb9\uff0c\u6765\u8fdb\u884c\u8ba1\u7b97\uff0c\u5bf9\u5e94\u7684\u4e5f\u5c31\u662f\u6c47\u7f16\uff1a[eax + 1] \u5bf9\u4e8evolatile\u578b\u53d8\u91cf \u4e0e\u6d4b\u8bd5\u7528\u4f8b\u4e00\u552f\u4e00\u7684\u4e0d\u540c\u4e4b\u5904\uff0c\u662f\u53d8\u91cfa\u88ab\u8bbe\u7f6e\u4e3avolatile\u5c5e\u6027\uff0c\u4e00\u4e2a\u5c0f\u5c0f\u7684\u53d8\u5316\uff0c\u5e26\u6765\u7684\u662f\u6c47\u7f16\u4ee3\u7801\u4e0a\u5f88\u5927\u7684\u53d8\u5316\u3002a = fn\u00a9\u6267\u884c\u540e\uff0c\u5bc4\u5b58\u5668ecx\u4e2d\u7684a\uff0c\u88ab\u5199\u56de\u5185\u5b58\uff1amov dword ptr [esp+0Ch], ecx\u3002\u7136\u540e\uff0c\u5728\u6267\u884cb = a + 1\uff1b\u8bed\u53e5\u65f6\uff0c\u53d8\u91cfa\u6709\u91cd\u65b0\u88ab\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u51fa\u6765\uff1amov eax, dword ptr [esp + 0Ch]\uff0c\u800c\u4e0d\u518d\u76f4\u63a5\u4f7f\u7528\u5bc4\u5b58\u5668ecx\u4e2d\u7684\u5185\u5bb9 \u4e0d\u53ef\u4f18\u5316\u6027 \u00b6 \u7f16\u8bd1\u5668\u4e0d\u4f1a\u5bf9volatile\u4fee\u9970\u7684\u53d8\u91cf\u8fdb\u884c\u4efb\u4f55\u4f18\u5316 \u5bf9\u4e8e\u975evolatile\u53d8\u91cf \u5728\u8fd9\u4e2a\u7528\u4f8b\u4e2d\uff0c\u975evolatile\u53d8\u91cfa\uff0cb\uff0cc\u5168\u90e8\u88ab\u7f16\u8bd1\u5668\u4f18\u5316\u6389\u4e86 (optimize out)\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u901a\u8fc7\u5206\u6790\uff0c\u53d1\u89c9a\uff0cb\uff0cc\u4e09\u4e2a\u53d8\u91cf\u76f4\u63a5\u7528\u7acb\u5373\u6570\u66ff\u6362\uff0c\u4e0d\u5fc5\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u6700\u540e\u7684\u6c47\u7f16\u4ee3\u7801\u76f8\u5f53\u7b80\u4ecb\uff0c\u9ad8\u6548\u7387 \u5728\u8fd9\u4e2a\u7528\u4f8b\u4e2d\uff0c\u975evolatile\u53d8\u91cfa\uff0cb\uff0cc\u5168\u90e8\u88ab\u7f16\u8bd1\u5668\u4f18\u5316\u6389\u4e86 (optimize out)\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u901a\u8fc7\u5206\u6790\uff0c\u53d1\u89c9a\uff0cb\uff0cc\u4e09\u4e2a\u53d8\u91cf\u76f4\u63a5\u7528\u7acb\u5373\u6570\u66ff\u6362\uff0c\u4e0d\u5fc5\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u6700\u540e\u7684\u6c47\u7f16\u4ee3\u7801\u76f8\u5f53\u7b80\u4ecb\uff0c\u9ad8\u6548\u7387 \u5bf9\u4e8evolatile\u53d8\u91cf \u5728\u8fd9\u4e2a\u7528\u4f8b\u4e2d\uff0ca\u3001b\u3001c\u4e09\u4e2a\u53d8\u91cf\uff0c\u90fd\u662fvolatile\u53d8\u91cf\u3002\u5728\u6c47\u7f16\u8bed\u8a00\u4e2d\uff0c\u8fd9\u4e09\u4e2a\u53d8\u91cf\u5b58\u5230\u4e86\u5185\u5b58\u4e2d\uff0c\u5728\u4f7f\u7528a\u3001b\u3001c\u65f6\u9700\u8981\u5c06\u4e09\u4e2a\u53d8\u91cf\u4ece\u5185\u5b58\u8bfb\u5165\u5230\u5bc4\u5b58\u5668\u4e4b\u4e2d\uff0c\u7136\u540e\u518d\u8c03\u7528printf()\u51fd\u6570 \u987a\u5e8f\u6027 \u00b6 \u7a0b\u5e8f\u7684\u4e71\u5e8f\u4f18\u5316\uff1a\u4fdd\u8bc1\u4e00\u6bb5\u4ee3\u7801\u7684\u8f93\u51fa\u7ed3\u679c\u7684\u524d\u63d0\u4e0b\uff0c\u5c06\u5404\u6761\u4ee3\u7801\u7684\u5b9e\u9645\u6267\u884c\u987a\u5e8f\u8fdb\u884c\u4f18\u5316\u8c03\u6574 volatile\u53d8\u91cf\u4e0evolatile\u53d8\u91cf\u95f4\u4ee3\u7801\u7684\u987a\u5e8f\uff0c\u7f16\u8bd1\u5668\u4e0d\u4f1a\u8fdb\u884c\u4e71\u5e8f\u4f18\u5316\uff0c\u4f46\u662fvolatile\u53d8\u91cf\u4e0e\u975evolatile\u53d8\u91cf\u4ee3\u7801\u7684\u987a\u5e8f\uff0c\u7f16\u8bd1\u5668\u4e0d\u4fdd\u8bc1\u987a\u5e8f\uff0c\u53ef\u80fd\u4f1a\u8fdb\u884c\u4e71\u5e8f\u4f18\u5316","title":"\u5173\u952e\u5b57volatile"},{"location":"C%2B%2B/%E5%85%B3%E9%94%AE%E5%AD%97volatile/#_1","text":"\u200b volatile \u4f5c\u4e3a\u6307\u4ee4\u5173\u952e\u5b57\uff0c\u786e\u4fdd\u672c\u6761\u6307\u4ee4\u4e0d\u4f1a\u56e0\u7f16\u8bd1\u5668\u7684\u4f18\u5316\u800c\u88ab\u7701\u7565\uff0c\u5373\u7cfb\u7edf\u6bcf\u6b21\u4ece\u53d8\u91cf\u6240\u5728\u5185\u5b58\u8bfb\u53d6\u6570\u636e\u800c\u4e0d\u662f\u4ece\u5bc4\u5b58\u5668\u8bfb\u53d6\u5907\u4efd\u3002","title":"[\u8f6c\u8f7d]\u5b98\u65b9\u89e3\u91ca\uff1a"},{"location":"C%2B%2B/%E5%85%B3%E9%94%AE%E5%AD%97volatile/#_2","text":"\u7f16\u8bd1\u5668\u5bf9volatile\u4fee\u9970\u7684\u53d8\u91cf\uff0c\u5f53\u8981\u8bfb\u53d6\u8fd9\u4e2a\u53d8\u91cf\u65f6\uff0c\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u4f1a\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\uff0c\u800c\u4e0d\u4f1a\u4ece\u5bc4\u5b58\u5668\u7f13\u5b58\u4e2d\u8bfb\u53d6\uff08\u56e0\u4e3a\u6bcf\u6b21\u90fd\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u4f53\u73b0\u51fa\u53d8\u91cf\u7684\u201c\u6613\u53d8\u201d\uff09 \u5bf9\u4e8e\u975evolatile\u53d8\u91cf \u5bf9 b = a + 1;\u8fd9\u6761\u8bed\u53e5\uff0c\u5bf9\u5e94\u7684\u6c47\u7f16\u6307\u4ee4\u662f\uff1alea ecx, [eax + 1]\u3002 \u7531\u4e8e\u53d8\u91cfa\uff0c\u5728\u524d\u4e00\u6761\u8bed\u53e5a = fn\u00a9\u6267\u884c\u65f6\uff0c\u88ab\u7f13\u5b58\u5728\u4e86\u5bc4\u5b58\u5668eax\u4e2d\uff0c\u56e0\u6b64b = a + 1\uff1b\u8bed\u53e5\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4ecd\u65e7\u5728\u5bc4\u5b58\u5668eax\u4e2d\u7684\u5185\u5bb9\uff0c\u6765\u8fdb\u884c\u8ba1\u7b97\uff0c\u5bf9\u5e94\u7684\u4e5f\u5c31\u662f\u6c47\u7f16\uff1a[eax + 1] \u5bf9\u4e8evolatile\u578b\u53d8\u91cf \u4e0e\u6d4b\u8bd5\u7528\u4f8b\u4e00\u552f\u4e00\u7684\u4e0d\u540c\u4e4b\u5904\uff0c\u662f\u53d8\u91cfa\u88ab\u8bbe\u7f6e\u4e3avolatile\u5c5e\u6027\uff0c\u4e00\u4e2a\u5c0f\u5c0f\u7684\u53d8\u5316\uff0c\u5e26\u6765\u7684\u662f\u6c47\u7f16\u4ee3\u7801\u4e0a\u5f88\u5927\u7684\u53d8\u5316\u3002a = fn\u00a9\u6267\u884c\u540e\uff0c\u5bc4\u5b58\u5668ecx\u4e2d\u7684a\uff0c\u88ab\u5199\u56de\u5185\u5b58\uff1amov dword ptr [esp+0Ch], ecx\u3002\u7136\u540e\uff0c\u5728\u6267\u884cb = a + 1\uff1b\u8bed\u53e5\u65f6\uff0c\u53d8\u91cfa\u6709\u91cd\u65b0\u88ab\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u51fa\u6765\uff1amov eax, dword ptr [esp + 0Ch]\uff0c\u800c\u4e0d\u518d\u76f4\u63a5\u4f7f\u7528\u5bc4\u5b58\u5668ecx\u4e2d\u7684\u5185\u5bb9","title":"\u6613\u53d8\u6027"},{"location":"C%2B%2B/%E5%85%B3%E9%94%AE%E5%AD%97volatile/#_3","text":"\u7f16\u8bd1\u5668\u4e0d\u4f1a\u5bf9volatile\u4fee\u9970\u7684\u53d8\u91cf\u8fdb\u884c\u4efb\u4f55\u4f18\u5316 \u5bf9\u4e8e\u975evolatile\u53d8\u91cf \u5728\u8fd9\u4e2a\u7528\u4f8b\u4e2d\uff0c\u975evolatile\u53d8\u91cfa\uff0cb\uff0cc\u5168\u90e8\u88ab\u7f16\u8bd1\u5668\u4f18\u5316\u6389\u4e86 (optimize out)\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u901a\u8fc7\u5206\u6790\uff0c\u53d1\u89c9a\uff0cb\uff0cc\u4e09\u4e2a\u53d8\u91cf\u76f4\u63a5\u7528\u7acb\u5373\u6570\u66ff\u6362\uff0c\u4e0d\u5fc5\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u6700\u540e\u7684\u6c47\u7f16\u4ee3\u7801\u76f8\u5f53\u7b80\u4ecb\uff0c\u9ad8\u6548\u7387 \u5728\u8fd9\u4e2a\u7528\u4f8b\u4e2d\uff0c\u975evolatile\u53d8\u91cfa\uff0cb\uff0cc\u5168\u90e8\u88ab\u7f16\u8bd1\u5668\u4f18\u5316\u6389\u4e86 (optimize out)\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u901a\u8fc7\u5206\u6790\uff0c\u53d1\u89c9a\uff0cb\uff0cc\u4e09\u4e2a\u53d8\u91cf\u76f4\u63a5\u7528\u7acb\u5373\u6570\u66ff\u6362\uff0c\u4e0d\u5fc5\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u6700\u540e\u7684\u6c47\u7f16\u4ee3\u7801\u76f8\u5f53\u7b80\u4ecb\uff0c\u9ad8\u6548\u7387 \u5bf9\u4e8evolatile\u53d8\u91cf \u5728\u8fd9\u4e2a\u7528\u4f8b\u4e2d\uff0ca\u3001b\u3001c\u4e09\u4e2a\u53d8\u91cf\uff0c\u90fd\u662fvolatile\u53d8\u91cf\u3002\u5728\u6c47\u7f16\u8bed\u8a00\u4e2d\uff0c\u8fd9\u4e09\u4e2a\u53d8\u91cf\u5b58\u5230\u4e86\u5185\u5b58\u4e2d\uff0c\u5728\u4f7f\u7528a\u3001b\u3001c\u65f6\u9700\u8981\u5c06\u4e09\u4e2a\u53d8\u91cf\u4ece\u5185\u5b58\u8bfb\u5165\u5230\u5bc4\u5b58\u5668\u4e4b\u4e2d\uff0c\u7136\u540e\u518d\u8c03\u7528printf()\u51fd\u6570","title":"\u4e0d\u53ef\u4f18\u5316\u6027"},{"location":"C%2B%2B/%E5%85%B3%E9%94%AE%E5%AD%97volatile/#_4","text":"\u7a0b\u5e8f\u7684\u4e71\u5e8f\u4f18\u5316\uff1a\u4fdd\u8bc1\u4e00\u6bb5\u4ee3\u7801\u7684\u8f93\u51fa\u7ed3\u679c\u7684\u524d\u63d0\u4e0b\uff0c\u5c06\u5404\u6761\u4ee3\u7801\u7684\u5b9e\u9645\u6267\u884c\u987a\u5e8f\u8fdb\u884c\u4f18\u5316\u8c03\u6574 volatile\u53d8\u91cf\u4e0evolatile\u53d8\u91cf\u95f4\u4ee3\u7801\u7684\u987a\u5e8f\uff0c\u7f16\u8bd1\u5668\u4e0d\u4f1a\u8fdb\u884c\u4e71\u5e8f\u4f18\u5316\uff0c\u4f46\u662fvolatile\u53d8\u91cf\u4e0e\u975evolatile\u53d8\u91cf\u4ee3\u7801\u7684\u987a\u5e8f\uff0c\u7f16\u8bd1\u5668\u4e0d\u4fdd\u8bc1\u987a\u5e8f\uff0c\u53ef\u80fd\u4f1a\u8fdb\u884c\u4e71\u5e8f\u4f18\u5316","title":"\u987a\u5e8f\u6027"},{"location":"DataStructure/AVL%E6%A0%91/","text":"\u4ee3\u7801\uff1a \u00b6 #include <iostream> #include <algorithm> using namespace std ; struct AVLNode { int data ; int height ; AVLNode * left ; AVLNode * right ; AVLNode () : data ( 0 ), height ( 0 ), left ( nullptr ), right ( nullptr ) {}; AVLNode ( int d , int h = 0 , AVLNode * l = nullptr , AVLNode * r = nullptr ) : data ( d ), height ( h ), left ( l ), right ( r ) {}; }; class AVLTree { public : AVLTree () : root ( nullptr ) {} ~ AVLTree () { destroy ( root ); } int Height () { return height ( root ); } bool Insert ( int value ) { return insert ( root , value ); } void PrintBinTree () { PrintBinTree ( root ); } bool Remove ( int value ) { return remove ( root , value ); } private : //\u6c42\u53d6\u9ad8\u5ea6 int height ( AVLNode * cur ) { if ( ! cur ) return 0 ; int i = height ( cur -> left ); int j = height ( cur -> right ); return i > j ? i + 1 : j + 1 ; } //\u5728\u53f3\u5b50\u6811\u63d2\u5165\u53f3\u5b69\u5b50\u5bfc\u81f4AVL\u5931\u8861\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u5355\u5de6\u65cb\u8c03\u6574 AVLNode * LeftRotation ( AVLNode * cur ) { AVLNode * tmp = cur -> right ; cur -> right = tmp -> left ; tmp -> left = cur ; cur -> height = max ( height ( cur -> left ), height ( cur -> right )) + 1 ; tmp -> height = max ( height ( tmp -> left ), height ( tmp -> right )) + 1 ; return tmp ; } //\u5728\u5de6\u5b50\u6811\u4e0a\u63d2\u5165\u5de6\u5b69\u5b50\u5bfc\u81f4AVL\u6811\u5931\u8861\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u5355\u53f3\u65cb\u8c03\u6574 AVLNode * RightRotation ( AVLNode * cur ) { AVLNode * tmp = cur -> left ; cur -> left = tmp -> right ; tmp -> right = cur ; cur -> height = max ( height ( cur -> left ), height ( cur -> right )) + 1 ; tmp -> height = max ( height ( tmp -> left ), height ( tmp -> right )) + 1 ; return tmp ; } //\u5728\u53f3\u5b50\u6811\u4e0a\u63d2\u5165\u5de6\u5b69\u5b50\u5bfc\u81f4AVL\u6811\u5931\u8861,\u6b64\u65f6\u6211\u4eec\u9700\u8981\u8fdb\u884c\u5148\u53f3\u65cb\u540e\u5de6\u65cb\u7684\u8c03\u6574 AVLNode * RightLeftRotation ( AVLNode * cur ) { cur -> right = RightRotation ( cur -> right ); return LeftRotation ( cur ); } //\u5728\u5de6\u5b50\u6811\u4e0a\u63d2\u5165\u53f3\u5b69\u5b50\u5bfc\u81f4AVL\u6811\u5931\u8861,\u6b64\u65f6\u6211\u4eec\u9700\u8981\u8fdb\u884c\u5148\u5de6\u65cb\u540e\u53f3\u65cb\u7684\u8c03\u6574 AVLNode * LeftRightRotation ( AVLNode * cur ) { cur -> left = LeftRotation ( cur -> left ); return LeftRotation ( cur ); } AVLNode * insert ( AVLNode *& cur , int value ) { if ( ! cur ) cur = new AVLNode ( value ); else if ( value > cur -> data ) { cur -> right = insert ( cur -> right , value ); if ( height ( cur -> right ) - height ( cur -> left ) == 2 ) { if ( value > cur -> right -> data ) cur = LeftRotation ( cur ); else if ( value < cur -> right -> data ) cur = RightLeftRotation ( cur ); } } else if ( value < cur -> data ) { cur -> left = insert ( cur -> left , value ); if ( height ( cur -> left ) - height ( cur -> right ) == 2 ) { if ( value < cur -> left -> data ) cur = RightRotation ( cur ); else if ( value > cur -> left -> data ) cur = LeftRightRotation ( cur ); } } cur -> height = max ( height ( cur -> left ), height ( cur -> right )); return cur ; } AVLNode * remove ( AVLNode * cur , int value ) { if ( ! cur ) return nullptr ; if ( value == cur -> data ) { if ( cur -> left && cur -> right ) { if ( height ( cur -> left ) > height ( cur -> right )) { AVLNode * tmp = maximum ( cur -> left ); cur -> data = tmp -> data ; cur -> left = remove ( cur -> left , tmp -> data ); } else { AVLNode * tmp = minimum ( cur -> right ); cur -> data = tmp -> data ; cur -> right = remove ( cur -> right , tmp -> data ); } } else { AVLNode * tmp = cur ; if ( cur -> left ) cur = cur -> left ; else if ( cur -> right ) cur = cur -> right ; delete tmp ; return nullptr ; } } else if ( value > cur -> data ) { cur -> right = remove ( cur -> right , value ); if ( height ( cur -> left ) - height ( cur -> right ) == 2 ) { if ( height ( cur -> left -> right ) > height ( cur -> left -> left )) cur = LeftRightRotation ( cur ); else cur = RightRotation ( cur ); } } else if ( value < cur -> data ) { cur -> left = remove ( cur -> left , value ); if ( height ( cur -> right ) - height ( cur -> left ) == 2 ) { if ( height ( cur -> right -> left ) > height ( cur -> right -> right )) cur = RightLeftRotation ( cur ); else cur = LeftRotation ( cur ); } } return cur ; } AVLNode * maximum ( AVLNode * cur ) { if ( ! cur ) return nullptr ; while ( cur -> right ) { cur = cur -> right ; } return cur ; } AVLNode * minimum ( AVLNode * cur ) { if ( ! cur ) return nullptr ; while ( cur -> left ) { cur = cur -> left ; } return cur ; } AVLNode * search ( AVLNode * cur , int value ) { if ( ! cur ) return nullptr ; if ( cur -> data == value ) return cur ; else if ( value > cur -> data ) return search ( cur -> right , value ); else search ( cur -> left , value ); } void destroy ( AVLNode * cur ) { if ( cur ) { destroy ( cur -> left ); destroy ( cur -> right ); delete cur ; cur = nullptr ; } } void PrintBinTree ( AVLNode * BT ) { if ( BT != NULL ) //\u6811\u4e3a\u7a7a\u65f6\u7ed3\u675f\u9012\u5f52 { cout << BT -> data ; if ( BT -> left != NULL || BT -> right != NULL ) { cout << '(' ; if ( BT -> left != NULL ) { PrintBinTree ( BT -> left ); } cout << ',' ; if ( BT -> right != NULL ) { PrintBinTree ( BT -> right ); } cout << ')' ; } } } AVLNode * root ; }; int main () { AVLTree t ; for ( int i = 0 ; i < 10 ; i ++ ) { t . Insert ( i ); } cout << \"\u6811\u9ad8\uff1a\" << t . Height () << endl ; t . PrintBinTree (); t . Remove ( 5 ); cout << endl ; t . PrintBinTree (); cout << endl ; }","title":"AVL\u6811"},{"location":"DataStructure/AVL%E6%A0%91/#_1","text":"#include <iostream> #include <algorithm> using namespace std ; struct AVLNode { int data ; int height ; AVLNode * left ; AVLNode * right ; AVLNode () : data ( 0 ), height ( 0 ), left ( nullptr ), right ( nullptr ) {}; AVLNode ( int d , int h = 0 , AVLNode * l = nullptr , AVLNode * r = nullptr ) : data ( d ), height ( h ), left ( l ), right ( r ) {}; }; class AVLTree { public : AVLTree () : root ( nullptr ) {} ~ AVLTree () { destroy ( root ); } int Height () { return height ( root ); } bool Insert ( int value ) { return insert ( root , value ); } void PrintBinTree () { PrintBinTree ( root ); } bool Remove ( int value ) { return remove ( root , value ); } private : //\u6c42\u53d6\u9ad8\u5ea6 int height ( AVLNode * cur ) { if ( ! cur ) return 0 ; int i = height ( cur -> left ); int j = height ( cur -> right ); return i > j ? i + 1 : j + 1 ; } //\u5728\u53f3\u5b50\u6811\u63d2\u5165\u53f3\u5b69\u5b50\u5bfc\u81f4AVL\u5931\u8861\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u5355\u5de6\u65cb\u8c03\u6574 AVLNode * LeftRotation ( AVLNode * cur ) { AVLNode * tmp = cur -> right ; cur -> right = tmp -> left ; tmp -> left = cur ; cur -> height = max ( height ( cur -> left ), height ( cur -> right )) + 1 ; tmp -> height = max ( height ( tmp -> left ), height ( tmp -> right )) + 1 ; return tmp ; } //\u5728\u5de6\u5b50\u6811\u4e0a\u63d2\u5165\u5de6\u5b69\u5b50\u5bfc\u81f4AVL\u6811\u5931\u8861\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u5355\u53f3\u65cb\u8c03\u6574 AVLNode * RightRotation ( AVLNode * cur ) { AVLNode * tmp = cur -> left ; cur -> left = tmp -> right ; tmp -> right = cur ; cur -> height = max ( height ( cur -> left ), height ( cur -> right )) + 1 ; tmp -> height = max ( height ( tmp -> left ), height ( tmp -> right )) + 1 ; return tmp ; } //\u5728\u53f3\u5b50\u6811\u4e0a\u63d2\u5165\u5de6\u5b69\u5b50\u5bfc\u81f4AVL\u6811\u5931\u8861,\u6b64\u65f6\u6211\u4eec\u9700\u8981\u8fdb\u884c\u5148\u53f3\u65cb\u540e\u5de6\u65cb\u7684\u8c03\u6574 AVLNode * RightLeftRotation ( AVLNode * cur ) { cur -> right = RightRotation ( cur -> right ); return LeftRotation ( cur ); } //\u5728\u5de6\u5b50\u6811\u4e0a\u63d2\u5165\u53f3\u5b69\u5b50\u5bfc\u81f4AVL\u6811\u5931\u8861,\u6b64\u65f6\u6211\u4eec\u9700\u8981\u8fdb\u884c\u5148\u5de6\u65cb\u540e\u53f3\u65cb\u7684\u8c03\u6574 AVLNode * LeftRightRotation ( AVLNode * cur ) { cur -> left = LeftRotation ( cur -> left ); return LeftRotation ( cur ); } AVLNode * insert ( AVLNode *& cur , int value ) { if ( ! cur ) cur = new AVLNode ( value ); else if ( value > cur -> data ) { cur -> right = insert ( cur -> right , value ); if ( height ( cur -> right ) - height ( cur -> left ) == 2 ) { if ( value > cur -> right -> data ) cur = LeftRotation ( cur ); else if ( value < cur -> right -> data ) cur = RightLeftRotation ( cur ); } } else if ( value < cur -> data ) { cur -> left = insert ( cur -> left , value ); if ( height ( cur -> left ) - height ( cur -> right ) == 2 ) { if ( value < cur -> left -> data ) cur = RightRotation ( cur ); else if ( value > cur -> left -> data ) cur = LeftRightRotation ( cur ); } } cur -> height = max ( height ( cur -> left ), height ( cur -> right )); return cur ; } AVLNode * remove ( AVLNode * cur , int value ) { if ( ! cur ) return nullptr ; if ( value == cur -> data ) { if ( cur -> left && cur -> right ) { if ( height ( cur -> left ) > height ( cur -> right )) { AVLNode * tmp = maximum ( cur -> left ); cur -> data = tmp -> data ; cur -> left = remove ( cur -> left , tmp -> data ); } else { AVLNode * tmp = minimum ( cur -> right ); cur -> data = tmp -> data ; cur -> right = remove ( cur -> right , tmp -> data ); } } else { AVLNode * tmp = cur ; if ( cur -> left ) cur = cur -> left ; else if ( cur -> right ) cur = cur -> right ; delete tmp ; return nullptr ; } } else if ( value > cur -> data ) { cur -> right = remove ( cur -> right , value ); if ( height ( cur -> left ) - height ( cur -> right ) == 2 ) { if ( height ( cur -> left -> right ) > height ( cur -> left -> left )) cur = LeftRightRotation ( cur ); else cur = RightRotation ( cur ); } } else if ( value < cur -> data ) { cur -> left = remove ( cur -> left , value ); if ( height ( cur -> right ) - height ( cur -> left ) == 2 ) { if ( height ( cur -> right -> left ) > height ( cur -> right -> right )) cur = RightLeftRotation ( cur ); else cur = LeftRotation ( cur ); } } return cur ; } AVLNode * maximum ( AVLNode * cur ) { if ( ! cur ) return nullptr ; while ( cur -> right ) { cur = cur -> right ; } return cur ; } AVLNode * minimum ( AVLNode * cur ) { if ( ! cur ) return nullptr ; while ( cur -> left ) { cur = cur -> left ; } return cur ; } AVLNode * search ( AVLNode * cur , int value ) { if ( ! cur ) return nullptr ; if ( cur -> data == value ) return cur ; else if ( value > cur -> data ) return search ( cur -> right , value ); else search ( cur -> left , value ); } void destroy ( AVLNode * cur ) { if ( cur ) { destroy ( cur -> left ); destroy ( cur -> right ); delete cur ; cur = nullptr ; } } void PrintBinTree ( AVLNode * BT ) { if ( BT != NULL ) //\u6811\u4e3a\u7a7a\u65f6\u7ed3\u675f\u9012\u5f52 { cout << BT -> data ; if ( BT -> left != NULL || BT -> right != NULL ) { cout << '(' ; if ( BT -> left != NULL ) { PrintBinTree ( BT -> left ); } cout << ',' ; if ( BT -> right != NULL ) { PrintBinTree ( BT -> right ); } cout << ')' ; } } } AVLNode * root ; }; int main () { AVLTree t ; for ( int i = 0 ; i < 10 ; i ++ ) { t . Insert ( i ); } cout << \"\u6811\u9ad8\uff1a\" << t . Height () << endl ; t . PrintBinTree (); t . Remove ( 5 ); cout << endl ; t . PrintBinTree (); cout << endl ; }","title":"\u4ee3\u7801\uff1a"},{"location":"DesignPattern/0-%E5%88%86%E7%B1%BB/","text":"\u5206\u7c7b \u00b6","title":"0-\u5206\u7c7b"},{"location":"DesignPattern/0-%E5%88%86%E7%B1%BB/#_1","text":"","title":"\u5206\u7c7b"},{"location":"DesignPattern/1-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/","text":"\u7b56\u7565\u6a21\u5f0f \u00b6 \u5b9a\u4e49\uff1a \u00b6 \u200b \u5b83\u5b9a\u4e49\u4e86\u7b97\u6cd5\u5bb6\u65cf\uff0c\u5206\u522b\u5c01\u88c5\u8d77\u6765\uff0c\u8ba9\u5b83\u4eec\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u66ff\u6362\uff0c\u6b64\u6a21\u5f0f\u8ba9\u7b97\u6cd5\u7684\u53d8\u5316\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5230\u4f7f\u7528\u7b97\u6cd5\u7684\u5ba2\u6237\u3002 \u9002\u7528\u573a\u666f\uff1a \u00b6 \u200b \u200b \u7b56\u7565\u6a21\u5f0f\u5c31\u662f\u7528\u6765\u5c01\u88c5\u7b97\u6cd5\u7684\uff0c\u4f46\u5728\u5b9e\u8df5\u4e2d\uff0c\u53ef\u4ee5\u7528\u5b83\u5c01\u88c5\u51e0\u4e4e\u4efb\u4f55\u7c7b\u578b\u7684\u89c4\u5219\uff0c\u53ea\u8981\u5728\u5206\u6790\u8fc7\u7a0b\u4e2d\u542c\u5230\u9700\u8981\u5728\u4e0d\u540c\u65f6\u95f4\u5e94\u7528\u4e0d\u540c\u7684\u4e1a\u52a1\u89c4\u5219\uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u9002\u7528\u7b56\u7565\u6a21\u5f0f\u5904\u7406\u8fd9\u79cd\u53d8\u5316\u7684\u53ef\u80fd\u6027\uff01 \u4ee3\u7801 \u00b6 #include<iostream> #include<memory> using namespace std; class Strategy { public: virtual void AlgorithmInterface() {}; }; class ConcreteStrategyA :public Strategy { public: virtual void AlgorithmInterface() override { cout << \"\u7b97\u6cd5A\u7684\u5b9e\u73b0\" << endl; } }; class ConcreteStrategyB :public Strategy { public: virtual void AlgorithmInterface() override { cout << \"\u7b97\u6cd5B\u7684\u5b9e\u73b0\" << endl; } }; class ConcreteStrategyC :public Strategy { public: virtual void AlgorithmInterface() override { cout << \"\u7b97\u6cd5C\u7684\u5b9e\u73b0\" << endl; } }; class Context { public: Context(const shared_ptr<Strategy> &tmp) { strategy = tmp; } void ContextInterface() { strategy->AlgorithmInterface(); } private: shared_ptr<Strategy> strategy; }; int main() { Context *context; context = new Context(shared_ptr<ConcreteStrategyA> (new ConcreteStrategyA())); context->ContextInterface(); delete context; context = new Context(shared_ptr<ConcreteStrategyB>(new ConcreteStrategyB())); context->ContextInterface(); delete context; context = new Context(shared_ptr<ConcreteStrategyC>(new ConcreteStrategyC())); context->ContextInterface(); delete context; return 0; }","title":"1-\u7b56\u7565\u6a21\u5f0f"},{"location":"DesignPattern/1-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u7b56\u7565\u6a21\u5f0f"},{"location":"DesignPattern/1-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/#_2","text":"\u200b \u5b83\u5b9a\u4e49\u4e86\u7b97\u6cd5\u5bb6\u65cf\uff0c\u5206\u522b\u5c01\u88c5\u8d77\u6765\uff0c\u8ba9\u5b83\u4eec\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u66ff\u6362\uff0c\u6b64\u6a21\u5f0f\u8ba9\u7b97\u6cd5\u7684\u53d8\u5316\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5230\u4f7f\u7528\u7b97\u6cd5\u7684\u5ba2\u6237\u3002","title":"\u5b9a\u4e49\uff1a"},{"location":"DesignPattern/1-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/#_3","text":"\u200b \u200b \u7b56\u7565\u6a21\u5f0f\u5c31\u662f\u7528\u6765\u5c01\u88c5\u7b97\u6cd5\u7684\uff0c\u4f46\u5728\u5b9e\u8df5\u4e2d\uff0c\u53ef\u4ee5\u7528\u5b83\u5c01\u88c5\u51e0\u4e4e\u4efb\u4f55\u7c7b\u578b\u7684\u89c4\u5219\uff0c\u53ea\u8981\u5728\u5206\u6790\u8fc7\u7a0b\u4e2d\u542c\u5230\u9700\u8981\u5728\u4e0d\u540c\u65f6\u95f4\u5e94\u7528\u4e0d\u540c\u7684\u4e1a\u52a1\u89c4\u5219\uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u9002\u7528\u7b56\u7565\u6a21\u5f0f\u5904\u7406\u8fd9\u79cd\u53d8\u5316\u7684\u53ef\u80fd\u6027\uff01","title":"\u9002\u7528\u573a\u666f\uff1a"},{"location":"DesignPattern/1-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/#_4","text":"#include<iostream> #include<memory> using namespace std; class Strategy { public: virtual void AlgorithmInterface() {}; }; class ConcreteStrategyA :public Strategy { public: virtual void AlgorithmInterface() override { cout << \"\u7b97\u6cd5A\u7684\u5b9e\u73b0\" << endl; } }; class ConcreteStrategyB :public Strategy { public: virtual void AlgorithmInterface() override { cout << \"\u7b97\u6cd5B\u7684\u5b9e\u73b0\" << endl; } }; class ConcreteStrategyC :public Strategy { public: virtual void AlgorithmInterface() override { cout << \"\u7b97\u6cd5C\u7684\u5b9e\u73b0\" << endl; } }; class Context { public: Context(const shared_ptr<Strategy> &tmp) { strategy = tmp; } void ContextInterface() { strategy->AlgorithmInterface(); } private: shared_ptr<Strategy> strategy; }; int main() { Context *context; context = new Context(shared_ptr<ConcreteStrategyA> (new ConcreteStrategyA())); context->ContextInterface(); delete context; context = new Context(shared_ptr<ConcreteStrategyB>(new ConcreteStrategyB())); context->ContextInterface(); delete context; context = new Context(shared_ptr<ConcreteStrategyC>(new ConcreteStrategyC())); context->ContextInterface(); delete context; return 0; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/10-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/","text":"\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u63d0\u4f9b\u4e00\u4e2a\u521b\u5efa\u4e00\u7cfb\u5217\u76f8\u5173\u6216\u76f8\u4e92\u4f9d\u8d56\u5bf9\u8c61\u7684\u63a5\u53e3\uff0c\u800c\u65e0\u9700\u5236\u5b9a\u5b83\u4eec\u5177\u4f53\u7684\u7c7b \u4f18\u7f3a\u70b9 \u00b6 \u4f18\u70b9\uff1a 1\uff09 \u6613\u4e8e\u4ea4\u6362\u4ea7\u54c1\u7cfb\u5217\uff0c\u7531\u4e8e\u5177\u4f53\u5de5\u5382\u7c7b\uff0c\u5728\u4e00\u4e2a\u5e94\u7528\u4e2d\u53ea\u9700\u8981\u518d\u521d\u59cb\u5316\u7684\u65f6\u5019\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd9\u5c31\u4f7f\u5f97\u6539\u53d8\u4e00\u4e2a\u5e94\u7528\u7684\u5177\u4f53\u5de5\u5382\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\uff0c\u5b83\u53ea\u9700\u8981\u6539\u53d8\u5177\u4f53\u5de5\u5382\u5373\u53ef\u4f7f\u7528\u4e0d\u540c\u7684\u4ea7\u54c1\u914d\u7f6e 2\uff09\u5b83\u8ba9\u5177\u4f53\u7684\u521b\u5efa\u5b9e\u4f8b\u8fc7\u7a0b\u4e0e\u5ba2\u6237\u7aef\u5206\u79bb\uff0c\u5ba2\u6237\u7aef\u662f\u901a\u8fc7\u5b83\u4eec\u7684 \u62bd\u8c61\u63a5\u53e3\u64cd\u7eb5\u5b9e\u4f8b\uff0c\u4ea7\u54c1\u7684\u5177\u4f53\u7c7b\u540d\u4e5f\u88ab\u5177\u4f53\u5de5\u5382\u7684\u5b9e\u73b0\u5206\u79bb\uff0c\u4e0d\u4f1a\u5728\u5ba2\u6237\u4ee3\u7801\u4e2d \u7f3a\u70b9\uff1a \u4e0d\u6613\u6269\u5c55\uff0c\u6dfb\u52a0\u9700\u6c42\u65f6\uff0c\u9700\u8981\u5927\u6279\u91cf\u7684\u6539\u52a8\u3002","title":"10-\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f"},{"location":"DesignPattern/10-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f"},{"location":"DesignPattern/10-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/#_2","text":"\u63d0\u4f9b\u4e00\u4e2a\u521b\u5efa\u4e00\u7cfb\u5217\u76f8\u5173\u6216\u76f8\u4e92\u4f9d\u8d56\u5bf9\u8c61\u7684\u63a5\u53e3\uff0c\u800c\u65e0\u9700\u5236\u5b9a\u5b83\u4eec\u5177\u4f53\u7684\u7c7b","title":"\u5b9a\u4e49"},{"location":"DesignPattern/10-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/#_3","text":"\u4f18\u70b9\uff1a 1\uff09 \u6613\u4e8e\u4ea4\u6362\u4ea7\u54c1\u7cfb\u5217\uff0c\u7531\u4e8e\u5177\u4f53\u5de5\u5382\u7c7b\uff0c\u5728\u4e00\u4e2a\u5e94\u7528\u4e2d\u53ea\u9700\u8981\u518d\u521d\u59cb\u5316\u7684\u65f6\u5019\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd9\u5c31\u4f7f\u5f97\u6539\u53d8\u4e00\u4e2a\u5e94\u7528\u7684\u5177\u4f53\u5de5\u5382\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\uff0c\u5b83\u53ea\u9700\u8981\u6539\u53d8\u5177\u4f53\u5de5\u5382\u5373\u53ef\u4f7f\u7528\u4e0d\u540c\u7684\u4ea7\u54c1\u914d\u7f6e 2\uff09\u5b83\u8ba9\u5177\u4f53\u7684\u521b\u5efa\u5b9e\u4f8b\u8fc7\u7a0b\u4e0e\u5ba2\u6237\u7aef\u5206\u79bb\uff0c\u5ba2\u6237\u7aef\u662f\u901a\u8fc7\u5b83\u4eec\u7684 \u62bd\u8c61\u63a5\u53e3\u64cd\u7eb5\u5b9e\u4f8b\uff0c\u4ea7\u54c1\u7684\u5177\u4f53\u7c7b\u540d\u4e5f\u88ab\u5177\u4f53\u5de5\u5382\u7684\u5b9e\u73b0\u5206\u79bb\uff0c\u4e0d\u4f1a\u5728\u5ba2\u6237\u4ee3\u7801\u4e2d \u7f3a\u70b9\uff1a \u4e0d\u6613\u6269\u5c55\uff0c\u6dfb\u52a0\u9700\u6c42\u65f6\uff0c\u9700\u8981\u5927\u6279\u91cf\u7684\u6539\u52a8\u3002","title":"\u4f18\u7f3a\u70b9"},{"location":"DesignPattern/11-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/","text":"\u72b6\u6001\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u5f53\u4e00\u4e2a\u5bf9\u8c61\u7684\u5185\u5728\u72b6\u6001\u6539\u53d8\u65f6\u5141\u8bb8\u6539\u53d8\u5176\u884c\u4e3a\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u770b\u8d77\u6765\u50cf\u662f\u6539\u53d8\u4e86\u5176\u7c7b \u4f18\u70b9 \u00b6 \u5c06\u7279\u5b9a\u7684\u72b6\u6001\u76f8\u5173\u884c\u4e3a\u90fd\u653e\u5165\u4e00\u4e2a\u5bf9\u8c61\u4e2d\uff0c\u7531\u4e8e\u6240\u6709\u4e0e\u72b6\u6001\u76f8\u5173\u7684\u4ee3\u7801\u90fd\u5b58\u5728\u4e8e\u67d0\u4e2aConcreteState\u4e2d\uff0c\u6240\u6709\u901a\u8fc7\u5b9a\u4e49\u65b0\u7684\u5b50\u7c7b\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u589e\u52a0\u65b0\u7684\u72b6\u6001\u548c\u8f6c\u6362\u3002 \u9002\u5e94\u573a\u666f \u00b6 \u5f53\u4e00\u4e2a\u5bf9\u8c61\u7684\u884c\u4e3a\u53d6\u51b3\u4e8e\u5b83\u7684\u72b6\u6001\u5e76\u4e14\u5b83\u5fc5\u987b\u65f6\u523b\u6839\u636e\u72b6\u6001\u6539\u53d8\u5b83\u7684\u884c\u4e3a\u65f6\uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u72b6\u6001\u6a21\u5f0f","title":"11-\u72b6\u6001\u6a21\u5f0f"},{"location":"DesignPattern/11-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u72b6\u6001\u6a21\u5f0f"},{"location":"DesignPattern/11-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/#_2","text":"\u5f53\u4e00\u4e2a\u5bf9\u8c61\u7684\u5185\u5728\u72b6\u6001\u6539\u53d8\u65f6\u5141\u8bb8\u6539\u53d8\u5176\u884c\u4e3a\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u770b\u8d77\u6765\u50cf\u662f\u6539\u53d8\u4e86\u5176\u7c7b","title":"\u5b9a\u4e49"},{"location":"DesignPattern/11-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/#_3","text":"\u5c06\u7279\u5b9a\u7684\u72b6\u6001\u76f8\u5173\u884c\u4e3a\u90fd\u653e\u5165\u4e00\u4e2a\u5bf9\u8c61\u4e2d\uff0c\u7531\u4e8e\u6240\u6709\u4e0e\u72b6\u6001\u76f8\u5173\u7684\u4ee3\u7801\u90fd\u5b58\u5728\u4e8e\u67d0\u4e2aConcreteState\u4e2d\uff0c\u6240\u6709\u901a\u8fc7\u5b9a\u4e49\u65b0\u7684\u5b50\u7c7b\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u589e\u52a0\u65b0\u7684\u72b6\u6001\u548c\u8f6c\u6362\u3002","title":"\u4f18\u70b9"},{"location":"DesignPattern/11-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/#_4","text":"\u5f53\u4e00\u4e2a\u5bf9\u8c61\u7684\u884c\u4e3a\u53d6\u51b3\u4e8e\u5b83\u7684\u72b6\u6001\u5e76\u4e14\u5b83\u5fc5\u987b\u65f6\u523b\u6839\u636e\u72b6\u6001\u6539\u53d8\u5b83\u7684\u884c\u4e3a\u65f6\uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u72b6\u6001\u6a21\u5f0f","title":"\u9002\u5e94\u573a\u666f"},{"location":"DesignPattern/12-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/","text":"\u9002\u914d\u5668\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u5c06\u4e00\u4e2a\u7c7b\u7684\u63a5\u53e3\u8f6c\u6362\u6210\u5ba2\u6237\u5e0c\u671b\u7684\u53e6\u5916\u4e00\u4e2a\u63a5\u53e3\u3002Adapter\u6a21\u5f0f\u4f7f\u5f97\u539f\u672c\u7531\u4e8e\u63a5\u53e3\u4e0d\u517c\u5bb9\u800c\u4e0d\u80fd\u4e00\u8d77\u5de5\u4f5c\u7684\u90a3\u4e9b\u7c7b\u53ef\u4ee5\u4e00\u8d77\u5de5\u4f5c\u3002 \u9002\u7528\u573a\u666f \u00b6 \u4f7f\u7528\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u7c7b\uff0c\u4f46\u5982\u679c\u5b83\u7684\u63a5\u53e3\uff0c\u4e5f\u5c31\u662f\u5b83\u7684\u65b9\u6cd5\u548c\u4f60\u7684\u8981\u6c42\u4e0d\u76f8\u540c\u65f6\uff0c\u5c31\u5e94\u8be5\u8003\u8651\u7528\u9002\u914d\u5668\u6a21\u5f0f \u4ee3\u7801 \u00b6 #include <iostream> using namespace std ; class Target { public : virtual void Request () { cout << \"\u666e\u901a\u8bf7\u6c42\" << endl ; } }; class Adaptee { public : void SpecificRequest () { cout << \"\u7279\u6b8a\u8bf7\u6c42\" << endl ; } }; class Adapter : public Target { private : Adaptee * adaptee ; public : Adapter () { adaptee = new Adaptee (); } ~ Adapter () { delete adaptee ; } void Request () override { adaptee -> SpecificRequest (); } }; int main () { Target * t = new Adapter (); t -> Request (); delete t ; return 0 ; }","title":"12-\u9002\u914d\u5668\u6a21\u5f0f"},{"location":"DesignPattern/12-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u9002\u914d\u5668\u6a21\u5f0f"},{"location":"DesignPattern/12-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/#_2","text":"\u5c06\u4e00\u4e2a\u7c7b\u7684\u63a5\u53e3\u8f6c\u6362\u6210\u5ba2\u6237\u5e0c\u671b\u7684\u53e6\u5916\u4e00\u4e2a\u63a5\u53e3\u3002Adapter\u6a21\u5f0f\u4f7f\u5f97\u539f\u672c\u7531\u4e8e\u63a5\u53e3\u4e0d\u517c\u5bb9\u800c\u4e0d\u80fd\u4e00\u8d77\u5de5\u4f5c\u7684\u90a3\u4e9b\u7c7b\u53ef\u4ee5\u4e00\u8d77\u5de5\u4f5c\u3002","title":"\u5b9a\u4e49"},{"location":"DesignPattern/12-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/#_3","text":"\u4f7f\u7528\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u7c7b\uff0c\u4f46\u5982\u679c\u5b83\u7684\u63a5\u53e3\uff0c\u4e5f\u5c31\u662f\u5b83\u7684\u65b9\u6cd5\u548c\u4f60\u7684\u8981\u6c42\u4e0d\u76f8\u540c\u65f6\uff0c\u5c31\u5e94\u8be5\u8003\u8651\u7528\u9002\u914d\u5668\u6a21\u5f0f","title":"\u9002\u7528\u573a\u666f"},{"location":"DesignPattern/12-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/#_4","text":"#include <iostream> using namespace std ; class Target { public : virtual void Request () { cout << \"\u666e\u901a\u8bf7\u6c42\" << endl ; } }; class Adaptee { public : void SpecificRequest () { cout << \"\u7279\u6b8a\u8bf7\u6c42\" << endl ; } }; class Adapter : public Target { private : Adaptee * adaptee ; public : Adapter () { adaptee = new Adaptee (); } ~ Adapter () { delete adaptee ; } void Request () override { adaptee -> SpecificRequest (); } }; int main () { Target * t = new Adapter (); t -> Request (); delete t ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/13-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/","text":"\u5907\u5fd8\u5f55\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u5728\u4e0d\u7834\u574f\u5c01\u88c5\u6027\u7684\u524d\u63d0\u4e0b\uff0c\u8865\u83b7\u4e00\u4e2a\u5bf9\u8c61\u7684\u5185\u90e8\u72b6\u6001\uff0c\u5e76\u5728\u8be5\u5bf9\u8c61\u4e4b\u5916\u4fdd\u5b58\u8fd9\u4e2a\u72b6\u6001\u3002\u8fd9\u6837\u4ee5\u540e\u5c31\u53ef\u5c06\u8be5\u5bf9\u8c61\u6062\u590d\u5230\u539f\u5148\u4fdd\u5b58\u7684\u72b6\u6001\u3002 \u4ee3\u7801 \u00b6 #include <iostream> #include <string> using namespace std ; class Memento { private : string state ; public : Memento ( string state ) : state ( state ) { } string getState () { return state ; } }; class Originator { private : string state ; public : void setState ( string state ) { this -> state = state ; } string getState () { return state ; } Memento * createMemento () { return new Memento ( state ); } void setMemento ( Memento * mem ) { state = mem -> getState (); } void show () { cout << \"state = \" << state << endl ; } }; class CareTaker { private : Memento * mem ; public : void setMemento ( Memento * val ) { mem = val ; } Memento * getMemento () { return mem ; } }; int main () { Originator * ori = new Originator (); ori -> setState ( \"On\" ); ori -> show (); CareTaker * c = new CareTaker (); c -> setMemento ( ori -> createMemento ()); ori -> setState ( \"off\" ); ori -> show (); ori -> setMemento ( c -> getMemento ()); ori -> show (); return 0 ; }","title":"13-\u5907\u5fd8\u5f55\u6a21\u5f0f"},{"location":"DesignPattern/13-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u5907\u5fd8\u5f55\u6a21\u5f0f"},{"location":"DesignPattern/13-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/#_2","text":"\u5728\u4e0d\u7834\u574f\u5c01\u88c5\u6027\u7684\u524d\u63d0\u4e0b\uff0c\u8865\u83b7\u4e00\u4e2a\u5bf9\u8c61\u7684\u5185\u90e8\u72b6\u6001\uff0c\u5e76\u5728\u8be5\u5bf9\u8c61\u4e4b\u5916\u4fdd\u5b58\u8fd9\u4e2a\u72b6\u6001\u3002\u8fd9\u6837\u4ee5\u540e\u5c31\u53ef\u5c06\u8be5\u5bf9\u8c61\u6062\u590d\u5230\u539f\u5148\u4fdd\u5b58\u7684\u72b6\u6001\u3002","title":"\u5b9a\u4e49"},{"location":"DesignPattern/13-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/#_3","text":"#include <iostream> #include <string> using namespace std ; class Memento { private : string state ; public : Memento ( string state ) : state ( state ) { } string getState () { return state ; } }; class Originator { private : string state ; public : void setState ( string state ) { this -> state = state ; } string getState () { return state ; } Memento * createMemento () { return new Memento ( state ); } void setMemento ( Memento * mem ) { state = mem -> getState (); } void show () { cout << \"state = \" << state << endl ; } }; class CareTaker { private : Memento * mem ; public : void setMemento ( Memento * val ) { mem = val ; } Memento * getMemento () { return mem ; } }; int main () { Originator * ori = new Originator (); ori -> setState ( \"On\" ); ori -> show (); CareTaker * c = new CareTaker (); c -> setMemento ( ori -> createMemento ()); ori -> setState ( \"off\" ); ori -> show (); ori -> setMemento ( c -> getMemento ()); ori -> show (); return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/14-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/","text":"\u7ec4\u5408\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u5c06\u5bf9\u8c61\u7ec4\u5408\u6210\u6811\u5f62\u7ed3\u6784\u4ee5\u8868\u793a \u2019 \u90e8\u5206-\u6574\u4f53 '\u7684\u5c42\u6b21\u7ed3\u6784\u3002\u7ec4\u5408\u6a21\u5f0f\u4f7f\u5f97\u7528\u6237\u5bf9\u5355\u4e2a\u5bf9\u8c61\u548c\u7ec4\u5408\u5bf9\u8c61\u7684\u4f7f\u7528\u5177\u6709\u4e00\u81f4\u6027\u3002 \u4f18\u7f3a\u70b9 \u00b6 \u900f\u660e\u65b9\u5f0f\uff1a \u200b \u5728Component\u4e2d\u58f0\u660e\u6240\u6709\u7528\u6765\u7ba1\u7406\u5b50\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u5176\u4e2d\u5305\u62ecadd\uff0cremove\u7b49\u3002\u8fd9\u6837\u5b9e\u73b0Component\u63a5\u53e3\u7684\u6240\u6709\u5b50\u7c7b\u90fd\u5177\u5907\u4e86\u76f8\u540c\u7684\u884c\u4e3a\u63a5\u53e3\uff0c\u597d\u5904\u662f\u53f6\u8282\u70b9\u548c\u679d\u8282\u70b9\u5bf9\u4e8e\u5916\u754c\u6ca1\u6709\u533a\u522b\uff0c\u7f3a\u70b9\u662f\u53f6\u5b50\u672c\u8eab\u4e0d\u5177\u5907\u67d0\u4e9b\u65b9\u6cd5\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u5b9e\u73b0\u5b83\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002 \u5b89\u5168\u65b9\u5f0f\uff1a \u200b \u5728Component\u4e2d\u4e0d\u58f0\u660e\u6240\u6709\u7528\u6765\u7ba1\u7406\u5b50\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u800c\u662f\u8f6c\u79fb\u5230Composite\u4e2d\u3002\u597d\u5904\u662f\u7701\u7565\u4e86Leaf\u7684\u5b9e\u73b0\u3002\u7f3a\u70b9\u662f\u7531\u4e8e\u4e0d\u591f\u900f\u660e\uff0c\u6240\u4ee5\u6811\u53f6\u548c\u6811\u679d\u7c7b\u5c06\u4e0d\u5177\u6709\u76f8\u540c\u7684\u63a5\u53e3\uff0c\u5ba2\u6237\u7aef\u7684\u8c03\u7528\u9700\u8981\u505a\u76f8\u5e94\u7684\u5224\u65ad\uff0c\u5e26\u4e86\u4e0d\u53d8\u3002 \u4f7f\u7528\u573a\u666f \u00b6 \u200b \u5728\u9700\u6c42\u4e2d\u662f\u4f53\u73b0\u90e8\u5206\u548c\u6574\u4f53\u5c42\u6b21\u7684\u7ed3\u6784\u65f6\uff0c\u4ee5\u53ca\u4f60\u5e0c\u671b\u7528\u6237\u53ef\u4ee5\u5ffd\u7565\u7ec4\u5408\u5bf9\u8c61\u4e0e\u5355\u4e2a\u5bf9\u8c61\u7684\u4e0d\u540c\uff0c\u7edf\u4e00\u5730\u4f7f\u7528\u7ec4\u5408\u7ed3\u6784\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u65f6\uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u7ec4\u5408\u6a21\u5f0f\u3002 \u4ee3\u7801 \u00b6 #include <iostream> #include <string> #include <list> using namespace std ; class Component { protected : string name ; public : Component ( string value ) { name = value ; } virtual ~ Component (){} virtual void add ( Component * c ) {} virtual void remove ( Component * c ) {} virtual void display ( int depth ){} }; class Leaf : public Component { public : Leaf ( string value ) : Component ( value ){} void add ( Component * c ) override { cout << \"Cannot add to a leaf\" << endl ; } void remove ( Component * c ) override { cout << \"Cannot remove from a leaf\" << endl ; } void display ( int depth ) { cout << string ( depth , '-' ) << \" \" << name << endl ; } }; class Composite : public Component { public : Composite ( string value ) : Component ( value ) {} ~ Composite () { while ( ! children . empty ()) { Component * c = children . back (); children . pop_back (); delete c ; } } void add ( Component * c ) override { children . push_back ( c ); } void remove ( Component * c ) override { children . remove ( c ); } void display ( int depth ) { cout << string ( depth , '-' ) << \" \" << name << endl ; for ( auto child : children ) { child -> display ( depth + 2 ); } } private : list < Component *> children ; }; int main () { Composite * root = new Composite ( \"root\" ); root -> add ( new Leaf ( \"Leaf A\" )); root -> add ( new Leaf ( \"Leaf B\" )); Composite * comp = new Composite ( \"Composite X\" ); comp -> add ( new Leaf ( \"Leaf XA\" )); comp -> add ( new Leaf ( \"Leaf XB\" )); root -> add ( comp ); Composite * comp2 = new Composite ( \"Composite XY\" ); comp2 -> add ( new Leaf ( \"Leaf XYA\" )); comp2 -> add ( new Leaf ( \"Leaf XYB\" )); comp -> add ( comp2 ); root -> add ( new Leaf ( \"Leaf C\" )); Leaf * f = new Leaf ( \"Leaf D\" ); root -> add ( f ); root -> remove ( f ); root -> display ( 1 ); return 0 ; }","title":"14-\u7ec4\u5408\u6a21\u5f0f"},{"location":"DesignPattern/14-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u7ec4\u5408\u6a21\u5f0f"},{"location":"DesignPattern/14-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/#_2","text":"\u5c06\u5bf9\u8c61\u7ec4\u5408\u6210\u6811\u5f62\u7ed3\u6784\u4ee5\u8868\u793a \u2019 \u90e8\u5206-\u6574\u4f53 '\u7684\u5c42\u6b21\u7ed3\u6784\u3002\u7ec4\u5408\u6a21\u5f0f\u4f7f\u5f97\u7528\u6237\u5bf9\u5355\u4e2a\u5bf9\u8c61\u548c\u7ec4\u5408\u5bf9\u8c61\u7684\u4f7f\u7528\u5177\u6709\u4e00\u81f4\u6027\u3002","title":"\u5b9a\u4e49"},{"location":"DesignPattern/14-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/#_3","text":"\u900f\u660e\u65b9\u5f0f\uff1a \u200b \u5728Component\u4e2d\u58f0\u660e\u6240\u6709\u7528\u6765\u7ba1\u7406\u5b50\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u5176\u4e2d\u5305\u62ecadd\uff0cremove\u7b49\u3002\u8fd9\u6837\u5b9e\u73b0Component\u63a5\u53e3\u7684\u6240\u6709\u5b50\u7c7b\u90fd\u5177\u5907\u4e86\u76f8\u540c\u7684\u884c\u4e3a\u63a5\u53e3\uff0c\u597d\u5904\u662f\u53f6\u8282\u70b9\u548c\u679d\u8282\u70b9\u5bf9\u4e8e\u5916\u754c\u6ca1\u6709\u533a\u522b\uff0c\u7f3a\u70b9\u662f\u53f6\u5b50\u672c\u8eab\u4e0d\u5177\u5907\u67d0\u4e9b\u65b9\u6cd5\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u5b9e\u73b0\u5b83\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002 \u5b89\u5168\u65b9\u5f0f\uff1a \u200b \u5728Component\u4e2d\u4e0d\u58f0\u660e\u6240\u6709\u7528\u6765\u7ba1\u7406\u5b50\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u800c\u662f\u8f6c\u79fb\u5230Composite\u4e2d\u3002\u597d\u5904\u662f\u7701\u7565\u4e86Leaf\u7684\u5b9e\u73b0\u3002\u7f3a\u70b9\u662f\u7531\u4e8e\u4e0d\u591f\u900f\u660e\uff0c\u6240\u4ee5\u6811\u53f6\u548c\u6811\u679d\u7c7b\u5c06\u4e0d\u5177\u6709\u76f8\u540c\u7684\u63a5\u53e3\uff0c\u5ba2\u6237\u7aef\u7684\u8c03\u7528\u9700\u8981\u505a\u76f8\u5e94\u7684\u5224\u65ad\uff0c\u5e26\u4e86\u4e0d\u53d8\u3002","title":"\u4f18\u7f3a\u70b9"},{"location":"DesignPattern/14-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/#_4","text":"\u200b \u5728\u9700\u6c42\u4e2d\u662f\u4f53\u73b0\u90e8\u5206\u548c\u6574\u4f53\u5c42\u6b21\u7684\u7ed3\u6784\u65f6\uff0c\u4ee5\u53ca\u4f60\u5e0c\u671b\u7528\u6237\u53ef\u4ee5\u5ffd\u7565\u7ec4\u5408\u5bf9\u8c61\u4e0e\u5355\u4e2a\u5bf9\u8c61\u7684\u4e0d\u540c\uff0c\u7edf\u4e00\u5730\u4f7f\u7528\u7ec4\u5408\u7ed3\u6784\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u65f6\uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u7ec4\u5408\u6a21\u5f0f\u3002","title":"\u4f7f\u7528\u573a\u666f"},{"location":"DesignPattern/14-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/#_5","text":"#include <iostream> #include <string> #include <list> using namespace std ; class Component { protected : string name ; public : Component ( string value ) { name = value ; } virtual ~ Component (){} virtual void add ( Component * c ) {} virtual void remove ( Component * c ) {} virtual void display ( int depth ){} }; class Leaf : public Component { public : Leaf ( string value ) : Component ( value ){} void add ( Component * c ) override { cout << \"Cannot add to a leaf\" << endl ; } void remove ( Component * c ) override { cout << \"Cannot remove from a leaf\" << endl ; } void display ( int depth ) { cout << string ( depth , '-' ) << \" \" << name << endl ; } }; class Composite : public Component { public : Composite ( string value ) : Component ( value ) {} ~ Composite () { while ( ! children . empty ()) { Component * c = children . back (); children . pop_back (); delete c ; } } void add ( Component * c ) override { children . push_back ( c ); } void remove ( Component * c ) override { children . remove ( c ); } void display ( int depth ) { cout << string ( depth , '-' ) << \" \" << name << endl ; for ( auto child : children ) { child -> display ( depth + 2 ); } } private : list < Component *> children ; }; int main () { Composite * root = new Composite ( \"root\" ); root -> add ( new Leaf ( \"Leaf A\" )); root -> add ( new Leaf ( \"Leaf B\" )); Composite * comp = new Composite ( \"Composite X\" ); comp -> add ( new Leaf ( \"Leaf XA\" )); comp -> add ( new Leaf ( \"Leaf XB\" )); root -> add ( comp ); Composite * comp2 = new Composite ( \"Composite XY\" ); comp2 -> add ( new Leaf ( \"Leaf XYA\" )); comp2 -> add ( new Leaf ( \"Leaf XYB\" )); comp -> add ( comp2 ); root -> add ( new Leaf ( \"Leaf C\" )); Leaf * f = new Leaf ( \"Leaf D\" ); root -> add ( f ); root -> remove ( f ); root -> display ( 1 ); return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/15-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/","text":"\u8fed\u4ee3\u5668\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u63d0\u4f9b\u4e00\u79cd\u65b9\u6cd5\u987a\u5e8f\u8bbf\u95ee\u4e00\u4e2a\u805a\u5408\u5bf9\u8c61\u4e2d\u7684\u5404\u4e2a\u5143\u7d20\uff0c\u800c\u53c8\u4e0d\u66b4\u9732\u8be5\u5bf9\u8c61\u7684\u5185\u90e8\u8868\u793a \u6211\u89c9\u5f97C++ \u7684\u8fed\u4ee3\u5668\u66f4\u4f18\u79c0 \u5c31\u4e0d\u5199\u4e86","title":"15-\u8fed\u4ee3\u5668\u6a21\u5f0f"},{"location":"DesignPattern/15-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u8fed\u4ee3\u5668\u6a21\u5f0f"},{"location":"DesignPattern/15-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/#_2","text":"\u63d0\u4f9b\u4e00\u79cd\u65b9\u6cd5\u987a\u5e8f\u8bbf\u95ee\u4e00\u4e2a\u805a\u5408\u5bf9\u8c61\u4e2d\u7684\u5404\u4e2a\u5143\u7d20\uff0c\u800c\u53c8\u4e0d\u66b4\u9732\u8be5\u5bf9\u8c61\u7684\u5185\u90e8\u8868\u793a \u6211\u89c9\u5f97C++ \u7684\u8fed\u4ee3\u5668\u66f4\u4f18\u79c0 \u5c31\u4e0d\u5199\u4e86","title":"\u5b9a\u4e49"},{"location":"DesignPattern/16-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/","text":"\u5355\u4f8b\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u4fdd\u8bc1\u4e00\u4e2a\u7c7b\u4ec5\u6709\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u63d0\u4f9b\u4e00\u4e2a\u8bbf\u95ee\u5b83\u7684\u5168\u5c40\u8bbf\u95ee\u70b9 \u5b9e\u73b0\u6b65\u9aa4\uff1a 1\uff09\u6784\u9020\u51fd\u6570\u79c1\u6709\u5316 2\uff09\u63d0\u4f9b\u4e00\u4e2a\u5168\u5c40\u7684\u9759\u6001\u65b9\u6cd5\uff08\u5168\u5c40\u8bbf\u95ee\u70b9\uff09 3\uff09\u5728\u7c7b\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u9759\u6001\u6307\u9488\uff0c\u6307\u5411\u672c\u7c7b\u7684\u53d8\u91cf\u7684\u9759\u6001\u53d8\u91cf\u6307\u9488 \u61d2\u6c49\u5f0f \u00b6 #include <iostream> using namespace std ; #define NULL 0 // \u5355\u4f8b\u6a21\u5f0f---\u61d2\u6c49\u5f0f class singelTon { private : singelTon () { cout << \"\u6784\u9020\u51fd\u6570\" << endl ; } static singelTon * sgl_ptr ; public : static singelTon * get_instance (){ if ( sgl_ptr == NULL ) { sgl_ptr = new singelTon (); } return sgl_ptr ; } static void free_instance () { delete sgl_ptr ; sgl_ptr = NULL ; cout << \"\u5bf9\u8c61\u91ca\u653e\u6210\u529f\uff01\" << endl ; } }; singelTon * singelTon :: sgl_ptr = NULL ; void main () { singelTon * ptr1 = singelTon :: get_instance (); singelTon * ptr2 = singelTon :: get_instance (); if ( ptr1 == ptr2 ) { cout << \"\u540c\u4e00\u4e2a\u5bf9\u8c61\uff01\" << endl ; } else { cout << \"\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff01\" << endl ; } singelTon :: free_instance (); system ( \"pause\" ); } \u997f\u6c49\u5f0f \u00b6 #include <iostream> using namespace std ; #define NULL 0 // \u5355\u4f8b\u6a21\u5f0f---\u997f\u6c49\u5f0f class singelTon { private : singelTon () { cout << \"\u6784\u9020\u51fd\u6570\" << endl ; } static singelTon * sgl_ptr ; public : static singelTon * get_instance (){ return sgl_ptr ; } static void free_instance () { delete sgl_ptr ; sgl_ptr = NULL ; cout << \"\u5bf9\u8c61\u91ca\u653e\u6210\u529f\uff01\" << endl ; } }; singelTon * singelTon :: sgl_ptr = new singelTon (); void main () { singelTon * ptr1 = singelTon :: get_instance (); singelTon * ptr2 = singelTon :: get_instance (); if ( ptr1 == ptr2 ) { cout << \"\u540c\u4e00\u4e2a\u5bf9\u8c61\uff01\" << endl ; } else { cout << \"\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff01\" << endl ; } singelTon :: free_instance (); system ( \"pause\" ); } \u61d2\u6c49\u5f0f-\u591a\u7ebf\u7a0b\u4e0d\u540c\u6b65\u7684\u95ee\u9898\uff1a\u8fd0\u7528\u4e8c\u6b21\u68c0\u67e5+\u4e34\u754c\u533a\u4e0a\u9501 \u00b6 static CCriticalsection cs ; //\u4e34\u754c\u533a class singelTon { private : singelTon () { cout << \"\u6784\u9020\u51fd\u6570\" << endl ; } static singelTon * sgl_ptr ; public : static singelTon * get_instance () { if ( sgl_ptr == NULL ) { cs . Lock (); if ( sgl_ptr == NULL ) { sgl_ptr = new singelTon (); } cs . Unlock (); } return sgl_ptr ; } static void free_instance () { delete sgl_ptr ; sgl_ptr = NULL ; cout << \"\u5bf9\u8c61\u91ca\u653e\u6210\u529f\uff01\" << endl ; } }; singelTon * singelTon :: sgl_ptr = NULL ;","title":"16-\u5355\u4f8b\u6a21\u5f0f"},{"location":"DesignPattern/16-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u5355\u4f8b\u6a21\u5f0f"},{"location":"DesignPattern/16-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/#_2","text":"\u4fdd\u8bc1\u4e00\u4e2a\u7c7b\u4ec5\u6709\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u63d0\u4f9b\u4e00\u4e2a\u8bbf\u95ee\u5b83\u7684\u5168\u5c40\u8bbf\u95ee\u70b9 \u5b9e\u73b0\u6b65\u9aa4\uff1a 1\uff09\u6784\u9020\u51fd\u6570\u79c1\u6709\u5316 2\uff09\u63d0\u4f9b\u4e00\u4e2a\u5168\u5c40\u7684\u9759\u6001\u65b9\u6cd5\uff08\u5168\u5c40\u8bbf\u95ee\u70b9\uff09 3\uff09\u5728\u7c7b\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u9759\u6001\u6307\u9488\uff0c\u6307\u5411\u672c\u7c7b\u7684\u53d8\u91cf\u7684\u9759\u6001\u53d8\u91cf\u6307\u9488","title":"\u5b9a\u4e49"},{"location":"DesignPattern/16-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/#_3","text":"#include <iostream> using namespace std ; #define NULL 0 // \u5355\u4f8b\u6a21\u5f0f---\u61d2\u6c49\u5f0f class singelTon { private : singelTon () { cout << \"\u6784\u9020\u51fd\u6570\" << endl ; } static singelTon * sgl_ptr ; public : static singelTon * get_instance (){ if ( sgl_ptr == NULL ) { sgl_ptr = new singelTon (); } return sgl_ptr ; } static void free_instance () { delete sgl_ptr ; sgl_ptr = NULL ; cout << \"\u5bf9\u8c61\u91ca\u653e\u6210\u529f\uff01\" << endl ; } }; singelTon * singelTon :: sgl_ptr = NULL ; void main () { singelTon * ptr1 = singelTon :: get_instance (); singelTon * ptr2 = singelTon :: get_instance (); if ( ptr1 == ptr2 ) { cout << \"\u540c\u4e00\u4e2a\u5bf9\u8c61\uff01\" << endl ; } else { cout << \"\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff01\" << endl ; } singelTon :: free_instance (); system ( \"pause\" ); }","title":"\u61d2\u6c49\u5f0f"},{"location":"DesignPattern/16-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/#_4","text":"#include <iostream> using namespace std ; #define NULL 0 // \u5355\u4f8b\u6a21\u5f0f---\u997f\u6c49\u5f0f class singelTon { private : singelTon () { cout << \"\u6784\u9020\u51fd\u6570\" << endl ; } static singelTon * sgl_ptr ; public : static singelTon * get_instance (){ return sgl_ptr ; } static void free_instance () { delete sgl_ptr ; sgl_ptr = NULL ; cout << \"\u5bf9\u8c61\u91ca\u653e\u6210\u529f\uff01\" << endl ; } }; singelTon * singelTon :: sgl_ptr = new singelTon (); void main () { singelTon * ptr1 = singelTon :: get_instance (); singelTon * ptr2 = singelTon :: get_instance (); if ( ptr1 == ptr2 ) { cout << \"\u540c\u4e00\u4e2a\u5bf9\u8c61\uff01\" << endl ; } else { cout << \"\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff01\" << endl ; } singelTon :: free_instance (); system ( \"pause\" ); }","title":"\u997f\u6c49\u5f0f"},{"location":"DesignPattern/16-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/#-","text":"static CCriticalsection cs ; //\u4e34\u754c\u533a class singelTon { private : singelTon () { cout << \"\u6784\u9020\u51fd\u6570\" << endl ; } static singelTon * sgl_ptr ; public : static singelTon * get_instance () { if ( sgl_ptr == NULL ) { cs . Lock (); if ( sgl_ptr == NULL ) { sgl_ptr = new singelTon (); } cs . Unlock (); } return sgl_ptr ; } static void free_instance () { delete sgl_ptr ; sgl_ptr = NULL ; cout << \"\u5bf9\u8c61\u91ca\u653e\u6210\u529f\uff01\" << endl ; } }; singelTon * singelTon :: sgl_ptr = NULL ;","title":"\u61d2\u6c49\u5f0f-\u591a\u7ebf\u7a0b\u4e0d\u540c\u6b65\u7684\u95ee\u9898\uff1a\u8fd0\u7528\u4e8c\u6b21\u68c0\u67e5+\u4e34\u754c\u533a\u4e0a\u9501"},{"location":"DesignPattern/17-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/","text":"\u6865\u63a5\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u5c06\u62bd\u8c61\u90e8\u5206\u4e0e\u5b83\u7684\u5b9e\u73b0\u90e8\u5206\u5206\u79bb\uff0c\u4f7f\u5b83\u4eec\u90fd\u53ef\u4ee5\u72ec\u7acb\u5730\u53d8\u5316 \u4ee3\u7801 \u00b6 #include <iostream> using namespace std ; class Implementor { public : virtual void Operation () = 0 ; }; class ConcreteImplementorA : public Implementor { public : void Operation () override { cout << \"\u5177\u4f53\u5b9e\u73b0A\u7684\u65b9\u6cd5\u6267\u884c\" << endl ; } }; class ConcreteImplementorB : public Implementor { public : void Operation () override { cout << \"\u5177\u4f53\u5b9e\u73b0B\u7684\u65b9\u6cd5\u6267\u884c\" << endl ; } }; class Abstraction { public : virtual ~ Abstraction () { if ( imp ) delete imp ; } void setImplementor ( Implementor * tmp ) { if ( imp ) delete imp ; imp = tmp ; } virtual void Operation () { imp -> Operation (); } protected : Implementor * imp ; }; class RefinedAbstraction : public Abstraction { public : void Operation () override { imp -> Operation (); } }; int main () { Abstraction * abs = new RefinedAbstraction (); abs -> setImplementor ( new ConcreteImplementorA ()); abs -> Operation (); abs -> setImplementor ( new ConcreteImplementorB ()); abs -> Operation (); return 0 ; }","title":"17-\u6865\u63a5\u6a21\u5f0f"},{"location":"DesignPattern/17-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u6865\u63a5\u6a21\u5f0f"},{"location":"DesignPattern/17-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/#_2","text":"\u5c06\u62bd\u8c61\u90e8\u5206\u4e0e\u5b83\u7684\u5b9e\u73b0\u90e8\u5206\u5206\u79bb\uff0c\u4f7f\u5b83\u4eec\u90fd\u53ef\u4ee5\u72ec\u7acb\u5730\u53d8\u5316","title":"\u5b9a\u4e49"},{"location":"DesignPattern/17-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/#_3","text":"#include <iostream> using namespace std ; class Implementor { public : virtual void Operation () = 0 ; }; class ConcreteImplementorA : public Implementor { public : void Operation () override { cout << \"\u5177\u4f53\u5b9e\u73b0A\u7684\u65b9\u6cd5\u6267\u884c\" << endl ; } }; class ConcreteImplementorB : public Implementor { public : void Operation () override { cout << \"\u5177\u4f53\u5b9e\u73b0B\u7684\u65b9\u6cd5\u6267\u884c\" << endl ; } }; class Abstraction { public : virtual ~ Abstraction () { if ( imp ) delete imp ; } void setImplementor ( Implementor * tmp ) { if ( imp ) delete imp ; imp = tmp ; } virtual void Operation () { imp -> Operation (); } protected : Implementor * imp ; }; class RefinedAbstraction : public Abstraction { public : void Operation () override { imp -> Operation (); } }; int main () { Abstraction * abs = new RefinedAbstraction (); abs -> setImplementor ( new ConcreteImplementorA ()); abs -> Operation (); abs -> setImplementor ( new ConcreteImplementorB ()); abs -> Operation (); return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/18-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/","text":"\u547d\u4ee4\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u5c06\u4e00\u4e2a\u8bf7\u6c42\u5c01\u88c5\u4e3a\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4ece\u800c\u4f7f\u4f60\u53ef\u7528\u4e0d\u540c\u7684\u8bf7\u6c42\u5bf9\u5ba2\u6237\u8fdb\u884c\u53c2\u6570\u5316\uff1b\u5bf9\u8bf7\u6c42\u6392\u961f\u6216\u8005\u8bb0\u5f55\u8bf7\u6c42\u65e5\u5fd7\uff0c\u4ee5\u53ca\u652f\u6301\u53ef\u64a4\u9500\u7684\u64cd\u4f5c\u3002 \u4f18\u70b9 \u00b6 \u4e00\uff09\u5bb9\u6613\u8bbe\u8ba1\u4e00\u4e2a\u547d\u4ee4\u961f\u5217 \u4e8c\uff09\u5bb9\u6613\u5c06\u547d\u4ee4\u8bb0\u5165\u65e5\u5fd7 \u4e09\uff09\u5141\u8bb8\u63a5\u53d7\u8bf7\u6c42\u7684\u4e00\u65b9\u51b3\u5b9a\u662f\u5426\u8981\u5426\u51b3\u8bf7\u6c42 \u56db\uff09\u5bb9\u6613\u5b9e\u73b0\u5bf9\u8bf7\u6c42\u7684\u64a4\u9500\u548c\u91cd\u505a \u4e94\uff09\u7531\u4e8e\u52a0\u7d27\u65b0\u7684\u5177\u4f53\u547d\u4ee4\u7c7b\u4e0d\u5f71\u54cd\u5176\u4ed6\u7c7b\uff0c\u56e0\u6b64\u589e\u52a0\u65b0\u7684\u5177\u4f53\u547d\u4ee4\u7c7b\u5f88\u5bb9\u6613 \u516d\uff09\u628a\u8bf7\u6c42\u4e00\u4e2a\u64cd\u4f5c\u7684\u5bf9\u8c61\u4e0e\u77e5\u9053\u600e\u4e48\u6267\u884c\u4e00\u4e2a\u64cd\u4f5c\u7684\u5bf9\u8c61\u5206\u5272\u5f00 \u4ee3\u7801 \u00b6 #include <iostream> using namespace std ; class Receiver { public : void action () { cout << \"\u6267\u884c\u8bf7\u6c42\" << endl ; } }; class Command { protected : Receiver * receiver ; public : Command ( Receiver * tmp ) : receiver ( tmp ){} virtual void execute () {}; }; class ConcreteCommand : public Command { public : ConcreteCommand ( Receiver * tmp ) : Command ( tmp ){} void execute () override { receiver -> action (); } }; class Invoker { private : Command * command ; public : void setCommand ( Command * tmp ) { command = tmp ; } void executeCommand () { command -> execute (); } }; int main () { Receiver * r = new Receiver (); Command * c = new ConcreteCommand ( r ); Invoker * i = new Invoker (); i -> setCommand ( c ); i -> executeCommand (); delete i ; delete c ; delete r ; return 0 ; }","title":"18-\u547d\u4ee4\u6a21\u5f0f"},{"location":"DesignPattern/18-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u547d\u4ee4\u6a21\u5f0f"},{"location":"DesignPattern/18-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/#_2","text":"\u5c06\u4e00\u4e2a\u8bf7\u6c42\u5c01\u88c5\u4e3a\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4ece\u800c\u4f7f\u4f60\u53ef\u7528\u4e0d\u540c\u7684\u8bf7\u6c42\u5bf9\u5ba2\u6237\u8fdb\u884c\u53c2\u6570\u5316\uff1b\u5bf9\u8bf7\u6c42\u6392\u961f\u6216\u8005\u8bb0\u5f55\u8bf7\u6c42\u65e5\u5fd7\uff0c\u4ee5\u53ca\u652f\u6301\u53ef\u64a4\u9500\u7684\u64cd\u4f5c\u3002","title":"\u5b9a\u4e49"},{"location":"DesignPattern/18-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/#_3","text":"\u4e00\uff09\u5bb9\u6613\u8bbe\u8ba1\u4e00\u4e2a\u547d\u4ee4\u961f\u5217 \u4e8c\uff09\u5bb9\u6613\u5c06\u547d\u4ee4\u8bb0\u5165\u65e5\u5fd7 \u4e09\uff09\u5141\u8bb8\u63a5\u53d7\u8bf7\u6c42\u7684\u4e00\u65b9\u51b3\u5b9a\u662f\u5426\u8981\u5426\u51b3\u8bf7\u6c42 \u56db\uff09\u5bb9\u6613\u5b9e\u73b0\u5bf9\u8bf7\u6c42\u7684\u64a4\u9500\u548c\u91cd\u505a \u4e94\uff09\u7531\u4e8e\u52a0\u7d27\u65b0\u7684\u5177\u4f53\u547d\u4ee4\u7c7b\u4e0d\u5f71\u54cd\u5176\u4ed6\u7c7b\uff0c\u56e0\u6b64\u589e\u52a0\u65b0\u7684\u5177\u4f53\u547d\u4ee4\u7c7b\u5f88\u5bb9\u6613 \u516d\uff09\u628a\u8bf7\u6c42\u4e00\u4e2a\u64cd\u4f5c\u7684\u5bf9\u8c61\u4e0e\u77e5\u9053\u600e\u4e48\u6267\u884c\u4e00\u4e2a\u64cd\u4f5c\u7684\u5bf9\u8c61\u5206\u5272\u5f00","title":"\u4f18\u70b9"},{"location":"DesignPattern/18-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/#_4","text":"#include <iostream> using namespace std ; class Receiver { public : void action () { cout << \"\u6267\u884c\u8bf7\u6c42\" << endl ; } }; class Command { protected : Receiver * receiver ; public : Command ( Receiver * tmp ) : receiver ( tmp ){} virtual void execute () {}; }; class ConcreteCommand : public Command { public : ConcreteCommand ( Receiver * tmp ) : Command ( tmp ){} void execute () override { receiver -> action (); } }; class Invoker { private : Command * command ; public : void setCommand ( Command * tmp ) { command = tmp ; } void executeCommand () { command -> execute (); } }; int main () { Receiver * r = new Receiver (); Command * c = new ConcreteCommand ( r ); Invoker * i = new Invoker (); i -> setCommand ( c ); i -> executeCommand (); delete i ; delete c ; delete r ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/19-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/","text":"\u804c\u8d23\u94fe\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u4f7f\u591a\u4e2a\u5bf9\u8c61\u90fd\u6709\u673a\u4f1a\u5904\u7406\u8bf7\u6c42\uff0c\u4ece\u800c\u907f\u514d\u8bf7\u6c42\u7684\u53d1\u9001\u8005\u548c\u63a5\u53d7\u8005\u4e4b\u95f4\u7684\u8026\u5408\u5173\u7cfb\u3002\u5c06\u8fd9\u4e2a\u5bf9\u8c61\u8fde\u6210\u4e00\u6761\u94fe\uff0c\u5e76\u6cbf\u7740\u8fd9\u6761\u94fe\u4f20\u9012\u8be5\u8bf7\u6c42\uff0c\u76f4\u5230\u6709\u4e00\u4e2a\u5bf9\u8c61\u5904\u7406\u5b83\u4e3a\u6b62\u3002 \u4ee3\u7801 \u00b6 #include <iostream> #include <typeinfo> using namespace std ; class Handler { protected : Handler * successor ; public : void SetSuccessor ( Handler * successor ) { this -> successor = successor ; } virtual void HandleRequest ( int request ){} }; class ConcreteHandler1 : public Handler { public : void HandleRequest ( int request ) override { if ( request >= 0 && request < 10 ) { cout << typeid ( * this ). name () << \" \" << request << endl ; } else if ( successor != nullptr ) { successor -> HandleRequest ( request ); } } }; class ConcreteHandler2 : public Handler { public : void HandleRequest ( int request ) override { if ( request >= 10 && request < 20 ) { cout << typeid ( * this ). name () << \" \" << request << endl ; } else if ( successor != nullptr ) { successor -> HandleRequest ( request ); } } }; class ConcreteHandler3 : public Handler { public : void HandleRequest ( int request ) override { if ( request >= 20 && request < 30 ) { cout << typeid ( * this ). name () << \" \" << request << endl ; } else if ( successor != nullptr ) { successor -> HandleRequest ( request ); } } }; int main () { Handler * h1 = new ConcreteHandler1 (); Handler * h2 = new ConcreteHandler2 (); Handler * h3 = new ConcreteHandler3 (); h1 -> SetSuccessor ( h2 ); h2 -> SetSuccessor ( h3 ); int request [] = { 2 , 5 , 14 , 22 , 18 , 3 , 27 , 20 }; for ( auto x : request ) { h1 -> HandleRequest ( x ); } delete h3 ; delete h2 ; delete h1 ; return 0 ; }","title":"19-\u804c\u8d23\u94fe\u6a21\u5f0f"},{"location":"DesignPattern/19-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u804c\u8d23\u94fe\u6a21\u5f0f"},{"location":"DesignPattern/19-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/#_2","text":"\u4f7f\u591a\u4e2a\u5bf9\u8c61\u90fd\u6709\u673a\u4f1a\u5904\u7406\u8bf7\u6c42\uff0c\u4ece\u800c\u907f\u514d\u8bf7\u6c42\u7684\u53d1\u9001\u8005\u548c\u63a5\u53d7\u8005\u4e4b\u95f4\u7684\u8026\u5408\u5173\u7cfb\u3002\u5c06\u8fd9\u4e2a\u5bf9\u8c61\u8fde\u6210\u4e00\u6761\u94fe\uff0c\u5e76\u6cbf\u7740\u8fd9\u6761\u94fe\u4f20\u9012\u8be5\u8bf7\u6c42\uff0c\u76f4\u5230\u6709\u4e00\u4e2a\u5bf9\u8c61\u5904\u7406\u5b83\u4e3a\u6b62\u3002","title":"\u5b9a\u4e49"},{"location":"DesignPattern/19-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/#_3","text":"#include <iostream> #include <typeinfo> using namespace std ; class Handler { protected : Handler * successor ; public : void SetSuccessor ( Handler * successor ) { this -> successor = successor ; } virtual void HandleRequest ( int request ){} }; class ConcreteHandler1 : public Handler { public : void HandleRequest ( int request ) override { if ( request >= 0 && request < 10 ) { cout << typeid ( * this ). name () << \" \" << request << endl ; } else if ( successor != nullptr ) { successor -> HandleRequest ( request ); } } }; class ConcreteHandler2 : public Handler { public : void HandleRequest ( int request ) override { if ( request >= 10 && request < 20 ) { cout << typeid ( * this ). name () << \" \" << request << endl ; } else if ( successor != nullptr ) { successor -> HandleRequest ( request ); } } }; class ConcreteHandler3 : public Handler { public : void HandleRequest ( int request ) override { if ( request >= 20 && request < 30 ) { cout << typeid ( * this ). name () << \" \" << request << endl ; } else if ( successor != nullptr ) { successor -> HandleRequest ( request ); } } }; int main () { Handler * h1 = new ConcreteHandler1 (); Handler * h2 = new ConcreteHandler2 (); Handler * h3 = new ConcreteHandler3 (); h1 -> SetSuccessor ( h2 ); h2 -> SetSuccessor ( h3 ); int request [] = { 2 , 5 , 14 , 22 , 18 , 3 , 27 , 20 }; for ( auto x : request ) { h1 -> HandleRequest ( x ); } delete h3 ; delete h2 ; delete h1 ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/2-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/","text":"\u88c5\u9970\u6a21\u5f0f \u00b6 \u5b9a\u4e49\uff1a \u00b6 \u52a8\u6001\u5730\u7ed9\u4e00\u4e2a\u5bf9\u8c61\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7684\u804c\u8d23\uff0c\u5c31\u589e\u52a0\u529f\u80fd\u6765\u8bf4\uff0c\u88c5\u9970\u6a21\u5f0f\u6bd4\u751f\u6210\u5b50\u7c7b\u66f4\u52a0\u7075\u6d3b\u3002 \u4f18\u70b9\uff1a \u00b6 \u628a\u7c7b\u4e2d\u7684\u88c5\u9970\u529f\u80fd\u4ece\u7c7b\u4e2d\u642c\u79fb\u53bb\u9664\uff0c\u8fd9\u6837\u53ef\u4ee5\u7b80\u5316\u539f\u6709\u7684\u7c7b\u3002 \u4ee3\u7801\uff1a \u00b6 #include<iostream> using namespace std; class Component { public: virtual void operation() {} }; class ConcreteComponent :public Component { public: void operation() override { cout << \"\u5177\u4f53\u5bf9\u8c61\u7684\u64cd\u4f5c\" << endl; } }; class Decorator : public Component { public: void setComponent(Component *component) { this->component = component; } void operation() override { if (component) component->operation(); } protected: Component *component; }; class ConcreteDecoratorA : public Decorator { public: void operation() override { __super::operation(); addedState = \"New State\"; cout << \"\u5177\u4f53\u88c5\u9970\u5bf9\u8c61A\u7684\u64cd\u4f5c\" << endl; } private: string addedState; }; class ConcreteDecoratorB : public Decorator { public: void operation() override { __super::operation(); addedBehavior(); cout << \"\u5177\u4f53\u88c5\u9970\u5bf9\u8c61B\u7684\u64cd\u4f5c\" << endl; } private: void addedBehavior() { cout << \"\u8fd9\u662fB \u72ec\u6709\u7684\u51fd\u6570\" << endl; } }; int main() { ConcreteComponent *c = new ConcreteComponent(); ConcreteDecoratorA *d1 = new ConcreteDecoratorA(); ConcreteDecoratorB *d2 = new ConcreteDecoratorB(); d1->setComponent(c); d2->setComponent(d1); d2->operation(); delete d2; delete d1; delete c; return 0; }","title":"2-\u88c5\u9970\u6a21\u5f0f"},{"location":"DesignPattern/2-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u88c5\u9970\u6a21\u5f0f"},{"location":"DesignPattern/2-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/#_2","text":"\u52a8\u6001\u5730\u7ed9\u4e00\u4e2a\u5bf9\u8c61\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7684\u804c\u8d23\uff0c\u5c31\u589e\u52a0\u529f\u80fd\u6765\u8bf4\uff0c\u88c5\u9970\u6a21\u5f0f\u6bd4\u751f\u6210\u5b50\u7c7b\u66f4\u52a0\u7075\u6d3b\u3002","title":"\u5b9a\u4e49\uff1a"},{"location":"DesignPattern/2-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/#_3","text":"\u628a\u7c7b\u4e2d\u7684\u88c5\u9970\u529f\u80fd\u4ece\u7c7b\u4e2d\u642c\u79fb\u53bb\u9664\uff0c\u8fd9\u6837\u53ef\u4ee5\u7b80\u5316\u539f\u6709\u7684\u7c7b\u3002","title":"\u4f18\u70b9\uff1a"},{"location":"DesignPattern/2-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/#_4","text":"#include<iostream> using namespace std; class Component { public: virtual void operation() {} }; class ConcreteComponent :public Component { public: void operation() override { cout << \"\u5177\u4f53\u5bf9\u8c61\u7684\u64cd\u4f5c\" << endl; } }; class Decorator : public Component { public: void setComponent(Component *component) { this->component = component; } void operation() override { if (component) component->operation(); } protected: Component *component; }; class ConcreteDecoratorA : public Decorator { public: void operation() override { __super::operation(); addedState = \"New State\"; cout << \"\u5177\u4f53\u88c5\u9970\u5bf9\u8c61A\u7684\u64cd\u4f5c\" << endl; } private: string addedState; }; class ConcreteDecoratorB : public Decorator { public: void operation() override { __super::operation(); addedBehavior(); cout << \"\u5177\u4f53\u88c5\u9970\u5bf9\u8c61B\u7684\u64cd\u4f5c\" << endl; } private: void addedBehavior() { cout << \"\u8fd9\u662fB \u72ec\u6709\u7684\u51fd\u6570\" << endl; } }; int main() { ConcreteComponent *c = new ConcreteComponent(); ConcreteDecoratorA *d1 = new ConcreteDecoratorA(); ConcreteDecoratorB *d2 = new ConcreteDecoratorB(); d1->setComponent(c); d2->setComponent(d1); d2->operation(); delete d2; delete d1; delete c; return 0; }","title":"\u4ee3\u7801\uff1a"},{"location":"DesignPattern/20-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/","text":"\u4e2d\u4ecb\u8005\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u7528\u4e00\u4e2a\u4e2d\u4ecb\u5bf9\u8c61\u6765\u5c01\u88c5\u4e00\u7cfb\u5217\u7684\u5bf9\u8c61\u4ea4\u4e92\u3002\u4e2d\u4ecb\u8005\u4f7f\u5404\u5bf9\u8c61\u4e0d\u9700\u8981\u663e\u793a\u5730\u76f8\u4e92\u5f15\u7528\uff0c\u4ece\u800c\u4f7f\u5176\u8026\u5408\u677e\u6563\uff0c\u800c\u4e14\u53ef\u4ee5\u72ec\u7acb\u5730\u6539\u53d8\u5b83\u4eec\u4e4b\u95f4\u7684\u4ea4\u4e92\u3002 \u4f18\u7f3a\u70b9 \u00b6 \u51cf\u5c11\u4e86\u5404\u4e2aColleague\u7684\u8026\u5408\uff0c\u4f7f\u5f97\u53ef\u4ee5\u72ec\u7acb\u5730\u6539\u53d8\u548c\u590d\u7528\u5404\u4e2aColleague \u548cMediator. \u7531\u4e8eConcreteMediator\u63a7\u5236\u96c6\u4e2d\u5316\uff0c\u4e8e\u662f\u5c31\u628a\u4ea4\u4e92\u7684\u590d\u6742\u6027\u53d8\u4e3a\u4e86\u4e2d\u4ecb\u8005\u7684\u590d\u6742\u6027\uff0c\u8fd9\u5c31\u4f7f\u5f97\u4e2d\u4ecb\u8005\u53d8\u5f97\u6bd4\u4efb\u4f55\u4e00\u4e2aConcreteColleague\u90fd\u590d\u6742 \u4ee3\u7801 \u00b6 #include <iostream> #include <string> using namespace std ; class Colleague ; class Mediator { public : virtual void Send ( string message , Colleague * col ) = 0 ; }; class Colleague { protected : Mediator * mediator ; public : Colleague ( Mediator * m ) { mediator = m ; } }; class ConcreteColleague1 : public Colleague { public : ConcreteColleague1 ( Mediator * m ) : Colleague ( m ){} void Send ( string message ) { mediator -> Send ( message , this ); } void Notify ( string message ) { cout << \"\u540c\u4e8b1 \u5f97\u5230\u6d88\u606f \" << message << endl ; } }; class ConcreteColleague2 : public Colleague { public : ConcreteColleague2 ( Mediator * m ) : Colleague ( m ) {} void Send ( string message ) { mediator -> Send ( message , this ); } void Notify ( string message ) { cout << \"\u540c\u4e8b2 \u5f97\u5230\u6d88\u606f \" << message << endl ; } }; class ConcreteMediator : public Mediator { private : ConcreteColleague1 * colleage1 ; ConcreteColleague2 * colleage2 ; public : void setConcreteColleague1 ( ConcreteColleague1 * val ) { colleage1 = val ; } void setConcreteColleague2 ( ConcreteColleague2 * val ) { colleage2 = val ; } void Send ( string message , Colleague * col ) override { if ( col == colleage1 ) colleage2 -> Notify ( message ); else colleage1 -> Notify ( message ); } }; int main () { ConcreteMediator * m = new ConcreteMediator (); ConcreteColleague1 * c1 = new ConcreteColleague1 ( m ); ConcreteColleague2 * c2 = new ConcreteColleague2 ( m ); m -> setConcreteColleague1 ( c1 ); m -> setConcreteColleague2 ( c2 ); c1 -> Send ( \"\u5403\u8fc7\u996d\u4e86\u5417\" ); c2 -> Send ( \"\u6ca1\u6709\u5462\uff0c\u4f60\u6253\u7b97\u8bf7\u5ba2\uff1f\" ); delete c2 ; delete c1 ; delete m ; return 0 ; }","title":"20-\u4e2d\u4ecb\u8005\u6a21\u5f0f"},{"location":"DesignPattern/20-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u4e2d\u4ecb\u8005\u6a21\u5f0f"},{"location":"DesignPattern/20-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/#_2","text":"\u7528\u4e00\u4e2a\u4e2d\u4ecb\u5bf9\u8c61\u6765\u5c01\u88c5\u4e00\u7cfb\u5217\u7684\u5bf9\u8c61\u4ea4\u4e92\u3002\u4e2d\u4ecb\u8005\u4f7f\u5404\u5bf9\u8c61\u4e0d\u9700\u8981\u663e\u793a\u5730\u76f8\u4e92\u5f15\u7528\uff0c\u4ece\u800c\u4f7f\u5176\u8026\u5408\u677e\u6563\uff0c\u800c\u4e14\u53ef\u4ee5\u72ec\u7acb\u5730\u6539\u53d8\u5b83\u4eec\u4e4b\u95f4\u7684\u4ea4\u4e92\u3002","title":"\u5b9a\u4e49"},{"location":"DesignPattern/20-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/#_3","text":"\u51cf\u5c11\u4e86\u5404\u4e2aColleague\u7684\u8026\u5408\uff0c\u4f7f\u5f97\u53ef\u4ee5\u72ec\u7acb\u5730\u6539\u53d8\u548c\u590d\u7528\u5404\u4e2aColleague \u548cMediator. \u7531\u4e8eConcreteMediator\u63a7\u5236\u96c6\u4e2d\u5316\uff0c\u4e8e\u662f\u5c31\u628a\u4ea4\u4e92\u7684\u590d\u6742\u6027\u53d8\u4e3a\u4e86\u4e2d\u4ecb\u8005\u7684\u590d\u6742\u6027\uff0c\u8fd9\u5c31\u4f7f\u5f97\u4e2d\u4ecb\u8005\u53d8\u5f97\u6bd4\u4efb\u4f55\u4e00\u4e2aConcreteColleague\u90fd\u590d\u6742","title":"\u4f18\u7f3a\u70b9"},{"location":"DesignPattern/20-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/#_4","text":"#include <iostream> #include <string> using namespace std ; class Colleague ; class Mediator { public : virtual void Send ( string message , Colleague * col ) = 0 ; }; class Colleague { protected : Mediator * mediator ; public : Colleague ( Mediator * m ) { mediator = m ; } }; class ConcreteColleague1 : public Colleague { public : ConcreteColleague1 ( Mediator * m ) : Colleague ( m ){} void Send ( string message ) { mediator -> Send ( message , this ); } void Notify ( string message ) { cout << \"\u540c\u4e8b1 \u5f97\u5230\u6d88\u606f \" << message << endl ; } }; class ConcreteColleague2 : public Colleague { public : ConcreteColleague2 ( Mediator * m ) : Colleague ( m ) {} void Send ( string message ) { mediator -> Send ( message , this ); } void Notify ( string message ) { cout << \"\u540c\u4e8b2 \u5f97\u5230\u6d88\u606f \" << message << endl ; } }; class ConcreteMediator : public Mediator { private : ConcreteColleague1 * colleage1 ; ConcreteColleague2 * colleage2 ; public : void setConcreteColleague1 ( ConcreteColleague1 * val ) { colleage1 = val ; } void setConcreteColleague2 ( ConcreteColleague2 * val ) { colleage2 = val ; } void Send ( string message , Colleague * col ) override { if ( col == colleage1 ) colleage2 -> Notify ( message ); else colleage1 -> Notify ( message ); } }; int main () { ConcreteMediator * m = new ConcreteMediator (); ConcreteColleague1 * c1 = new ConcreteColleague1 ( m ); ConcreteColleague2 * c2 = new ConcreteColleague2 ( m ); m -> setConcreteColleague1 ( c1 ); m -> setConcreteColleague2 ( c2 ); c1 -> Send ( \"\u5403\u8fc7\u996d\u4e86\u5417\" ); c2 -> Send ( \"\u6ca1\u6709\u5462\uff0c\u4f60\u6253\u7b97\u8bf7\u5ba2\uff1f\" ); delete c2 ; delete c1 ; delete m ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/21-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/","text":"\u4eab\u5143\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u8fd0\u7528\u5171\u4eab\u6280\u672f\u6709\u6548\u5730\u652f\u6301\u5927\u91cf\u7ec6\u7c92\u5ea6\u7684\u5bf9\u8c61 \u9002\u7528\u573a\u666f \u00b6 \u5982\u679c \u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u4e86\u5927\u91cf\u7684\u5bf9\u8c61\uff0c\u800c\u5927\u91cf\u7684\u8fd9\u4e9b\u5bf9\u8c61\u9020\u6210\u4e86\u5f88\u5927\u7684\u5b58\u50a8\u5f00\u9500\u65f6\u5c31\u5e94\u8be5\u8003\u8651\u4f7f\u7528\uff0c\u8fd8\u6709\u5c31\u662f\u5bf9\u8c61\u7684\u5927\u591a\u6570\u72b6\u6001\u53ef\u4ee5\u662f\u5916\u90e8\u72b6\u6001\uff0c\u5982\u679c\u5220\u9664\u5bf9\u8c61\u7684\u5916\u90e8\u72b6\u6001\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u76f8\u5bf9\u8f83\u5c11\u7684\u5171\u4eab\u5bf9\u8c61\u53d6\u4ee3\u591a\u7ec4\u5bf9\u8c61\uff0c\u6b64\u65f6\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4eab\u5143\u6a21\u5f0f\u3002 \u4ee3\u7801 \u00b6 #include <iostream> #include <string> #include <map> using namespace std ; class Flyweight { public : virtual void Operation ( int extrinsicstate ) = 0 ; }; class ConcreteFlyweight : public Flyweight { public : void Operation ( int extrinsicstate ) override { cout << \"\u5177\u4f53Flyweight:\" << extrinsicstate << endl ; } }; class UnsharedConcreteFlyweight : public Flyweight { public : void Operation ( int extrinsicstate ) override { cout << \"\u4e0d\u5171\u4eab\u7684\u5177\u4f53Flyweight:\" << extrinsicstate << endl ; } }; class FlyweightFactory { public : FlyweightFactory () { data . insert ( make_pair ( \"X\" , new ConcreteFlyweight ())); data . insert ( make_pair ( \"Y\" , new ConcreteFlyweight ())); data . insert ( make_pair ( \"Z\" , new ConcreteFlyweight ())); } ~ FlyweightFactory () { delete data [ \"X\" ]; delete data [ \"Y\" ]; delete data [ \"Z\" ]; } Flyweight * getFlyweight ( string key ) { return data [ key ]; } private : map < string , Flyweight *> data ; }; int main () { int extrinsicstate = 22 ; FlyweightFactory * f = new FlyweightFactory (); Flyweight * fx = f -> getFlyweight ( \"X\" ); fx -> Operation ( -- extrinsicstate ); Flyweight * fy = f -> getFlyweight ( \"Y\" ); fy -> Operation ( -- extrinsicstate ); Flyweight * fz = f -> getFlyweight ( \"Z\" ); fz -> Operation ( -- extrinsicstate ); UnsharedConcreteFlyweight * uf = new UnsharedConcreteFlyweight (); uf -> Operation ( -- extrinsicstate ); delete uf ; delete f ; return 0 ; }","title":"21-\u4eab\u5143\u6a21\u5f0f"},{"location":"DesignPattern/21-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u4eab\u5143\u6a21\u5f0f"},{"location":"DesignPattern/21-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/#_2","text":"\u8fd0\u7528\u5171\u4eab\u6280\u672f\u6709\u6548\u5730\u652f\u6301\u5927\u91cf\u7ec6\u7c92\u5ea6\u7684\u5bf9\u8c61","title":"\u5b9a\u4e49"},{"location":"DesignPattern/21-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/#_3","text":"\u5982\u679c \u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u4e86\u5927\u91cf\u7684\u5bf9\u8c61\uff0c\u800c\u5927\u91cf\u7684\u8fd9\u4e9b\u5bf9\u8c61\u9020\u6210\u4e86\u5f88\u5927\u7684\u5b58\u50a8\u5f00\u9500\u65f6\u5c31\u5e94\u8be5\u8003\u8651\u4f7f\u7528\uff0c\u8fd8\u6709\u5c31\u662f\u5bf9\u8c61\u7684\u5927\u591a\u6570\u72b6\u6001\u53ef\u4ee5\u662f\u5916\u90e8\u72b6\u6001\uff0c\u5982\u679c\u5220\u9664\u5bf9\u8c61\u7684\u5916\u90e8\u72b6\u6001\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u76f8\u5bf9\u8f83\u5c11\u7684\u5171\u4eab\u5bf9\u8c61\u53d6\u4ee3\u591a\u7ec4\u5bf9\u8c61\uff0c\u6b64\u65f6\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4eab\u5143\u6a21\u5f0f\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"DesignPattern/21-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/#_4","text":"#include <iostream> #include <string> #include <map> using namespace std ; class Flyweight { public : virtual void Operation ( int extrinsicstate ) = 0 ; }; class ConcreteFlyweight : public Flyweight { public : void Operation ( int extrinsicstate ) override { cout << \"\u5177\u4f53Flyweight:\" << extrinsicstate << endl ; } }; class UnsharedConcreteFlyweight : public Flyweight { public : void Operation ( int extrinsicstate ) override { cout << \"\u4e0d\u5171\u4eab\u7684\u5177\u4f53Flyweight:\" << extrinsicstate << endl ; } }; class FlyweightFactory { public : FlyweightFactory () { data . insert ( make_pair ( \"X\" , new ConcreteFlyweight ())); data . insert ( make_pair ( \"Y\" , new ConcreteFlyweight ())); data . insert ( make_pair ( \"Z\" , new ConcreteFlyweight ())); } ~ FlyweightFactory () { delete data [ \"X\" ]; delete data [ \"Y\" ]; delete data [ \"Z\" ]; } Flyweight * getFlyweight ( string key ) { return data [ key ]; } private : map < string , Flyweight *> data ; }; int main () { int extrinsicstate = 22 ; FlyweightFactory * f = new FlyweightFactory (); Flyweight * fx = f -> getFlyweight ( \"X\" ); fx -> Operation ( -- extrinsicstate ); Flyweight * fy = f -> getFlyweight ( \"Y\" ); fy -> Operation ( -- extrinsicstate ); Flyweight * fz = f -> getFlyweight ( \"Z\" ); fz -> Operation ( -- extrinsicstate ); UnsharedConcreteFlyweight * uf = new UnsharedConcreteFlyweight (); uf -> Operation ( -- extrinsicstate ); delete uf ; delete f ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/22-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/","text":"\u89e3\u91ca\u5668\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u8bed\u8a00\uff0c\u5b9a\u4e49\u5b83\u7684\u6587\u6cd5\u7684\u4e00\u79cd\u8868\u793a\uff0c\u5e76\u5b9a\u4e49\u4e00\u4e2a\u89e3\u91ca\u5668\uff0c\u8fd9\u4e2a\u89e3\u91ca\u5668\u4f7f\u7528\u8be5\u8868\u793a\u6765\u89e3\u91ca\u8bed\u8a00\u4e2d\u7684\u53e5\u5b50\u3002 \u4ee3\u7801 \u00b6 #include <iostream> #include <string> #include <list> using namespace std ; class Context { private : string input ; string output ; }; class AbstractExpression { public : virtual void Interpret ( Context * context ) = 0 ; }; class TerminalExpression : public AbstractExpression { public : void Interpret ( Context * context ) override { cout << \"\u7ec8\u65ad\u89e3\u91ca\u5668\" << endl ; } }; class NoterminalExpression : public AbstractExpression { public : void Interpret ( Context * context ) override { cout << \"\u975e\u7ec8\u65ad\u89e3\u91ca\u5668\" << endl ; } }; int main () { Context * c = new Context (); list < AbstractExpression *> l ; l . push_back ( new TerminalExpression ()); l . push_back ( new NoterminalExpression ()); l . push_back ( new TerminalExpression ()); l . push_back ( new TerminalExpression ()); for ( auto x : l ) { x -> Interpret ( c ); } return 0 ; }","title":"22-\u89e3\u91ca\u5668\u6a21\u5f0f"},{"location":"DesignPattern/22-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u89e3\u91ca\u5668\u6a21\u5f0f"},{"location":"DesignPattern/22-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u8bed\u8a00\uff0c\u5b9a\u4e49\u5b83\u7684\u6587\u6cd5\u7684\u4e00\u79cd\u8868\u793a\uff0c\u5e76\u5b9a\u4e49\u4e00\u4e2a\u89e3\u91ca\u5668\uff0c\u8fd9\u4e2a\u89e3\u91ca\u5668\u4f7f\u7528\u8be5\u8868\u793a\u6765\u89e3\u91ca\u8bed\u8a00\u4e2d\u7684\u53e5\u5b50\u3002","title":"\u5b9a\u4e49"},{"location":"DesignPattern/22-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/#_3","text":"#include <iostream> #include <string> #include <list> using namespace std ; class Context { private : string input ; string output ; }; class AbstractExpression { public : virtual void Interpret ( Context * context ) = 0 ; }; class TerminalExpression : public AbstractExpression { public : void Interpret ( Context * context ) override { cout << \"\u7ec8\u65ad\u89e3\u91ca\u5668\" << endl ; } }; class NoterminalExpression : public AbstractExpression { public : void Interpret ( Context * context ) override { cout << \"\u975e\u7ec8\u65ad\u89e3\u91ca\u5668\" << endl ; } }; int main () { Context * c = new Context (); list < AbstractExpression *> l ; l . push_back ( new TerminalExpression ()); l . push_back ( new NoterminalExpression ()); l . push_back ( new TerminalExpression ()); l . push_back ( new TerminalExpression ()); for ( auto x : l ) { x -> Interpret ( c ); } return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/23-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/","text":"\u8bbf\u95ee\u8005\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u8868\u793a\u4e00\u4e2a\u4f5c\u7528\u4e8e\u67d0\u5bf9\u8c61\u7ed3\u6784\u4e2d\u7684\u5404\u5143\u7d20\u7684\u64cd\u4f5c\u3002\u5b83\u4f7f\u4f60\u53ef\u4ee5\u5728\u4e0d\u6539\u53d8\u5143\u7d20\u7684\u7c7b\u7684\u524d\u63d0\u4e0b\u5b9a\u4e49\u4f5c\u7528\u4e8e\u8fd9\u4e9b\u5143\u7d20\u7684\u65b0\u64cd\u4f5c\u3002 \u4f18\u7f3a\u70b9 \u00b6 \u76ee\u7684\u662f\u628a\u5904\u7406\u4ece\u6570\u636e\u7ed3\u6784\u5206\u79bb\u51fa\u6765 \u4f18\u70b9\u5c31\u662f\u589e\u52a0\u65b0\u7684\u64cd\u4f5c\u6bd4\u8f83\u5bb9\u6613\uff0c\u56e0\u4e3a\u589e\u52a0\u65b0\u7684\u64cd\u4f5c\u610f\u5473\u7740\u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u8bbf\u95ee\u8005\u3002\u8bbf\u95ee\u8005\u6a21\u5f0f\u5c06\u6709\u5173\u7684\u884c\u4e3a\u96c6\u4e2d\u5230\u4e00\u4e2a\u8bbf\u95ee\u8005\u5bf9\u8c61\u4e2d\u3002 \u7f3a\u70b9\u662f \u589e\u52a0\u65b0\u7684\u6570\u636e\u7ed3\u6784\u53d8\u5f97\u56f0\u96be\u4e86 \u4ee3\u7801 \u00b6 #include <iostream> #include <typeinfo> #include <list> using namespace std ; class ConcreteElementA ; class ConcreteElementB ; class Visitor { public : virtual void VisitConcreteElmentA ( ConcreteElementA * a ) = 0 ; virtual void VisitConcreteElmentB ( ConcreteElementB * b ) = 0 ; }; class Element { public : virtual void Accept ( Visitor * visitor ) = 0 ; }; class ConcreteElementA : public Element { public : void Accept ( Visitor * visitor ) override { visitor -> VisitConcreteElmentA ( this ); } }; class ConcreteElementB : public Element { public : void Accept ( Visitor * visitor ) override { visitor -> VisitConcreteElmentB ( this ); } }; class ConcreteVisitor : public Visitor { public : void VisitConcreteElmentA ( ConcreteElementA * a ) override { cout << typeid ( a ). name () << \" \" << typeid ( this ). name () << endl ; } void VisitConcreteElmentB ( ConcreteElementB * a ) override { cout << typeid ( a ). name () << \" \" << typeid ( this ). name () << endl ; } }; class ObjectStructure { private : list < Element *> data ; public : void attach ( Element * e ) { data . push_back ( e ); } void detach ( Element * e ) { data . remove ( e ); } void accept ( Visitor * v ) { for ( auto e : data ) { e -> Accept ( v ); } } }; int main () { ObjectStructure * o = new ObjectStructure (); ConcreteElementA * c1 = new ConcreteElementA (); ConcreteElementB * c2 = new ConcreteElementB (); o -> attach ( c1 ); o -> attach ( c2 ); ConcreteVisitor * v1 = new ConcreteVisitor (); c1 -> Accept ( v1 ); c2 -> Accept ( v1 ); delete v1 ; delete c1 ; delete c2 ; delete o ; return 0 ; }","title":"23-\u8bbf\u95ee\u8005\u6a21\u5f0f"},{"location":"DesignPattern/23-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u8bbf\u95ee\u8005\u6a21\u5f0f"},{"location":"DesignPattern/23-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/#_2","text":"\u8868\u793a\u4e00\u4e2a\u4f5c\u7528\u4e8e\u67d0\u5bf9\u8c61\u7ed3\u6784\u4e2d\u7684\u5404\u5143\u7d20\u7684\u64cd\u4f5c\u3002\u5b83\u4f7f\u4f60\u53ef\u4ee5\u5728\u4e0d\u6539\u53d8\u5143\u7d20\u7684\u7c7b\u7684\u524d\u63d0\u4e0b\u5b9a\u4e49\u4f5c\u7528\u4e8e\u8fd9\u4e9b\u5143\u7d20\u7684\u65b0\u64cd\u4f5c\u3002","title":"\u5b9a\u4e49"},{"location":"DesignPattern/23-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/#_3","text":"\u76ee\u7684\u662f\u628a\u5904\u7406\u4ece\u6570\u636e\u7ed3\u6784\u5206\u79bb\u51fa\u6765 \u4f18\u70b9\u5c31\u662f\u589e\u52a0\u65b0\u7684\u64cd\u4f5c\u6bd4\u8f83\u5bb9\u6613\uff0c\u56e0\u4e3a\u589e\u52a0\u65b0\u7684\u64cd\u4f5c\u610f\u5473\u7740\u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u8bbf\u95ee\u8005\u3002\u8bbf\u95ee\u8005\u6a21\u5f0f\u5c06\u6709\u5173\u7684\u884c\u4e3a\u96c6\u4e2d\u5230\u4e00\u4e2a\u8bbf\u95ee\u8005\u5bf9\u8c61\u4e2d\u3002 \u7f3a\u70b9\u662f \u589e\u52a0\u65b0\u7684\u6570\u636e\u7ed3\u6784\u53d8\u5f97\u56f0\u96be\u4e86","title":"\u4f18\u7f3a\u70b9"},{"location":"DesignPattern/23-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/#_4","text":"#include <iostream> #include <typeinfo> #include <list> using namespace std ; class ConcreteElementA ; class ConcreteElementB ; class Visitor { public : virtual void VisitConcreteElmentA ( ConcreteElementA * a ) = 0 ; virtual void VisitConcreteElmentB ( ConcreteElementB * b ) = 0 ; }; class Element { public : virtual void Accept ( Visitor * visitor ) = 0 ; }; class ConcreteElementA : public Element { public : void Accept ( Visitor * visitor ) override { visitor -> VisitConcreteElmentA ( this ); } }; class ConcreteElementB : public Element { public : void Accept ( Visitor * visitor ) override { visitor -> VisitConcreteElmentB ( this ); } }; class ConcreteVisitor : public Visitor { public : void VisitConcreteElmentA ( ConcreteElementA * a ) override { cout << typeid ( a ). name () << \" \" << typeid ( this ). name () << endl ; } void VisitConcreteElmentB ( ConcreteElementB * a ) override { cout << typeid ( a ). name () << \" \" << typeid ( this ). name () << endl ; } }; class ObjectStructure { private : list < Element *> data ; public : void attach ( Element * e ) { data . push_back ( e ); } void detach ( Element * e ) { data . remove ( e ); } void accept ( Visitor * v ) { for ( auto e : data ) { e -> Accept ( v ); } } }; int main () { ObjectStructure * o = new ObjectStructure (); ConcreteElementA * c1 = new ConcreteElementA (); ConcreteElementB * c2 = new ConcreteElementB (); o -> attach ( c1 ); o -> attach ( c2 ); ConcreteVisitor * v1 = new ConcreteVisitor (); c1 -> Accept ( v1 ); c2 -> Accept ( v1 ); delete v1 ; delete c1 ; delete c2 ; delete o ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/3-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/","text":"\u4ee3\u7406\u6a21\u5f0f \u00b6 \u5b9a\u4e49\uff1a \u00b6 \u4e3a\u5176\u4ed6\u5bf9\u8c61\u63d0\u4f9b\u4e00\u79cd\u4ee3\u7406\u4ee5\u63a7\u5236\u5bf9\u8fd9\u4e2a\u5bf9\u8c61\u7684\u8bbf\u95ee** \u4f7f\u7528\u573a\u666f\uff1a \u00b6 \u4e00\uff09\u8fdc\u7a0b\u4ee3\u7406\uff1a \u4e3a\u4e00\u4e2a\u5bf9\u8c61\u5728\u4e0d\u540c\u7684\u5730\u5740\u7a7a\u95f4\u63d0\u4f9b\u5c40\u90e8\u4ee3\u8868\u3002 \u4e8c\uff09\u865a\u62df\u4ee3\u7406\uff1a \u6839\u636e\u9700\u8981\u521b\u5efa\u5f00\u9500\u5f88\u5927\u7684\u5bf9\u8c61\uff0c\u901a\u8fc7\u5b83\u6765\u5b58\u653e\u5b9e\u4f8b\u5316\u9700\u8981\u5f88\u957f\u65f6\u95f4\u7684\u771f\u5b9e\u5bf9\u8c61\u3002 \u4e09\uff09\u5b89\u5168\u4ee3\u7406\uff1a \u7528\u6765\u63a7\u5236\u771f\u5b9e\u5bf9\u8c61\u8bbf\u95ee\u65f6\u7684\u6743\u9650\u3002 **\u56db\uff09\u667a\u80fd\u6307\u5f15\uff1a**\u8c03\u7528\u771f\u5b9e\u7684\u5bf9\u8c61\u65f6\uff0c\u4ee3\u7406\u5904\u7406\u53e6\u5916\u4e00\u4e9b\u4e8b\u3002 \u4ee3\u7801\uff1a \u00b6 #include<iostream> using namespace std; class Subject { public: virtual void request(){} }; class RealSubject : public Subject { public: void request() override { cout << \"\u771f\u5b9e\u7684\u8bf7\u6c42\uff01\" << endl; } }; class Proxy :public Subject { public: ~Proxy() { delete realSubject; } void request() override { if (!realSubject) { realSubject = new RealSubject(); } realSubject->request(); } private: RealSubject *realSubject; }; int main() { Proxy *proxy = new Proxy(); proxy->request(); return 0; }","title":"3-\u4ee3\u7406\u6a21\u5f0f"},{"location":"DesignPattern/3-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u4ee3\u7406\u6a21\u5f0f"},{"location":"DesignPattern/3-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/#_2","text":"\u4e3a\u5176\u4ed6\u5bf9\u8c61\u63d0\u4f9b\u4e00\u79cd\u4ee3\u7406\u4ee5\u63a7\u5236\u5bf9\u8fd9\u4e2a\u5bf9\u8c61\u7684\u8bbf\u95ee**","title":"\u5b9a\u4e49\uff1a"},{"location":"DesignPattern/3-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/#_3","text":"\u4e00\uff09\u8fdc\u7a0b\u4ee3\u7406\uff1a \u4e3a\u4e00\u4e2a\u5bf9\u8c61\u5728\u4e0d\u540c\u7684\u5730\u5740\u7a7a\u95f4\u63d0\u4f9b\u5c40\u90e8\u4ee3\u8868\u3002 \u4e8c\uff09\u865a\u62df\u4ee3\u7406\uff1a \u6839\u636e\u9700\u8981\u521b\u5efa\u5f00\u9500\u5f88\u5927\u7684\u5bf9\u8c61\uff0c\u901a\u8fc7\u5b83\u6765\u5b58\u653e\u5b9e\u4f8b\u5316\u9700\u8981\u5f88\u957f\u65f6\u95f4\u7684\u771f\u5b9e\u5bf9\u8c61\u3002 \u4e09\uff09\u5b89\u5168\u4ee3\u7406\uff1a \u7528\u6765\u63a7\u5236\u771f\u5b9e\u5bf9\u8c61\u8bbf\u95ee\u65f6\u7684\u6743\u9650\u3002 **\u56db\uff09\u667a\u80fd\u6307\u5f15\uff1a**\u8c03\u7528\u771f\u5b9e\u7684\u5bf9\u8c61\u65f6\uff0c\u4ee3\u7406\u5904\u7406\u53e6\u5916\u4e00\u4e9b\u4e8b\u3002","title":"\u4f7f\u7528\u573a\u666f\uff1a"},{"location":"DesignPattern/3-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/#_4","text":"#include<iostream> using namespace std; class Subject { public: virtual void request(){} }; class RealSubject : public Subject { public: void request() override { cout << \"\u771f\u5b9e\u7684\u8bf7\u6c42\uff01\" << endl; } }; class Proxy :public Subject { public: ~Proxy() { delete realSubject; } void request() override { if (!realSubject) { realSubject = new RealSubject(); } realSubject->request(); } private: RealSubject *realSubject; }; int main() { Proxy *proxy = new Proxy(); proxy->request(); return 0; }","title":"\u4ee3\u7801\uff1a"},{"location":"DesignPattern/4-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/","text":"\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f \u00b6 \u5b9a\u4e49\uff1a \u00b6 \u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u5bf9\u8c61\u7684\u63a5\u53e3\uff0c\u8ba9\u5b50\u7c7b\u51b3\u5b9a\u5b9e\u4f8b\u5316\u54ea\u4e00\u4e2a\u7c7b\u3002\u5de5\u5382\u65b9\u6cd5\u4f7f\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u5316\u5ef6\u8fdf\u5230\u5176\u5b50\u7c7b\u3002* \u4ee3\u7801\uff1a \u00b6 #include <iostream> using namespace std ; class Product { public : Product () {} }; class ConcreteProductA : public Product { public : ConcreteProductA () { cout << \"ConcreteProductA\" << endl ; } }; class ConcreteProductB : public Product { public : ConcreteProductB () { cout << \"ConcreteProductB\" << endl ; } }; class Creator { public : virtual Product * create () { return nullptr ; } }; class ConcreteCreatorA : public Creator { public : Product * create () override { return new ConcreteProductA (); } }; class ConcreteCreatorB : public Creator { public : Product * create () override { return new ConcreteProductB (); } }; int main () { ConcreteCreatorA * factoryA = new ConcreteCreatorA (); Product * product = factoryA -> create (); delete product ; ConcreteCreatorB * factoryB = new ConcreteCreatorB (); product = factoryB -> create (); delete product ; delete factoryA ; delete factoryB ; return 0 ; }","title":"4-\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f"},{"location":"DesignPattern/4-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f"},{"location":"DesignPattern/4-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/#_2","text":"\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u5bf9\u8c61\u7684\u63a5\u53e3\uff0c\u8ba9\u5b50\u7c7b\u51b3\u5b9a\u5b9e\u4f8b\u5316\u54ea\u4e00\u4e2a\u7c7b\u3002\u5de5\u5382\u65b9\u6cd5\u4f7f\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u5316\u5ef6\u8fdf\u5230\u5176\u5b50\u7c7b\u3002*","title":"\u5b9a\u4e49\uff1a"},{"location":"DesignPattern/4-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/#_3","text":"#include <iostream> using namespace std ; class Product { public : Product () {} }; class ConcreteProductA : public Product { public : ConcreteProductA () { cout << \"ConcreteProductA\" << endl ; } }; class ConcreteProductB : public Product { public : ConcreteProductB () { cout << \"ConcreteProductB\" << endl ; } }; class Creator { public : virtual Product * create () { return nullptr ; } }; class ConcreteCreatorA : public Creator { public : Product * create () override { return new ConcreteProductA (); } }; class ConcreteCreatorB : public Creator { public : Product * create () override { return new ConcreteProductB (); } }; int main () { ConcreteCreatorA * factoryA = new ConcreteCreatorA (); Product * product = factoryA -> create (); delete product ; ConcreteCreatorB * factoryB = new ConcreteCreatorB (); product = factoryB -> create (); delete product ; delete factoryA ; delete factoryB ; return 0 ; }","title":"\u4ee3\u7801\uff1a"},{"location":"DesignPattern/5-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/","text":"\u539f\u578b\u6a21\u5f0f \u00b6 \u5b9a\u4e49\uff1a \u00b6 \u7528\u539f\u578b\u5b9e\u4f8b\u5236\u5b9a\u521b\u5efa\u5bf9\u8c61\u7684\u79cd\u7c7b\uff0c\u5e76\u4e14\u901a\u8fc7\u62f7\u8d1d\u8fd9\u4e9b\u539f\u578b\u521b\u5efa\u65b0\u7684\u5bf9\u8c61\u3002 \u4ee3\u7801\uff1a \u00b6 #include <iostream> #include <string> using namespace std ; class Prototype { public : Prototype (){} virtual ~ Prototype (){} virtual Prototype * clone () { return nullptr ; } string getID () { return id ; } protected : string id ; }; class Student : public Prototype { public : Student ( string id ) { this -> id = id ; }; Prototype * clone () override { return new Student ( * this ); } string getID () { return id ; } private : Student ( const Student & tmp ) { this -> id = tmp . id ; } }; int main () { Prototype * stu = new Student ( \"1994\" ); Prototype * tmp = stu -> clone (); cout << tmp -> getID () << endl ; delete tmp ; return 0 ; }","title":"5-\u539f\u578b\u6a21\u5f0f"},{"location":"DesignPattern/5-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u539f\u578b\u6a21\u5f0f"},{"location":"DesignPattern/5-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/#_2","text":"\u7528\u539f\u578b\u5b9e\u4f8b\u5236\u5b9a\u521b\u5efa\u5bf9\u8c61\u7684\u79cd\u7c7b\uff0c\u5e76\u4e14\u901a\u8fc7\u62f7\u8d1d\u8fd9\u4e9b\u539f\u578b\u521b\u5efa\u65b0\u7684\u5bf9\u8c61\u3002","title":"\u5b9a\u4e49\uff1a"},{"location":"DesignPattern/5-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/#_3","text":"#include <iostream> #include <string> using namespace std ; class Prototype { public : Prototype (){} virtual ~ Prototype (){} virtual Prototype * clone () { return nullptr ; } string getID () { return id ; } protected : string id ; }; class Student : public Prototype { public : Student ( string id ) { this -> id = id ; }; Prototype * clone () override { return new Student ( * this ); } string getID () { return id ; } private : Student ( const Student & tmp ) { this -> id = tmp . id ; } }; int main () { Prototype * stu = new Student ( \"1994\" ); Prototype * tmp = stu -> clone (); cout << tmp -> getID () << endl ; delete tmp ; return 0 ; }","title":"\u4ee3\u7801\uff1a"},{"location":"DesignPattern/6-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/","text":"\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u5b9a\u4e49\u4e00\u4e2a\u64cd\u4f5c\u4e2d\u7684\u7b97\u6cd5\u9aa8\u67b6\uff0c\u800c\u5c06\u4e00\u4e9b\u6b65\u9aa4\u5ef6\u8fdf\u5230\u5b50\u7c7b\u4e2d\u3002\u6a21\u677f\u65b9\u6cd5\u4f7f\u5f97\u5b50\u7c7b\u53ef\u4ee5\u4e0d\u6539\u53d8\u7b97\u6cd5\u7684\u7ed3\u6784\u5373\u53ef\u91cd\u5b9a\u4e49\u8be5\u7b97\u6cd5\u7684\u67d0\u4e9b\u7279\u5b9a\u6b65\u9aa4 \u4ee3\u7801 \u00b6 #include <iostream> using namespace std ; class AbstractClass { public : void templateMethod () { primitiveOperation1 (); primitiveOperation2 (); } protected : virtual void primitiveOperation1 () {}; virtual void primitiveOperation2 () {}; }; class ConcreteClassA : public AbstractClass { protected : void primitiveOperation1 () override { cout << \"\u5177\u4f53\u7c7bA\u65b9\u6cd51\u5b9e\u73b0\" << endl ; } void primitiveOperation2 () override { cout << \"\u5177\u4f53\u7c7bA\u65b9\u6cd52\u5b9e\u73b0\" << endl ; } }; class ConcreteClassB : public AbstractClass { protected : void primitiveOperation1 () override { cout << \"\u5177\u4f53\u7c7bB\u65b9\u6cd51\u5b9e\u73b0\" << endl ; } void primitiveOperation2 () override { cout << \"\u5177\u4f53\u7c7bB\u65b9\u6cd52\u5b9e\u73b0\" << endl ; } }; int main () { AbstractClass * c = new ConcreteClassA (); c -> templateMethod (); delete c ; c = new ConcreteClassB (); c -> templateMethod (); delete c ; return 0 ; }","title":"6-\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f"},{"location":"DesignPattern/6-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f"},{"location":"DesignPattern/6-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/#_2","text":"\u5b9a\u4e49\u4e00\u4e2a\u64cd\u4f5c\u4e2d\u7684\u7b97\u6cd5\u9aa8\u67b6\uff0c\u800c\u5c06\u4e00\u4e9b\u6b65\u9aa4\u5ef6\u8fdf\u5230\u5b50\u7c7b\u4e2d\u3002\u6a21\u677f\u65b9\u6cd5\u4f7f\u5f97\u5b50\u7c7b\u53ef\u4ee5\u4e0d\u6539\u53d8\u7b97\u6cd5\u7684\u7ed3\u6784\u5373\u53ef\u91cd\u5b9a\u4e49\u8be5\u7b97\u6cd5\u7684\u67d0\u4e9b\u7279\u5b9a\u6b65\u9aa4","title":"\u5b9a\u4e49"},{"location":"DesignPattern/6-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/#_3","text":"#include <iostream> using namespace std ; class AbstractClass { public : void templateMethod () { primitiveOperation1 (); primitiveOperation2 (); } protected : virtual void primitiveOperation1 () {}; virtual void primitiveOperation2 () {}; }; class ConcreteClassA : public AbstractClass { protected : void primitiveOperation1 () override { cout << \"\u5177\u4f53\u7c7bA\u65b9\u6cd51\u5b9e\u73b0\" << endl ; } void primitiveOperation2 () override { cout << \"\u5177\u4f53\u7c7bA\u65b9\u6cd52\u5b9e\u73b0\" << endl ; } }; class ConcreteClassB : public AbstractClass { protected : void primitiveOperation1 () override { cout << \"\u5177\u4f53\u7c7bB\u65b9\u6cd51\u5b9e\u73b0\" << endl ; } void primitiveOperation2 () override { cout << \"\u5177\u4f53\u7c7bB\u65b9\u6cd52\u5b9e\u73b0\" << endl ; } }; int main () { AbstractClass * c = new ConcreteClassA (); c -> templateMethod (); delete c ; c = new ConcreteClassB (); c -> templateMethod (); delete c ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/7-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/","text":"\u5916\u89c2\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u4e3a\u5b50\u7cfb\u7edf\u4e2d\u7684\u4e00\u7ec4\u63a5\u53e3\u63d0\u4f9b\u4e00\u4e2a\u4e00\u81f4\u7684\u754c\u9762\uff0c\u6b64\u6a21\u5f0f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u9ad8\u5c42\u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u4f7f\u5f97\u8fd9\u4e00\u5b50\u7cfb\u7edf\u66f4\u52a0\u5bb9\u6613\u4f7f\u7528 \u4ee3\u7801 \u00b6 #include <iostream> using namespace std ; class SubSystemOne { public : void MethodOne () { cout << \"\u5b50\u7cfb\u7edf\u65b9\u6cd5\u4e00\" << endl ; } }; class SubSystemTwo { public : void MethodTwo () { cout << \"\u5b50\u7cfb\u7edf\u65b9\u6cd5\u4e8c\" << endl ; } }; class SubSystemThree { public : void MethodThree () { cout << \"\u5b50\u7cfb\u7edf\u65b9\u6cd5\u4e09\" << endl ; } }; class SubSystemFour { public : void MethodFour () { cout << \"\u5b50\u7cfb\u7edf\u65b9\u6cd5\u56db\" << endl ; } }; class Facade { private : SubSystemOne * one ; SubSystemTwo * two ; SubSystemThree * three ; SubSystemFour * four ; public : Facade () { one = new SubSystemOne (); two = new SubSystemTwo (); three = new SubSystemThree (); four = new SubSystemFour (); } ~ Facade () { delete one ; delete two ; delete three ; delete four ; } void MethodA () { cout << \"\u65b9\u6cd5\u7ec4A\uff08\uff09-----\" << endl ; one -> MethodOne (); two -> MethodTwo (); four -> MethodFour (); } void MethodB () { cout << \"\u65b9\u6cd5\u7ec4B\uff08\uff09-----\" << endl ; two -> MethodTwo (); three -> MethodThree (); } }; int main () { Facade * fa = new Facade (); fa -> MethodA (); fa -> MethodB (); return 0 ; }","title":"7-\u5916\u89c2\u6a21\u5f0f"},{"location":"DesignPattern/7-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u5916\u89c2\u6a21\u5f0f"},{"location":"DesignPattern/7-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/#_2","text":"\u4e3a\u5b50\u7cfb\u7edf\u4e2d\u7684\u4e00\u7ec4\u63a5\u53e3\u63d0\u4f9b\u4e00\u4e2a\u4e00\u81f4\u7684\u754c\u9762\uff0c\u6b64\u6a21\u5f0f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u9ad8\u5c42\u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u4f7f\u5f97\u8fd9\u4e00\u5b50\u7cfb\u7edf\u66f4\u52a0\u5bb9\u6613\u4f7f\u7528","title":"\u5b9a\u4e49"},{"location":"DesignPattern/7-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/#_3","text":"#include <iostream> using namespace std ; class SubSystemOne { public : void MethodOne () { cout << \"\u5b50\u7cfb\u7edf\u65b9\u6cd5\u4e00\" << endl ; } }; class SubSystemTwo { public : void MethodTwo () { cout << \"\u5b50\u7cfb\u7edf\u65b9\u6cd5\u4e8c\" << endl ; } }; class SubSystemThree { public : void MethodThree () { cout << \"\u5b50\u7cfb\u7edf\u65b9\u6cd5\u4e09\" << endl ; } }; class SubSystemFour { public : void MethodFour () { cout << \"\u5b50\u7cfb\u7edf\u65b9\u6cd5\u56db\" << endl ; } }; class Facade { private : SubSystemOne * one ; SubSystemTwo * two ; SubSystemThree * three ; SubSystemFour * four ; public : Facade () { one = new SubSystemOne (); two = new SubSystemTwo (); three = new SubSystemThree (); four = new SubSystemFour (); } ~ Facade () { delete one ; delete two ; delete three ; delete four ; } void MethodA () { cout << \"\u65b9\u6cd5\u7ec4A\uff08\uff09-----\" << endl ; one -> MethodOne (); two -> MethodTwo (); four -> MethodFour (); } void MethodB () { cout << \"\u65b9\u6cd5\u7ec4B\uff08\uff09-----\" << endl ; two -> MethodTwo (); three -> MethodThree (); } }; int main () { Facade * fa = new Facade (); fa -> MethodA (); fa -> MethodB (); return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/8-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/","text":"\u5efa\u9020\u8005\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u5c06\u4e00\u4e2a\u590d\u6742\u5bf9\u8c61\u7684\u6784\u5efa\u4e0e\u5b83\u7684\u8868\u793a\u5206\u79bb\uff0c\u4f7f\u5f97\u540c\u6837\u7684\u6784\u5efa\u8fc7\u7a0b\u53ef\u4ee5\u521b\u5efa\u4e0d\u540c\u7684\u8868\u793a \u4f18\u70b9 \u00b6 \u4f7f\u5f97\u5efa\u9020\u4ee3\u7801\u4e0e\u8868\u793a\u4ee3\u7801\u5206\u79bb\uff0c\u7531\u4e8e\u5efa\u9020\u8005\u9690\u85cf\u4e86\u8be5\u4ea7\u54c1\u662f\u5982\u4f55\u7ec4\u88c5\u7684\uff0c\u6240\u4ee5\u82e5\u9700\u8981\u6539\u53d8\u4e00\u4e2a\u4ea7\u54c1\u7684\u5185\u90e8\u8868\u793a\uff0c\u53ea\u9700\u8981\u518d\u5b9a\u4e49\u4e00\u4e2a\u5177\u4f53\u7684\u5efa\u9020\u8005\u5c31\u53ef\u4ee5\u4e86 \u4ee3\u7801 \u00b6 #include <iostream> #include <list> #include <string> using namespace std ; class Product { private : list < string > parts ; public : void add ( string part ) { parts . push_back ( part ); } void show () { cout << \"\u4ea7\u54c1\u521b\u5efa------\" << endl ; for ( const string & str : parts ) { cout << str << endl ; } } }; class Builder { public : virtual void BuilderPartA () = 0 ; virtual void BuilderPartB () = 0 ; virtual Product * getResult () = 0 ; }; class ConcreteBuilder1 : public Builder { private : Product * product ; public : ConcreteBuilder1 () { product = new Product (); } ~ ConcreteBuilder1 () { delete product ; } void BuilderPartA () override { product -> add ( \"\u90e8\u4ef6A\" ); } void BuilderPartB () override { product -> add ( \"\u90e8\u4ef6B\" ); } Product * getResult () override { return product ; } }; class ConcreteBuilder2 : public Builder { private : Product * product ; public : ConcreteBuilder2 () { product = new Product (); } ~ ConcreteBuilder2 () { delete product ; } void BuilderPartA () override { product -> add ( \"\u90e8\u4ef6X\" ); } void BuilderPartB () override { product -> add ( \"\u90e8\u4ef6Y\" ); } Product * getResult () override { return product ; } }; class Director { public : void Construct ( Builder * builder ) { builder -> BuilderPartA (); builder -> BuilderPartB (); } }; int main () { Director * director = new Director (); Builder * b1 = new ConcreteBuilder1 (); Builder * b2 = new ConcreteBuilder2 (); director -> Construct ( b1 ); Product * p1 = b1 -> getResult (); p1 -> show (); director -> Construct ( b2 ); Product * p2 = b2 -> getResult (); p2 -> show (); return 0 ; }","title":"8-\u5efa\u9020\u8005\u6a21\u5f0f"},{"location":"DesignPattern/8-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u5efa\u9020\u8005\u6a21\u5f0f"},{"location":"DesignPattern/8-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/#_2","text":"\u5c06\u4e00\u4e2a\u590d\u6742\u5bf9\u8c61\u7684\u6784\u5efa\u4e0e\u5b83\u7684\u8868\u793a\u5206\u79bb\uff0c\u4f7f\u5f97\u540c\u6837\u7684\u6784\u5efa\u8fc7\u7a0b\u53ef\u4ee5\u521b\u5efa\u4e0d\u540c\u7684\u8868\u793a","title":"\u5b9a\u4e49"},{"location":"DesignPattern/8-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/#_3","text":"\u4f7f\u5f97\u5efa\u9020\u4ee3\u7801\u4e0e\u8868\u793a\u4ee3\u7801\u5206\u79bb\uff0c\u7531\u4e8e\u5efa\u9020\u8005\u9690\u85cf\u4e86\u8be5\u4ea7\u54c1\u662f\u5982\u4f55\u7ec4\u88c5\u7684\uff0c\u6240\u4ee5\u82e5\u9700\u8981\u6539\u53d8\u4e00\u4e2a\u4ea7\u54c1\u7684\u5185\u90e8\u8868\u793a\uff0c\u53ea\u9700\u8981\u518d\u5b9a\u4e49\u4e00\u4e2a\u5177\u4f53\u7684\u5efa\u9020\u8005\u5c31\u53ef\u4ee5\u4e86","title":"\u4f18\u70b9"},{"location":"DesignPattern/8-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/#_4","text":"#include <iostream> #include <list> #include <string> using namespace std ; class Product { private : list < string > parts ; public : void add ( string part ) { parts . push_back ( part ); } void show () { cout << \"\u4ea7\u54c1\u521b\u5efa------\" << endl ; for ( const string & str : parts ) { cout << str << endl ; } } }; class Builder { public : virtual void BuilderPartA () = 0 ; virtual void BuilderPartB () = 0 ; virtual Product * getResult () = 0 ; }; class ConcreteBuilder1 : public Builder { private : Product * product ; public : ConcreteBuilder1 () { product = new Product (); } ~ ConcreteBuilder1 () { delete product ; } void BuilderPartA () override { product -> add ( \"\u90e8\u4ef6A\" ); } void BuilderPartB () override { product -> add ( \"\u90e8\u4ef6B\" ); } Product * getResult () override { return product ; } }; class ConcreteBuilder2 : public Builder { private : Product * product ; public : ConcreteBuilder2 () { product = new Product (); } ~ ConcreteBuilder2 () { delete product ; } void BuilderPartA () override { product -> add ( \"\u90e8\u4ef6X\" ); } void BuilderPartB () override { product -> add ( \"\u90e8\u4ef6Y\" ); } Product * getResult () override { return product ; } }; class Director { public : void Construct ( Builder * builder ) { builder -> BuilderPartA (); builder -> BuilderPartB (); } }; int main () { Director * director = new Director (); Builder * b1 = new ConcreteBuilder1 (); Builder * b2 = new ConcreteBuilder2 (); director -> Construct ( b1 ); Product * p1 = b1 -> getResult (); p1 -> show (); director -> Construct ( b2 ); Product * p2 = b2 -> getResult (); p2 -> show (); return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/9-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/","text":"\u89c2\u5bdf\u8005\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u5b9a\u4e49\u4e86\u4e00\u79cd\u4e00\u5bf9\u591a\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u8ba9\u591a\u4e2a\u89c2\u5bdf\u8005\u5bf9\u8c61\u540c\u65f6\u76d1\u542c\u67d0\u4e00\u4e2a\u4e3b\u4f53\u5bf9\u8c61\u3002\u8fd9\u4e2a\u4e3b\u9898\u5bf9\u8c61\u5728\u72b6\u6001\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u4f1a\u901a\u77e5\u6240\u6709\u89c2\u5bdf\u8005\u5bf9\u8c61\uff0c\u4f7f\u5b83\u4eec\u80fd\u591f\u81ea\u52a8\u66f4\u65b0\u81ea\u5df1 \u4ee3\u7801 \u00b6 #include <iostream> #include <list> #include <string> using namespace std ; class Observer { public : virtual void Update () = 0 ; }; class Subject { private : list < Observer *> observers ; public : virtual ~ Subject () { for ( auto x : observers ) { delete x ; } observers . clear (); } void attach ( Observer * observer ) { observers . push_back ( observer ); } void Detach ( Observer * observer ) { observers . remove ( observer ); } void Notify () { for ( auto ob : observers ) { ob -> Update (); } } }; class ConcreteSubject : public Subject { private : string subjectState ; public : void setState ( string value ) { this -> subjectState = value ; } string getState () { return subjectState ; } }; class ConcreteObserver : public Observer { private : string name ; string observerState ; ConcreteSubject * subject ; public : ConcreteObserver ( ConcreteSubject * subject , string name ) { this -> name = name ; this -> subject = subject ; } void Update () override { observerState = subject -> getState (); cout << \"\u89c2\u5bdf\u8005 \" << name << \" \u7684\u65b0\u72b6\u6001\u662f \" << observerState << endl ; } ConcreteSubject * getSubject () { return subject ; } void setSubject ( ConcreteSubject * sub ) { subject = sub ; } }; int main () { ConcreteSubject * s = new ConcreteSubject (); s -> attach ( new ConcreteObserver ( s , \"X\" )); s -> attach ( new ConcreteObserver ( s , \"Y\" )); s -> attach ( new ConcreteObserver ( s , \"Z\" )); s -> setState ( \"ABC\" ); s -> Notify (); return 0 ; }","title":"9-\u89c2\u5bdf\u8005\u6a21\u5f0f"},{"location":"DesignPattern/9-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u89c2\u5bdf\u8005\u6a21\u5f0f"},{"location":"DesignPattern/9-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/#_2","text":"\u5b9a\u4e49\u4e86\u4e00\u79cd\u4e00\u5bf9\u591a\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u8ba9\u591a\u4e2a\u89c2\u5bdf\u8005\u5bf9\u8c61\u540c\u65f6\u76d1\u542c\u67d0\u4e00\u4e2a\u4e3b\u4f53\u5bf9\u8c61\u3002\u8fd9\u4e2a\u4e3b\u9898\u5bf9\u8c61\u5728\u72b6\u6001\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u4f1a\u901a\u77e5\u6240\u6709\u89c2\u5bdf\u8005\u5bf9\u8c61\uff0c\u4f7f\u5b83\u4eec\u80fd\u591f\u81ea\u52a8\u66f4\u65b0\u81ea\u5df1","title":"\u5b9a\u4e49"},{"location":"DesignPattern/9-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/#_3","text":"#include <iostream> #include <list> #include <string> using namespace std ; class Observer { public : virtual void Update () = 0 ; }; class Subject { private : list < Observer *> observers ; public : virtual ~ Subject () { for ( auto x : observers ) { delete x ; } observers . clear (); } void attach ( Observer * observer ) { observers . push_back ( observer ); } void Detach ( Observer * observer ) { observers . remove ( observer ); } void Notify () { for ( auto ob : observers ) { ob -> Update (); } } }; class ConcreteSubject : public Subject { private : string subjectState ; public : void setState ( string value ) { this -> subjectState = value ; } string getState () { return subjectState ; } }; class ConcreteObserver : public Observer { private : string name ; string observerState ; ConcreteSubject * subject ; public : ConcreteObserver ( ConcreteSubject * subject , string name ) { this -> name = name ; this -> subject = subject ; } void Update () override { observerState = subject -> getState (); cout << \"\u89c2\u5bdf\u8005 \" << name << \" \u7684\u65b0\u72b6\u6001\u662f \" << observerState << endl ; } ConcreteSubject * getSubject () { return subject ; } void setSubject ( ConcreteSubject * sub ) { subject = sub ; } }; int main () { ConcreteSubject * s = new ConcreteSubject (); s -> attach ( new ConcreteObserver ( s , \"X\" )); s -> attach ( new ConcreteObserver ( s , \"Y\" )); s -> attach ( new ConcreteObserver ( s , \"Z\" )); s -> setState ( \"ABC\" ); s -> Notify (); return 0 ; }","title":"\u4ee3\u7801"},{"location":"Libevent/","text":"hello world \u00b6","title":"\u5f00\u59cb"},{"location":"Libevent/#hello-world","text":"","title":"hello world"},{"location":"Lua/","text":"hello world \u00b6","title":"\u5f00\u59cb"},{"location":"Lua/#hello-world","text":"","title":"hello world"},{"location":"NoahGameFrame/NFCore/NFConsistentHash_h/","text":"NFConsistentHash \u00b6 \u4e00\u81f4\u6027\u54c8\u5e0c\u4e3b\u8981\u5c31\u662f\u89e3\u51b3\u5f53\u673a\u5668\u51cf\u5c11\u6216\u589e\u52a0\u7684\u65f6\u5019\uff0c\u5927\u9762\u79ef\u7684\u6570\u636e\u91cd\u65b0\u54c8\u5e0c\u7684\u95ee\u9898\u3002 \u7f3a\u70b9\uff1a \u00b6 \u4e00\u81f4\u6027Hash\u7b97\u6cd5\u5728\u670d\u52a1\u8282\u70b9\u592a\u5c11\u65f6\uff0c\u5bb9\u6613\u56e0\u4e3a\u8282\u70b9\u5206\u90e8\u4e0d\u5747\u5300\u800c\u9020\u6210\u6570\u636e\u503e\u659c\uff08\u88ab\u7f13\u5b58\u7684\u5bf9\u8c61\u5927\u90e8\u5206\u96c6\u4e2d\u7f13\u5b58\u5728\u67d0\u4e00\u53f0\u670d\u52a1\u5668\u4e0a\uff09\u95ee\u9898\u3002\u6bd4\u5982\u53ea\u6709 2 \u53f0\u673a\u5668\uff0c\u8fd9 2 \u53f0\u673a\u5668\u79bb\u7684\u5f88\u8fd1\uff0c\u90a3\u4e48\u987a\u65f6\u9488\u7b2c\u4e00\u4e2a\u673a\u5668\u8282\u70b9\u4e0a\u5c06\u5b58\u5728\u5927\u91cf\u7684\u6570\u636e\uff0c\u7b2c\u4e8c\u4e2a\u673a\u5668\u8282\u70b9\u4e0a\u6570\u636e\u4f1a\u5f88\u5c11\u3002 \u4e3a\u4e86\u907f\u514d\u51fa\u73b0\u6570\u636e\u503e\u659c\u95ee\u9898\uff0c\u4e00\u81f4\u6027 Hash \u7b97\u6cd5\u5f15\u5165\u4e86\u865a\u62df\u8282\u70b9\u7684\u673a\u5236\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e2a\u673a\u5668\u8282\u70b9\u4f1a\u8fdb\u884c\u591a\u6b21\u54c8\u5e0c\uff0c\u6700\u7ec8\u6bcf\u4e2a\u673a\u5668\u8282\u70b9\u5728\u54c8\u5e0c\u73af\u4e0a\u4f1a\u6709\u591a\u4e2a\u865a\u62df\u8282\u70b9\u5b58\u5728\uff0c\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u6765\u5927\u5927\u524a\u5f31\u751a\u81f3\u907f\u514d\u6570\u636e\u503e\u659c\u95ee\u9898\u3002\u540c\u65f6\u6570\u636e\u5b9a\u4f4d\u7b97\u6cd5\u4e0d\u53d8\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u6b65\u865a\u62df\u8282\u70b9\u5230\u5b9e\u9645\u8282\u70b9\u7684\u6620\u5c04\u3002 Redis \u96c6\u7fa4\u5206\u69fd\u7684\u5b9e\u73b0 \u00b6 Redis \u96c6\u7fa4\u5e76\u6ca1\u6709\u76f4\u63a5\u4f7f\u7528\u4e00\u81f4\u6027\u54c8\u5e0c\uff0c\u800c\u662f\u4f7f\u7528\u4e86\u54c8\u5e0c\u69fd \uff08slot\uff09 \u7684\u6982\u5ff5\uff0cRedis \u6ca1\u6709\u76f4\u63a5\u4f7f\u7528\u54c8\u5e0c\u7b97\u6cd5 hash()\uff0c\u800c\u662f\u4f7f\u7528\u4e86crc16\u6821\u9a8c\u7b97\u6cd5\u3002\u69fd\u4f4d\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u4e2a\u7684\u7a7a\u95f4\u7684\u5355\u4f4d\u3002\u5176\u5b9e\u54c8\u5e0c\u69fd\u7684\u672c\u8d28\u548c\u4e00\u81f4\u6027\u54c8\u5e0c\u7b97\u6cd5\u975e\u5e38\u76f8\u4f3c\uff0c\u4e0d\u540c\u70b9\u5c31\u662f\u5bf9\u4e8e\u54c8\u5e0c\u7a7a\u95f4\u7684\u5b9a\u4e49\u3002\u4e00\u81f4\u6027\u54c8\u5e0c\u7684\u7a7a\u95f4\u662f\u4e00\u4e2a\u5706\u73af\uff0c\u8282\u70b9\u5206\u5e03\u662f\u57fa\u4e8e\u5706\u73af\u7684\uff0c\u65e0\u6cd5\u5f88\u597d\u7684\u63a7\u5236\u6570\u636e\u5206\u5e03\uff0c\u53ef\u80fd\u4f1a\u4ea7\u751f\u6570\u636e\u503e\u659c\u95ee\u9898\u3002\u800c Redis \u7684\u69fd\u4f4d\u7a7a\u95f4\u662f\u81ea\u5b9a\u4e49\u5206\u914d\u7684\uff0c\u7c7b\u4f3c\u4e8eWindows\u76d8\u5206\u533a\u7684\u6982\u5ff5\u3002\u8fd9\u79cd\u5206\u533a\u662f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5927\u5c0f\uff0c\u81ea\u5b9a\u4e49\u4f4d\u7f6e\u7684\u3002Redis \u96c6\u7fa4\u5305\u542b\u4e86 16384 \u4e2a\u54c8\u5e0c\u69fd\uff0c\u6bcf\u4e2a Key \u7ecf\u8fc7\u8ba1\u7b97\u540e\u4f1a\u843d\u5728\u4e00\u4e2a\u5177\u4f53\u7684\u69fd\u4f4d\u4e0a\uff0c\u800c\u69fd\u4f4d\u5177\u4f53\u5728\u54ea\u4e2a\u673a\u5668\u4e0a\u662f\u7528\u6237\u81ea\u5df1\u6839\u636e\u81ea\u5df1\u673a\u5668\u7684\u60c5\u51b5\u914d\u7f6e\u7684\uff0c\u673a\u5668\u786c\u76d8\u5c0f\u7684\u53ef\u4ee5\u5206\u914d\u5c11\u4e00\u70b9\u69fd\u4f4d\uff0c\u786c\u76d8\u5927\u7684\u53ef\u4ee5\u5206\u914d\u591a\u4e00\u70b9\u3002\u5982\u679c\u8282\u70b9\u786c\u76d8\u90fd\u5dee\u4e0d\u591a\u5219\u53ef\u4ee5\u5e73\u5747\u5206\u914d\u3002\u6240\u4ee5\u54c8\u5e0c\u69fd\u8fd9\u79cd\u6982\u5ff5\u5f88\u597d\u5730\u89e3\u51b3\u4e86\u4e00\u81f4\u6027\u54c8\u5e0c\u7684\u5f0a\u7aef\u3002 \u53e6\u5916\u5728\u5bb9\u9519\u6027\u548c\u6269\u5c55\u6027\u4e0a\u4e0e\u4e00\u81f4\u6027\u54c8\u5e0c\u4e00\u6837\uff0c\u90fd\u662f\u5bf9\u53d7\u5f71\u54cd\u7684\u6570\u636e\u8fdb\u884c\u8f6c\u79fb\u800c\u4e0d\u5f71\u54cd\u5176\u5b83\u7684\u6570\u636e\u3002\u800c\u54c8\u5e0c\u69fd\u672c\u8d28\u4e0a\u662f\u5bf9\u69fd\u4f4d\u7684\u8f6c\u79fb\uff0c\u628a\u6545\u969c\u8282\u70b9\u8d1f\u8d23\u7684\u69fd\u4f4d\u8f6c\u79fb\u5230\u5176\u4ed6\u6b63\u5e38\u7684\u8282\u70b9\u4e0a\u3002\u6269\u5c55\u8282\u70b9\u4e5f\u662f\u4e00\u6837\uff0c\u628a\u5176\u4ed6\u8282\u70b9\u4e0a\u7684\u69fd\u4f4d\u8f6c\u79fb\u5230\u65b0\u7684\u8282\u70b9\u4e0a\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u69fd\u4f4d\u7684\u8f6c\u79fb\u548c\u5206\u6d3e\uff0cRedis\u96c6\u7fa4\u662f\u4e0d\u4f1a\u81ea\u52a8\u8fdb\u884c\u7684\uff0c\u800c\u662f\u9700\u8981\u4eba\u5de5\u914d\u7f6e\u7684\u3002\u6240\u4ee5Redis\u96c6\u7fa4\u7684\u9ad8\u53ef\u7528\u662f\u4f9d\u8d56\u4e8e\u8282\u70b9\u7684\u4e3b\u4ece\u590d\u5236\u4e0e\u4e3b\u4ece\u95f4\u7684\u81ea\u52a8\u6545\u969c\u8f6c\u79fb\u3002 NFVirtualNode \u00b6 \u5b9a\u4e49\u4e86NFIVirtualNode\u7684\u63a5\u53e3\u548c\u7d22\u5f15\u3002 class NFIVirtualNode { public : NFIVirtualNode ( const int nVirID ) : nVirtualIndex ( nVirID ) { } NFIVirtualNode () { nVirtualIndex = 0 ; } virtual ~ NFIVirtualNode () { nVirtualIndex = 0 ; } virtual std :: string GetDataStr () const { return \"\" ; } std :: string ToStr () const { std :: ostringstream strInfo ; strInfo << GetDataStr () << \"-\" << nVirtualIndex ; return strInfo . str (); } private : int nVirtualIndex ; }; template < typename T > class NFVirtualNode : public NFIVirtualNode { public : NFVirtualNode ( const T tData , const int nVirID ) : NFIVirtualNode ( nVirID ) { mxData = tData ; } NFVirtualNode () { } virtual std :: string GetDataStr () const { return lexical_cast < std :: string > ( mxData ); } T mxData ; }; NFHasher \u00b6 \u5c06\u5b57\u7b26\u4e32CRC32\u6821\u9a8c\u7801\u5f53\u505a\u54c8\u5e0c\u503c class NFIHasher { public : virtual ~ NFIHasher (){} virtual uint32_t GetHashValue ( const NFIVirtualNode & vNode ) = 0 ; }; class NFHasher : public NFIHasher { public : virtual uint32_t GetHashValue ( const NFIVirtualNode & vNode ) { std :: string vnode = vNode . ToStr (); return NFrame :: CRC32 ( vnode ); } }; NFConsistentHash \u00b6 template < typename T > class NFIConsistentHash { public : virtual std :: size_t Size () const = 0 ; virtual bool Empty () const = 0 ; virtual void ClearAll () = 0 ; virtual void Insert ( const T & name ) = 0 ; virtual void Insert ( const NFVirtualNode < T >& xNode ) = 0 ; virtual bool Exist ( const NFVirtualNode < T >& xInNode ) = 0 ; virtual void Erase ( const T & name ) = 0 ; virtual std :: size_t Erase ( const NFVirtualNode < T >& xNode ) = 0 ; virtual bool GetSuitNodeRandom ( NFVirtualNode < T >& node ) = 0 ; virtual bool GetSuitNodeConsistent ( NFVirtualNode < T >& node ) = 0 ; virtual bool GetSuitNode ( const T & name , NFVirtualNode < T >& node ) = 0 ; //virtual bool GetSuitNode(const std::string& str, NFVirtualNode<T>& node) = 0; virtual bool GetSuitNode ( uint32_t hashValue , NFVirtualNode < T >& node ) = 0 ; virtual bool GetNodeList ( std :: list < NFVirtualNode < T >>& nodeList ) = 0 ; }; template < typename T > class NFConsistentHash : public NFIConsistentHash < T > { public : NFConsistentHash () { m_pHasher = new NFHasher (); } virtual ~ NFConsistentHash () { delete m_pHasher ; m_pHasher = NULL ; } public : virtual std :: size_t Size () const { return mxNodes . size (); } virtual bool Empty () const { return mxNodes . empty (); } virtual void ClearAll () { mxNodes . clear (); } virtual void Insert ( const T & name ) { // \u4e00\u6b21\u6027\u63d2\u5165\u4e94\u767e\u4e2a \u6ca1\u770b\u61c2\u662f\u4e3a\u4ec0\u4e48 for ( int i = 0 ; i < mnNodeCount ; ++ i ) { NFVirtualNode < T > vNode ( name , i ); Insert ( vNode ); } } virtual void Insert ( const NFVirtualNode < T >& xNode ) { uint32_t hash = m_pHasher -> GetHashValue ( xNode ); auto it = mxNodes . find ( hash ); if ( it == mxNodes . end ()) { mxNodes . insert ( typename std :: map < uint32_t , NFVirtualNode < T >>:: value_type ( hash , xNode )); } } virtual bool Exist ( const NFVirtualNode < T >& xInNode ) { uint32_t hash = m_pHasher -> GetHashValue ( xInNode ); typename std :: map < uint32_t , NFVirtualNode < T >>:: iterator it = mxNodes . find ( hash ); if ( it != mxNodes . end ()) { return true ; } return false ; } virtual void Erase ( const T & name ) { for ( int i = 0 ; i < mnNodeCount ; ++ i ) { NFVirtualNode < T > vNode ( name , i ); Erase ( vNode ); } } virtual std :: size_t Erase ( const NFVirtualNode < T >& xNode ) { uint32_t hash = m_pHasher -> GetHashValue ( xNode ); return mxNodes . erase ( hash ); } virtual bool GetSuitNodeRandom ( NFVirtualNode < T >& node ) { int nID = ( int ) std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: system_clock :: now (). time_since_epoch ()). count (); return GetSuitNode ( nID , node ); } virtual bool GetSuitNodeConsistent ( NFVirtualNode < T >& node ) { return GetSuitNode ( 0 , node ); } virtual bool GetSuitNode ( const T & name , NFVirtualNode < T >& node ) { std :: string str = lexical_cast < std :: string > ( name ); uint32_t nCRC32 = NFrame :: CRC32 ( str ); return GetSuitNode ( nCRC32 , node ); } virtual bool GetSuitNode ( uint32_t hashValue , NFVirtualNode < T >& node ) { if ( mxNodes . empty ()) { return false ; } typename std :: map < uint32_t , NFVirtualNode < T >>:: iterator it = mxNodes . lower_bound ( hashValue ); if ( it == mxNodes . end ()) { it = mxNodes . begin (); } node = it -> second ; return true ; } virtual bool GetNodeList ( std :: list < NFVirtualNode < T >>& nodeList ) { for ( typename std :: map < uint32_t , NFVirtualNode < T >>:: iterator it = mxNodes . begin (); it != mxNodes . end (); ++ it ) { nodeList . push_back ( it -> second ); } return true ; } private : int mnNodeCount = 500 ; typename std :: map < uint32_t , NFVirtualNode < T >> mxNodes ; NFIHasher * m_pHasher ; };","title":"NFConsistentHash_h"},{"location":"NoahGameFrame/NFCore/NFConsistentHash_h/#nfconsistenthash","text":"\u4e00\u81f4\u6027\u54c8\u5e0c\u4e3b\u8981\u5c31\u662f\u89e3\u51b3\u5f53\u673a\u5668\u51cf\u5c11\u6216\u589e\u52a0\u7684\u65f6\u5019\uff0c\u5927\u9762\u79ef\u7684\u6570\u636e\u91cd\u65b0\u54c8\u5e0c\u7684\u95ee\u9898\u3002","title":"NFConsistentHash"},{"location":"NoahGameFrame/NFCore/NFConsistentHash_h/#_1","text":"\u4e00\u81f4\u6027Hash\u7b97\u6cd5\u5728\u670d\u52a1\u8282\u70b9\u592a\u5c11\u65f6\uff0c\u5bb9\u6613\u56e0\u4e3a\u8282\u70b9\u5206\u90e8\u4e0d\u5747\u5300\u800c\u9020\u6210\u6570\u636e\u503e\u659c\uff08\u88ab\u7f13\u5b58\u7684\u5bf9\u8c61\u5927\u90e8\u5206\u96c6\u4e2d\u7f13\u5b58\u5728\u67d0\u4e00\u53f0\u670d\u52a1\u5668\u4e0a\uff09\u95ee\u9898\u3002\u6bd4\u5982\u53ea\u6709 2 \u53f0\u673a\u5668\uff0c\u8fd9 2 \u53f0\u673a\u5668\u79bb\u7684\u5f88\u8fd1\uff0c\u90a3\u4e48\u987a\u65f6\u9488\u7b2c\u4e00\u4e2a\u673a\u5668\u8282\u70b9\u4e0a\u5c06\u5b58\u5728\u5927\u91cf\u7684\u6570\u636e\uff0c\u7b2c\u4e8c\u4e2a\u673a\u5668\u8282\u70b9\u4e0a\u6570\u636e\u4f1a\u5f88\u5c11\u3002 \u4e3a\u4e86\u907f\u514d\u51fa\u73b0\u6570\u636e\u503e\u659c\u95ee\u9898\uff0c\u4e00\u81f4\u6027 Hash \u7b97\u6cd5\u5f15\u5165\u4e86\u865a\u62df\u8282\u70b9\u7684\u673a\u5236\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e2a\u673a\u5668\u8282\u70b9\u4f1a\u8fdb\u884c\u591a\u6b21\u54c8\u5e0c\uff0c\u6700\u7ec8\u6bcf\u4e2a\u673a\u5668\u8282\u70b9\u5728\u54c8\u5e0c\u73af\u4e0a\u4f1a\u6709\u591a\u4e2a\u865a\u62df\u8282\u70b9\u5b58\u5728\uff0c\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u6765\u5927\u5927\u524a\u5f31\u751a\u81f3\u907f\u514d\u6570\u636e\u503e\u659c\u95ee\u9898\u3002\u540c\u65f6\u6570\u636e\u5b9a\u4f4d\u7b97\u6cd5\u4e0d\u53d8\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u6b65\u865a\u62df\u8282\u70b9\u5230\u5b9e\u9645\u8282\u70b9\u7684\u6620\u5c04\u3002","title":"\u7f3a\u70b9\uff1a"},{"location":"NoahGameFrame/NFCore/NFConsistentHash_h/#redis","text":"Redis \u96c6\u7fa4\u5e76\u6ca1\u6709\u76f4\u63a5\u4f7f\u7528\u4e00\u81f4\u6027\u54c8\u5e0c\uff0c\u800c\u662f\u4f7f\u7528\u4e86\u54c8\u5e0c\u69fd \uff08slot\uff09 \u7684\u6982\u5ff5\uff0cRedis \u6ca1\u6709\u76f4\u63a5\u4f7f\u7528\u54c8\u5e0c\u7b97\u6cd5 hash()\uff0c\u800c\u662f\u4f7f\u7528\u4e86crc16\u6821\u9a8c\u7b97\u6cd5\u3002\u69fd\u4f4d\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u4e2a\u7684\u7a7a\u95f4\u7684\u5355\u4f4d\u3002\u5176\u5b9e\u54c8\u5e0c\u69fd\u7684\u672c\u8d28\u548c\u4e00\u81f4\u6027\u54c8\u5e0c\u7b97\u6cd5\u975e\u5e38\u76f8\u4f3c\uff0c\u4e0d\u540c\u70b9\u5c31\u662f\u5bf9\u4e8e\u54c8\u5e0c\u7a7a\u95f4\u7684\u5b9a\u4e49\u3002\u4e00\u81f4\u6027\u54c8\u5e0c\u7684\u7a7a\u95f4\u662f\u4e00\u4e2a\u5706\u73af\uff0c\u8282\u70b9\u5206\u5e03\u662f\u57fa\u4e8e\u5706\u73af\u7684\uff0c\u65e0\u6cd5\u5f88\u597d\u7684\u63a7\u5236\u6570\u636e\u5206\u5e03\uff0c\u53ef\u80fd\u4f1a\u4ea7\u751f\u6570\u636e\u503e\u659c\u95ee\u9898\u3002\u800c Redis \u7684\u69fd\u4f4d\u7a7a\u95f4\u662f\u81ea\u5b9a\u4e49\u5206\u914d\u7684\uff0c\u7c7b\u4f3c\u4e8eWindows\u76d8\u5206\u533a\u7684\u6982\u5ff5\u3002\u8fd9\u79cd\u5206\u533a\u662f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5927\u5c0f\uff0c\u81ea\u5b9a\u4e49\u4f4d\u7f6e\u7684\u3002Redis \u96c6\u7fa4\u5305\u542b\u4e86 16384 \u4e2a\u54c8\u5e0c\u69fd\uff0c\u6bcf\u4e2a Key \u7ecf\u8fc7\u8ba1\u7b97\u540e\u4f1a\u843d\u5728\u4e00\u4e2a\u5177\u4f53\u7684\u69fd\u4f4d\u4e0a\uff0c\u800c\u69fd\u4f4d\u5177\u4f53\u5728\u54ea\u4e2a\u673a\u5668\u4e0a\u662f\u7528\u6237\u81ea\u5df1\u6839\u636e\u81ea\u5df1\u673a\u5668\u7684\u60c5\u51b5\u914d\u7f6e\u7684\uff0c\u673a\u5668\u786c\u76d8\u5c0f\u7684\u53ef\u4ee5\u5206\u914d\u5c11\u4e00\u70b9\u69fd\u4f4d\uff0c\u786c\u76d8\u5927\u7684\u53ef\u4ee5\u5206\u914d\u591a\u4e00\u70b9\u3002\u5982\u679c\u8282\u70b9\u786c\u76d8\u90fd\u5dee\u4e0d\u591a\u5219\u53ef\u4ee5\u5e73\u5747\u5206\u914d\u3002\u6240\u4ee5\u54c8\u5e0c\u69fd\u8fd9\u79cd\u6982\u5ff5\u5f88\u597d\u5730\u89e3\u51b3\u4e86\u4e00\u81f4\u6027\u54c8\u5e0c\u7684\u5f0a\u7aef\u3002 \u53e6\u5916\u5728\u5bb9\u9519\u6027\u548c\u6269\u5c55\u6027\u4e0a\u4e0e\u4e00\u81f4\u6027\u54c8\u5e0c\u4e00\u6837\uff0c\u90fd\u662f\u5bf9\u53d7\u5f71\u54cd\u7684\u6570\u636e\u8fdb\u884c\u8f6c\u79fb\u800c\u4e0d\u5f71\u54cd\u5176\u5b83\u7684\u6570\u636e\u3002\u800c\u54c8\u5e0c\u69fd\u672c\u8d28\u4e0a\u662f\u5bf9\u69fd\u4f4d\u7684\u8f6c\u79fb\uff0c\u628a\u6545\u969c\u8282\u70b9\u8d1f\u8d23\u7684\u69fd\u4f4d\u8f6c\u79fb\u5230\u5176\u4ed6\u6b63\u5e38\u7684\u8282\u70b9\u4e0a\u3002\u6269\u5c55\u8282\u70b9\u4e5f\u662f\u4e00\u6837\uff0c\u628a\u5176\u4ed6\u8282\u70b9\u4e0a\u7684\u69fd\u4f4d\u8f6c\u79fb\u5230\u65b0\u7684\u8282\u70b9\u4e0a\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u69fd\u4f4d\u7684\u8f6c\u79fb\u548c\u5206\u6d3e\uff0cRedis\u96c6\u7fa4\u662f\u4e0d\u4f1a\u81ea\u52a8\u8fdb\u884c\u7684\uff0c\u800c\u662f\u9700\u8981\u4eba\u5de5\u914d\u7f6e\u7684\u3002\u6240\u4ee5Redis\u96c6\u7fa4\u7684\u9ad8\u53ef\u7528\u662f\u4f9d\u8d56\u4e8e\u8282\u70b9\u7684\u4e3b\u4ece\u590d\u5236\u4e0e\u4e3b\u4ece\u95f4\u7684\u81ea\u52a8\u6545\u969c\u8f6c\u79fb\u3002","title":"Redis \u96c6\u7fa4\u5206\u69fd\u7684\u5b9e\u73b0"},{"location":"NoahGameFrame/NFCore/NFConsistentHash_h/#nfvirtualnode","text":"\u5b9a\u4e49\u4e86NFIVirtualNode\u7684\u63a5\u53e3\u548c\u7d22\u5f15\u3002 class NFIVirtualNode { public : NFIVirtualNode ( const int nVirID ) : nVirtualIndex ( nVirID ) { } NFIVirtualNode () { nVirtualIndex = 0 ; } virtual ~ NFIVirtualNode () { nVirtualIndex = 0 ; } virtual std :: string GetDataStr () const { return \"\" ; } std :: string ToStr () const { std :: ostringstream strInfo ; strInfo << GetDataStr () << \"-\" << nVirtualIndex ; return strInfo . str (); } private : int nVirtualIndex ; }; template < typename T > class NFVirtualNode : public NFIVirtualNode { public : NFVirtualNode ( const T tData , const int nVirID ) : NFIVirtualNode ( nVirID ) { mxData = tData ; } NFVirtualNode () { } virtual std :: string GetDataStr () const { return lexical_cast < std :: string > ( mxData ); } T mxData ; };","title":"NFVirtualNode"},{"location":"NoahGameFrame/NFCore/NFConsistentHash_h/#nfhasher","text":"\u5c06\u5b57\u7b26\u4e32CRC32\u6821\u9a8c\u7801\u5f53\u505a\u54c8\u5e0c\u503c class NFIHasher { public : virtual ~ NFIHasher (){} virtual uint32_t GetHashValue ( const NFIVirtualNode & vNode ) = 0 ; }; class NFHasher : public NFIHasher { public : virtual uint32_t GetHashValue ( const NFIVirtualNode & vNode ) { std :: string vnode = vNode . ToStr (); return NFrame :: CRC32 ( vnode ); } };","title":"NFHasher"},{"location":"NoahGameFrame/NFCore/NFConsistentHash_h/#nfconsistenthash_1","text":"template < typename T > class NFIConsistentHash { public : virtual std :: size_t Size () const = 0 ; virtual bool Empty () const = 0 ; virtual void ClearAll () = 0 ; virtual void Insert ( const T & name ) = 0 ; virtual void Insert ( const NFVirtualNode < T >& xNode ) = 0 ; virtual bool Exist ( const NFVirtualNode < T >& xInNode ) = 0 ; virtual void Erase ( const T & name ) = 0 ; virtual std :: size_t Erase ( const NFVirtualNode < T >& xNode ) = 0 ; virtual bool GetSuitNodeRandom ( NFVirtualNode < T >& node ) = 0 ; virtual bool GetSuitNodeConsistent ( NFVirtualNode < T >& node ) = 0 ; virtual bool GetSuitNode ( const T & name , NFVirtualNode < T >& node ) = 0 ; //virtual bool GetSuitNode(const std::string& str, NFVirtualNode<T>& node) = 0; virtual bool GetSuitNode ( uint32_t hashValue , NFVirtualNode < T >& node ) = 0 ; virtual bool GetNodeList ( std :: list < NFVirtualNode < T >>& nodeList ) = 0 ; }; template < typename T > class NFConsistentHash : public NFIConsistentHash < T > { public : NFConsistentHash () { m_pHasher = new NFHasher (); } virtual ~ NFConsistentHash () { delete m_pHasher ; m_pHasher = NULL ; } public : virtual std :: size_t Size () const { return mxNodes . size (); } virtual bool Empty () const { return mxNodes . empty (); } virtual void ClearAll () { mxNodes . clear (); } virtual void Insert ( const T & name ) { // \u4e00\u6b21\u6027\u63d2\u5165\u4e94\u767e\u4e2a \u6ca1\u770b\u61c2\u662f\u4e3a\u4ec0\u4e48 for ( int i = 0 ; i < mnNodeCount ; ++ i ) { NFVirtualNode < T > vNode ( name , i ); Insert ( vNode ); } } virtual void Insert ( const NFVirtualNode < T >& xNode ) { uint32_t hash = m_pHasher -> GetHashValue ( xNode ); auto it = mxNodes . find ( hash ); if ( it == mxNodes . end ()) { mxNodes . insert ( typename std :: map < uint32_t , NFVirtualNode < T >>:: value_type ( hash , xNode )); } } virtual bool Exist ( const NFVirtualNode < T >& xInNode ) { uint32_t hash = m_pHasher -> GetHashValue ( xInNode ); typename std :: map < uint32_t , NFVirtualNode < T >>:: iterator it = mxNodes . find ( hash ); if ( it != mxNodes . end ()) { return true ; } return false ; } virtual void Erase ( const T & name ) { for ( int i = 0 ; i < mnNodeCount ; ++ i ) { NFVirtualNode < T > vNode ( name , i ); Erase ( vNode ); } } virtual std :: size_t Erase ( const NFVirtualNode < T >& xNode ) { uint32_t hash = m_pHasher -> GetHashValue ( xNode ); return mxNodes . erase ( hash ); } virtual bool GetSuitNodeRandom ( NFVirtualNode < T >& node ) { int nID = ( int ) std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: system_clock :: now (). time_since_epoch ()). count (); return GetSuitNode ( nID , node ); } virtual bool GetSuitNodeConsistent ( NFVirtualNode < T >& node ) { return GetSuitNode ( 0 , node ); } virtual bool GetSuitNode ( const T & name , NFVirtualNode < T >& node ) { std :: string str = lexical_cast < std :: string > ( name ); uint32_t nCRC32 = NFrame :: CRC32 ( str ); return GetSuitNode ( nCRC32 , node ); } virtual bool GetSuitNode ( uint32_t hashValue , NFVirtualNode < T >& node ) { if ( mxNodes . empty ()) { return false ; } typename std :: map < uint32_t , NFVirtualNode < T >>:: iterator it = mxNodes . lower_bound ( hashValue ); if ( it == mxNodes . end ()) { it = mxNodes . begin (); } node = it -> second ; return true ; } virtual bool GetNodeList ( std :: list < NFVirtualNode < T >>& nodeList ) { for ( typename std :: map < uint32_t , NFVirtualNode < T >>:: iterator it = mxNodes . begin (); it != mxNodes . end (); ++ it ) { nodeList . push_back ( it -> second ); } return true ; } private : int mnNodeCount = 500 ; typename std :: map < uint32_t , NFVirtualNode < T >> mxNodes ; NFIHasher * m_pHasher ; };","title":"NFConsistentHash"},{"location":"NoahGameFrame/NFCore/NFDataList_h/","text":"NFDataList \u89e3\u6790 \u00b6","title":"NFDataList"},{"location":"NoahGameFrame/NFCore/NFDataList_h/#nfdatalist","text":"","title":"NFDataList \u89e3\u6790"},{"location":"NoahGameFrame/NFCore/NFIProperty_h/","text":"NFIProperty \u00b6 \u539f\u4f5c\u8005\u7684\u89e3\u91ca \u00b6 NF\u5f53\u521d\u8bbe\u8ba1\u7684\u76ee\u7684\uff0c\u662f\u60f3\u62e5\u6709\u4e00\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7edf\u4e00\u7ba1\u7406\u5bf9\u8c61\u4ee5\u53ca\u6570\u636e\uff0c\u5e76\u4f7f\u7528\u7edf\u4e00\u7684\u63a5\u53e3\u800c\u53c8\u4e0d\u9700\u8981\u968f\u7740\u4e1a\u52a1\u589e\u52a0\u800c\u6269\u5145\u65b0\u7684\u63a5\u53e3\u548c\u6570\u636e\u5b57\u6bb5\uff0c\u8fd9\u4e9b\u4f53\u9a8c\u6e90\u81eaogre\u5bf9\u4e8enode\u7684\u62bd\u8c61\uff0c\u56e0\u540e\u6765\u53c2\u8003\u4e86Bigworld\u7684\u6570\u636e\u7ba1\u7406\u65b9\u5f0f\uff0c\u8bbe\u8ba1\u4e86\u62bd\u8c61\u7684NFIClass\uff0cNFIObject \u548c NFIElementModule\uff0c\u5b83\u4eec\u662fNF\u4e2d\u6700\u91cd\u8981\u76843\u4e2a\u7c7b\uff0c\u662f\u652f\u6491NF\u65b0\u6982\u5ff5\u9762\u5411\u6570\u636e\u7f16\u7a0b\u7684\u91cd\u8981\u57fa\u77f3\u3002 NFIClass\u7c7b\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662fNF Class\u3002 \u4e3b\u8981\u7528\u6237\u58f0\u660e\u6570\u636e\u7ed3\u6784\u4f53\uff0c\u7c7b\u4f3c\u7a0b\u5e8f\u8bed\u8a00\uff08C , C# JAVA\u7b49\uff09\u7f16\u7a0b\u4e2d\u4f7f\u7528class Dog, class Cat\uff08\u7136\u800c\u5b9e\u9645\u53c8\u4e0d\u4e00\u6837\uff0c\u867d\u7136\u5b9e\u9645\u4e0a\u4ed6\u4ee3\u66ff\u4e86\u53d8\u6210\u8bed\u8a00\u7684class\uff0cstruct\u7b49\u90e8\u5206\u529f\u80fd\uff09\u3002\u4f20\u7edf\u60c5\u51b5\u4e0b\uff0c\u5927\u5bb6\u5bf9\u4e8e\u5bf9\u8c61\u589e\u52a0\u5c5e\u6027\uff0c\u4e00\u76f4\u90fd\u662f\u7c7b\u4f3c\u7ed3\u6784\u4f53\u52a0\u5165\u5404\u79cd\u5b57\u6bb5\u6765\u5b9e\u73b0\uff0c\u6bd4\u5982\u4e00\u4e2aDog\u5148\u6709HP\uff0c\u5219\u662f\u5982\u4e0b\uff1a class Dog { int nHP ; }; \u5982\u679c\u60f3\u8981\u52a0\u5165MP\uff1b\u5219\u9700\u8981\u4fee\u6539\u6210\u5982\u4e0b\uff1a class Dog { int nHP ; int nMP ; }; \u7136\u540e\u53c8\u8fd8\u9700\u8981\u589e\u52a0\u540d\u5b57\uff0c\u914d\u7f6eID\uff0c\u7b49\u7ea7\uff0c\u5219\u9700\u8981\u4fee\u6539\u5982\u4e0b class Dog { int nHP ; int nMP ; string strName ; string strID ; int nLevel ; }; and so on................ \u7136\u540e\u968f\u7740\u4e1a\u52a1\u7684\u589e\u52a0\uff0c\u8fd8\u9700\u8981\u589e\u52a0\u6b7b\u4ea1\u662f\u5426\u80fd\u590d\u6d3b\uff0c\u5934\u50cf\uff0c\u5ba2\u6237\u7aef\u6a21\u578b\u5305\u7b49\u3002\u3002\u3002\u3002\u90a3\u4e48\u6211\u4eec\u53c8\u8981\u7ee7\u7eed\u4fee\u6539\uff0c\u5982\u679c\u54ea\u5929\u56e0\u4e3aDog, Cat\u592a\u50cf\u4e86\uff0c\u7136\u540e\u8fd8\u9700\u8981\u62bd\u8c61\u5171\u540c\u7684\u5c5e\u6027\u7ed3\u6784\u4f53\uff0c\u91cd\u6784\u63a5\u53e3\u3002\u3002\u3002\u9677\u5165\u65e0\u4f11\u6b62\u7684\u57fa\u7840\u7cfb\u7edf\u7ef4\u62a4\u5f53\u4e2d\uff01\u7136\u540e\u9879\u76ee\u6ca1\u5b8c\u6ca1\u4e86\uff0c\u7136\u540e\u9879\u76ee\u672a\u4e0a\u7ebf\u4fbf\u5f00\u59cb\u5904\u4e8e\u7ef4\u62a4\u72b6\u6001\uff0c\u7136\u540e\u4eba\u5fc3\u6da3\u6563\u9879\u76ee\u8dea\u6389\u3002\u867d\u7136\u8bdd\u8bed\u5938\u5f20\uff0c\u4f46\u4e5f\u4e0d\u662f\u6ca1\u6709\u516c\u53f8\u8fd9\u6837\u6b7b\u8fc7\uff0c\u5c31\u770b\u8c01\u6b7b\u7684\u8f70\u8f70\u70c8\u70c8\u800c\u5df2\u3002 \u800c\u5728NF\u67b6\u6784\u4e2d\uff0c\u5219\u5b8c\u5168\u6ca1\u6709\u8fd9\u4e9b\u70e6\u607c\uff0c\u4e00\u5207\u5747\u7edf\u4e00\u5316\u914d\u7f6e\u7ba1\u7406\uff0c\u4e0d\u9700\u589e\u52a0\u989d\u5916\u4ee3\u7801\u3002 \u4e0b\u9762\u5c31\u4eceNF\u7684\u8bbe\u8ba1\u6e90\u5934\u5f00\u59cb\u8bf4\u8bf4\uff0c\u5982\u4f55\u6539\u5584\u8fd9\u79cd\u5c40\u9762\u3002 \u6b63\u5e38\u6765\u8bf4\uff0c\u4efb\u4f55\u62bd\u8c61\u5bf9\u8c61\uff0c\u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u4ed6\u4fe9\u6837\uff0c\u5c5e\u6027\u548c\u884c\u4e3a\u3002\u8fd9\u91cc\u5148\u6765\u8bf4\u5c5e\u6027\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u5c5e\u6027\u90fd\u53ef\u4ee5\u62bd\u8c61\u6210\u901a\u7528\u7684\u6570\u636e\u5bf9\u8c61\uff08\u60f3\u770b\u884c\u4e3a\u5982\u4f55\u62bd\u8c61\u6210\u901a\u7528\u7684\u63a5\u53e3\u5c42\uff0c\u8bf7\u7ee7\u7eed\u770b\u540e\u9762\u51e0\u7ae0\uff09\u3002 \u6211\u4eec\u5206\u6790\uff0cHP, MP, Name\u8fd9\u51e0\u4e2a\u5176\u5b9e\u90fd\u662f\u6210\u5458\u5c5e\u6027\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u901a\u7528\u7684\u5c5e\u6027\u6765\u5bb9\u7eb3\u4ed6\u4eec\uff0c\u8fd9\u4e2a\u5c5e\u6027\u53eb Property\uff0c\u5219Dog\u53ef\u4ee5\u62bd\u8c61\u6210\u5982\u4e0b\uff1a class Dog { Property nHP ; Property nMP ; Property strName ; Property strID ; Property nLevel ; }; \u6b64\u65f6\uff0c\u6211\u4eec\u7684\u7cbe\u529b\u5c31\u5728\u4e8e\u5982\u4f55\u62bd\u8c61\u4e00\u4e2a\u901a\u7528\u7684\u5c5e\u6027Property.\u6211\u4eec\u77e5\u9053\uff0cProperty\u662f\u80af\u5b9a\u53ef\u4ee5\u62bd\u8c61\u51fa\u6765\u7684\uff0c\u56e0\u4e3a\u5728\u76ee\u524d\u5df2\u77e5\u9053\u7684\u6570\u636e\u7c7b\u578b\u4e2d\uff0c\u63cf\u8ff0\u4e00\u4e2a\u5bf9\u8c61\u7684\u57fa\u7840\u5c5e\u6027, \u4e5f\u5c31int, double, string, vector2, vector3, GUID \u7b49\u51e0\u4e2a\u7c7b\u578b\uff0c\u800cstring\u53c8\u53ef\u4ee5\u5bb9\u7eb3\u4e00\u5207\u6570\u636e\u7c7b\u578b\uff0c\u56e0\u6b64\u9488\u5bf9\u8fd9\u4e9b\u7c7b\u578b\u7684\u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u62bd\u8c61\u51fa\u7edf\u4e00\u7684\u5c5e\u6027\u63a5\u53e3\uff0cProperty\u5219\u957f\u6210\u5982\u4e0b\u6837\u8c8c\uff1a \u4e8e\u662fProperty\u5e94\u8be5\u957f\u8fd9\u6837: class Property { public bool SetInt ( const NFINT64 value ); public bool SetFloat ( const double value ); public bool SetString ( const std :: string & value ); public bool SetObject ( const NFGUID & value ); public bool SetVector2 ( const NFVector2 & value ); public bool SetVector3 ( const NFVector3 & value ); public NFINT64 GetInt () const ; public double GetFloat () const ; public const std :: string & GetString () const ; public const NFGUID & GetObject () const ; public const NFVector2 & GetVector2 () const ; public const NFVector3 & GetVector3 () const ; } \u5230\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u907f\u514d\u4e86\u6570\u636e\u64cd\u4f5c\u7684\u7ec6\u8282\uff0c\u5168\u90e8\u62bd\u8c61\u6210\u5408\u9002\u7684\u63a5\u53e3. \u867d\u7136\u90fd\u62bd\u8c61\u6210\u7edf\u4e00\u7684\u5c5e\u6027\u4e86\uff0c\u5982\u679c\u6bcf\u4e00\u6b21\u65b0\u4e1a\u52a1\uff0c\u90fd\u8981\u589e\u52a0\u8fd9\u4e9b\uff0c\u5c82\u4e0d\u662f\u5f88\u9ebb\u70e6\uff1f \u56e0\u6b64\u5f53\u65f6\u60f3\u5230\u4e86\uff0c\u589e\u52a0\u4e00\u4e2a\u7ba1\u7406\u5668\u5427\uff0c\u5176\u5b9e\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u91cd\u8981\u7684\u662f\u5404\u79cd\u7b80\u5355\u7684\u5185\u5bb9\uff0c\u7ec4\u5408\u8d77\u6765\u5c31\u80fd\u521b\u9020\u51fa\u4e00\u4e9b\u6709\u8da3\u7684\u65b0\u5185\u5bb9\uff0c\u4e8e\u662fDog\u7c7b\u53d8\u6210\u4e86\u5982\u4e0b: class Dog { map < string , Property > mPropertyMap ; } \u7136\u540e\u6211\u4eec\u53c8\u60f3\u6839\u636e\u540d\u5b57\uff0c\u4ece\u5bb9\u5668\u4e2d\u83b7\u53d6\u5c5e\u6027\uff0c\u7136\u540e\u4fee\u6539\u5c5e\u6027\uff0c\u6216\u8005\u6dfb\u52a0\u65b0\u7684\u5c5e\u6027\uff0c\u8fd9\u6837\u6bcf\u6b21\u65b0\u4e1a\u52a1\uff0c\u6211\u4eec\u5c31\u4e0d\u4f1a\u518d\u6dfb\u52a0\u65b0\u7684\u5b57\u6bb5\uff0c\u5f88\u65b9\u4fbf\uff0c\u4e0d\u662f\u5417\uff1f \u4f46\u662f\u8fd9\u4e2a\u8fdc\u8fbe\u4e0d\u5230\u6211\u4eec\u60f3\u8981\u7684\u89e3\u51b3\u65b9\u6848\u90a3\u6837\u65b9\u4fbf\uff0c\u56e0\u4e3a\u6709\u4eba\u62c5\u5fc3\uff0c\u90a3\u4e48name\u54ea\u6765\u7edf\u4e00\u7ba1\u7406\uff0c\u5404\u79cd\u8bbe\u7f6e\u63a5\u53e3\u5982\u4f55\u8bbe\u8ba1\uff0c\u7136\u540e\u5982\u679c\u6709\u591a\u79cd\u7c7b\u4f3c\u7684\u7ed3\u6784\u5982\u4f55\u5904\u7406\uff1f\u4e0d\u8981\u62c5\u5fc3\uff0c\u4e14\u7ee7\u7eed\u770b\uff0c\u6211\u4eec\u4e3a\u4e86\u907f\u514d\u540e\u7eed\u589e\u52a0\u65b0\u7684\u6a21\u5757\uff0c\u6211\u4eec\u5148\u628a\u5c5e\u6027\u7ba1\u7406\u5668\u62c6\u5206\u51fa\u6765\uff0c\u5219\u4e3a\u5982\u4e0b: class PropertyManager { public bool SetInt ( const std :: string & strPropertyName , const NFINT64 value ); public bool SetFloat ( const std :: string & strPropertyName , const double value ); public bool SetString ( const std :: string & strPropertyName , const std :: string & value ); public bool SetObject ( const std :: string & strPropertyName , const NFGUID & value ); public bool SetVector2 ( const std :: string & strPropertyName , const NFVector2 & value ); public bool SetVector3 ( const std :: string & strPropertyName , const NFVector3 & value ); public NFINT64 GetInt ( const std :: string & strPropertyName ) const ; public double GetFloat ( const std :: string & strPropertyName ) const ; public const std :: string & GetString ( const std :: string & strPropertyName ) const ; public const NFGUID & GetObject ( const std :: string & strPropertyName ) const ; public const NFVector2 & GetVector2 ( const std :: string & strPropertyName ) const ; public const NFVector3 & GetVector3 ( const std :: string & strPropertyName ) const ; } class Dog { PropertyManager mxPropertyManager ; }; \u5230\u73b0\u5728\uff0c\u6211\u4eec\u589e\u52a0\u901a\u7528\u7684\u7ba1\u7406\u673a\u5668\uff0c\u65b9\u4fbf\u5404\u79cd\u6dfb\u52a0\uff0c\u5220\u9664\uff0c\u548c\u64cd\u4f5c\u63a5\u53e3\uff0c\u6b63\u662f\u8fd9\u4e9b\u57fa\u7840\u63a5\u53e3\uff0c\u53ef\u4ee5\u8282\u7701\u5f00\u53d1\u4e2d50%\u4ee5\u4e0a\u7684\u65f6\u95f4\uff0c\u800c\u5173\u952e\u5728\u4e8e\uff0c\u7a33\u5b9a\uff0c\u4e0d\u51fa\u9519\uff0c\u4e5f\u7701\u5374\u4e86\u5927\u90e8\u5206\u8c03\u8bd5\u65f6\u95f4\u3002 \u90a3\u4e48\u5bf9\u4e8e\u73b0\u5728\u8fd9\u4e2aNFClass\u7c7b\u6765\u8bf4\uff0c\u4ed6\u53ef\u4ee5\u53ebNPC\uff0c\u53ef\u4ee5\u53ebDog\uff0c\u53ef\u4ee5\u53ebCat\uff0c\u90fd\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u56e0\u4e3a\u4ed6\u5df2\u7ecf\u652f\u6301\u52a8\u6001\u7684\u5404\u79cd\u5c5e\u6027\u6dfb\u52a0\u7b49\u4e8b\u9879.\u90a3\u4e48\u62bd\u8c61\u7684\u6570\u636e\u5bb9\u5668\u6709\u4e86\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5982\u4f55\u65b9\u4fbf\u7684\uff0c\u53ef\u4ee5\u5728excel\uff0c\u6216\u8005xml\u4e2d\uff0c\u628a\u6570\u636e\u80fd\u81ea\u52a8\u7684\u5bfc\u5165\u5462\uff0c\u867d\u7136\u4e2d\u9014\u9700\u8981\u5404\u79cd\u4ee3\u7801\u8981\u7801\uff0c\u4f46\u662f\u7ec8\u7a76\u662f\u53ef\u4ee5\u5b9e\u73b0\u7684\u3002 \u9996\u5148\uff0c\u6211\u4eec\u53bb\u6389\u4e86\u5728\u7a0b\u5e8f\u8bed\u8a00\u4e2d\u589e\u52a0\u5404\u79cd\u5b57\u6bb5\uff0c\u90a3\u4e48\u5f53\u7136\u907f\u514d\u4e0d\u4e86\u7684\uff0c\u6211\u4eec\u7684\u7ed3\u6784\u63cf\u8ff0\u6587\u672c\uff0c\u80af\u5b9a\u4f1a\u6709\u7c7b\u4f3c\u7684\u673a\u5236\u6765\u4fdd\u8bc1\u53ef\u4ee5\u6dfb\u52a0\u65b0\u5b57\u6bb5\uff0c\u6682\u4e14\u7528XML\u6765\u8868\u8fbe\u5427\uff0c\u5982\u4e0b\uff1a <XML> <Propertys> <Property Id= \"HP\" Type= \"int\" /> <Property Id= \"MP\" Type= \"string\" /> <Property Id= \"Name\" Type= \"int\" /> <Property Id= \"ID\" Type= \"string\" /> <Property Id= \"Level\" Type= \"int\" /> </Propertys> </XML> \u8fd8\u8bb0\u5f97\u4e4b\u524d\u6211\u4eec\u8bf4\u7684 PropertyManager\u7c7b\u4e2d\u7684map mPropertyMap \u7684Key\u54ea\u6765\u5417\uff1f\u5c31\u662f\u4e0a\u9762\u7684Id\u5b57\u6bb5\uff0cHP,MP,NAME\u7b49\u3002 \u5b8c\u6574\u4ee3\u7801 \u00b6 #ifndef NFI_PROPERTY_H #define NFI_PROPERTY_H #include \"NFDataList.hpp\" #include \"NFList.hpp\" #include \"NFComm/NFPluginModule/NFPlatform.h\" typedef std :: function < int ( const NFGUID & , const std :: string & , const NFData & , const NFData & ) > PROPERTY_EVENT_FUNCTOR ; typedef NF_SHARE_PTR < PROPERTY_EVENT_FUNCTOR > PROPERTY_EVENT_FUNCTOR_PTR ; class _NFExport NFIProperty : public NFMemoryCounter { public : NFIProperty () : NFMemoryCounter ( GET_CLASS_NAME ( NFIProperty ), 1 ) { } virtual ~ NFIProperty () {} virtual void SetValue ( const NFData & TData ) = 0 ; virtual void SetValue ( const NFIProperty * pProperty ) = 0 ; virtual bool SetInt ( const NFINT64 value ) = 0 ; virtual bool SetFloat ( const double value ) = 0 ; virtual bool SetString ( const std :: string & value ) = 0 ; virtual bool SetObject ( const NFGUID & value ) = 0 ; virtual bool SetVector2 ( const NFVector2 & value ) = 0 ; virtual bool SetVector3 ( const NFVector3 & value ) = 0 ; virtual const NFDATA_TYPE GetType () const = 0 ; virtual const bool GeUsed () const = 0 ; virtual const std :: string & GetKey () const = 0 ; virtual const bool GetSave () const = 0 ; virtual const bool GetPublic () const = 0 ; virtual const bool GetPrivate () const = 0 ; virtual const bool GetCache () const = 0 ; virtual const bool GetRef () const = 0 ; virtual const bool GetForce () const = 0 ; virtual const bool GetUpload () const = 0 ; virtual void SetSave ( bool bSave ) = 0 ; virtual void SetPublic ( bool bPublic ) = 0 ; virtual void SetPrivate ( bool bPrivate ) = 0 ; virtual void SetCache ( bool bCache ) = 0 ; virtual void SetRef ( bool bRef ) = 0 ; virtual void SetForce ( bool bRef ) = 0 ; virtual void SetUpload ( bool bUpload ) = 0 ; virtual NFINT64 GetInt () const = 0 ; virtual int GetInt32 () const = 0 ; virtual double GetFloat () const = 0 ; virtual const std :: string & GetString () const = 0 ; virtual const NFGUID & GetObject () const = 0 ; virtual const NFVector2 & GetVector2 () const = 0 ; virtual const NFVector3 & GetVector3 () const = 0 ; virtual const NFData & GetValue () const = 0 ; virtual const NF_SHARE_PTR < NFList < std :: string >> GetEmbeddedList () const = 0 ; virtual const NF_SHARE_PTR < NFMapEx < std :: string , std :: string >> GetEmbeddedMap () const = 0 ; virtual bool Changed () const = 0 ; virtual std :: string ToString () = 0 ; virtual bool FromString ( const std :: string & strData ) = 0 ; virtual bool DeSerialization () = 0 ; virtual void RegisterCallback ( const PROPERTY_EVENT_FUNCTOR_PTR & cb ) = 0 ; }; #endif","title":"NFIProperty"},{"location":"NoahGameFrame/NFCore/NFIProperty_h/#nfiproperty","text":"","title":"NFIProperty"},{"location":"NoahGameFrame/NFCore/NFIProperty_h/#_1","text":"NF\u5f53\u521d\u8bbe\u8ba1\u7684\u76ee\u7684\uff0c\u662f\u60f3\u62e5\u6709\u4e00\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7edf\u4e00\u7ba1\u7406\u5bf9\u8c61\u4ee5\u53ca\u6570\u636e\uff0c\u5e76\u4f7f\u7528\u7edf\u4e00\u7684\u63a5\u53e3\u800c\u53c8\u4e0d\u9700\u8981\u968f\u7740\u4e1a\u52a1\u589e\u52a0\u800c\u6269\u5145\u65b0\u7684\u63a5\u53e3\u548c\u6570\u636e\u5b57\u6bb5\uff0c\u8fd9\u4e9b\u4f53\u9a8c\u6e90\u81eaogre\u5bf9\u4e8enode\u7684\u62bd\u8c61\uff0c\u56e0\u540e\u6765\u53c2\u8003\u4e86Bigworld\u7684\u6570\u636e\u7ba1\u7406\u65b9\u5f0f\uff0c\u8bbe\u8ba1\u4e86\u62bd\u8c61\u7684NFIClass\uff0cNFIObject \u548c NFIElementModule\uff0c\u5b83\u4eec\u662fNF\u4e2d\u6700\u91cd\u8981\u76843\u4e2a\u7c7b\uff0c\u662f\u652f\u6491NF\u65b0\u6982\u5ff5\u9762\u5411\u6570\u636e\u7f16\u7a0b\u7684\u91cd\u8981\u57fa\u77f3\u3002 NFIClass\u7c7b\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662fNF Class\u3002 \u4e3b\u8981\u7528\u6237\u58f0\u660e\u6570\u636e\u7ed3\u6784\u4f53\uff0c\u7c7b\u4f3c\u7a0b\u5e8f\u8bed\u8a00\uff08C , C# JAVA\u7b49\uff09\u7f16\u7a0b\u4e2d\u4f7f\u7528class Dog, class Cat\uff08\u7136\u800c\u5b9e\u9645\u53c8\u4e0d\u4e00\u6837\uff0c\u867d\u7136\u5b9e\u9645\u4e0a\u4ed6\u4ee3\u66ff\u4e86\u53d8\u6210\u8bed\u8a00\u7684class\uff0cstruct\u7b49\u90e8\u5206\u529f\u80fd\uff09\u3002\u4f20\u7edf\u60c5\u51b5\u4e0b\uff0c\u5927\u5bb6\u5bf9\u4e8e\u5bf9\u8c61\u589e\u52a0\u5c5e\u6027\uff0c\u4e00\u76f4\u90fd\u662f\u7c7b\u4f3c\u7ed3\u6784\u4f53\u52a0\u5165\u5404\u79cd\u5b57\u6bb5\u6765\u5b9e\u73b0\uff0c\u6bd4\u5982\u4e00\u4e2aDog\u5148\u6709HP\uff0c\u5219\u662f\u5982\u4e0b\uff1a class Dog { int nHP ; }; \u5982\u679c\u60f3\u8981\u52a0\u5165MP\uff1b\u5219\u9700\u8981\u4fee\u6539\u6210\u5982\u4e0b\uff1a class Dog { int nHP ; int nMP ; }; \u7136\u540e\u53c8\u8fd8\u9700\u8981\u589e\u52a0\u540d\u5b57\uff0c\u914d\u7f6eID\uff0c\u7b49\u7ea7\uff0c\u5219\u9700\u8981\u4fee\u6539\u5982\u4e0b class Dog { int nHP ; int nMP ; string strName ; string strID ; int nLevel ; }; and so on................ \u7136\u540e\u968f\u7740\u4e1a\u52a1\u7684\u589e\u52a0\uff0c\u8fd8\u9700\u8981\u589e\u52a0\u6b7b\u4ea1\u662f\u5426\u80fd\u590d\u6d3b\uff0c\u5934\u50cf\uff0c\u5ba2\u6237\u7aef\u6a21\u578b\u5305\u7b49\u3002\u3002\u3002\u3002\u90a3\u4e48\u6211\u4eec\u53c8\u8981\u7ee7\u7eed\u4fee\u6539\uff0c\u5982\u679c\u54ea\u5929\u56e0\u4e3aDog, Cat\u592a\u50cf\u4e86\uff0c\u7136\u540e\u8fd8\u9700\u8981\u62bd\u8c61\u5171\u540c\u7684\u5c5e\u6027\u7ed3\u6784\u4f53\uff0c\u91cd\u6784\u63a5\u53e3\u3002\u3002\u3002\u9677\u5165\u65e0\u4f11\u6b62\u7684\u57fa\u7840\u7cfb\u7edf\u7ef4\u62a4\u5f53\u4e2d\uff01\u7136\u540e\u9879\u76ee\u6ca1\u5b8c\u6ca1\u4e86\uff0c\u7136\u540e\u9879\u76ee\u672a\u4e0a\u7ebf\u4fbf\u5f00\u59cb\u5904\u4e8e\u7ef4\u62a4\u72b6\u6001\uff0c\u7136\u540e\u4eba\u5fc3\u6da3\u6563\u9879\u76ee\u8dea\u6389\u3002\u867d\u7136\u8bdd\u8bed\u5938\u5f20\uff0c\u4f46\u4e5f\u4e0d\u662f\u6ca1\u6709\u516c\u53f8\u8fd9\u6837\u6b7b\u8fc7\uff0c\u5c31\u770b\u8c01\u6b7b\u7684\u8f70\u8f70\u70c8\u70c8\u800c\u5df2\u3002 \u800c\u5728NF\u67b6\u6784\u4e2d\uff0c\u5219\u5b8c\u5168\u6ca1\u6709\u8fd9\u4e9b\u70e6\u607c\uff0c\u4e00\u5207\u5747\u7edf\u4e00\u5316\u914d\u7f6e\u7ba1\u7406\uff0c\u4e0d\u9700\u589e\u52a0\u989d\u5916\u4ee3\u7801\u3002 \u4e0b\u9762\u5c31\u4eceNF\u7684\u8bbe\u8ba1\u6e90\u5934\u5f00\u59cb\u8bf4\u8bf4\uff0c\u5982\u4f55\u6539\u5584\u8fd9\u79cd\u5c40\u9762\u3002 \u6b63\u5e38\u6765\u8bf4\uff0c\u4efb\u4f55\u62bd\u8c61\u5bf9\u8c61\uff0c\u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u4ed6\u4fe9\u6837\uff0c\u5c5e\u6027\u548c\u884c\u4e3a\u3002\u8fd9\u91cc\u5148\u6765\u8bf4\u5c5e\u6027\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u5c5e\u6027\u90fd\u53ef\u4ee5\u62bd\u8c61\u6210\u901a\u7528\u7684\u6570\u636e\u5bf9\u8c61\uff08\u60f3\u770b\u884c\u4e3a\u5982\u4f55\u62bd\u8c61\u6210\u901a\u7528\u7684\u63a5\u53e3\u5c42\uff0c\u8bf7\u7ee7\u7eed\u770b\u540e\u9762\u51e0\u7ae0\uff09\u3002 \u6211\u4eec\u5206\u6790\uff0cHP, MP, Name\u8fd9\u51e0\u4e2a\u5176\u5b9e\u90fd\u662f\u6210\u5458\u5c5e\u6027\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u901a\u7528\u7684\u5c5e\u6027\u6765\u5bb9\u7eb3\u4ed6\u4eec\uff0c\u8fd9\u4e2a\u5c5e\u6027\u53eb Property\uff0c\u5219Dog\u53ef\u4ee5\u62bd\u8c61\u6210\u5982\u4e0b\uff1a class Dog { Property nHP ; Property nMP ; Property strName ; Property strID ; Property nLevel ; }; \u6b64\u65f6\uff0c\u6211\u4eec\u7684\u7cbe\u529b\u5c31\u5728\u4e8e\u5982\u4f55\u62bd\u8c61\u4e00\u4e2a\u901a\u7528\u7684\u5c5e\u6027Property.\u6211\u4eec\u77e5\u9053\uff0cProperty\u662f\u80af\u5b9a\u53ef\u4ee5\u62bd\u8c61\u51fa\u6765\u7684\uff0c\u56e0\u4e3a\u5728\u76ee\u524d\u5df2\u77e5\u9053\u7684\u6570\u636e\u7c7b\u578b\u4e2d\uff0c\u63cf\u8ff0\u4e00\u4e2a\u5bf9\u8c61\u7684\u57fa\u7840\u5c5e\u6027, \u4e5f\u5c31int, double, string, vector2, vector3, GUID \u7b49\u51e0\u4e2a\u7c7b\u578b\uff0c\u800cstring\u53c8\u53ef\u4ee5\u5bb9\u7eb3\u4e00\u5207\u6570\u636e\u7c7b\u578b\uff0c\u56e0\u6b64\u9488\u5bf9\u8fd9\u4e9b\u7c7b\u578b\u7684\u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u62bd\u8c61\u51fa\u7edf\u4e00\u7684\u5c5e\u6027\u63a5\u53e3\uff0cProperty\u5219\u957f\u6210\u5982\u4e0b\u6837\u8c8c\uff1a \u4e8e\u662fProperty\u5e94\u8be5\u957f\u8fd9\u6837: class Property { public bool SetInt ( const NFINT64 value ); public bool SetFloat ( const double value ); public bool SetString ( const std :: string & value ); public bool SetObject ( const NFGUID & value ); public bool SetVector2 ( const NFVector2 & value ); public bool SetVector3 ( const NFVector3 & value ); public NFINT64 GetInt () const ; public double GetFloat () const ; public const std :: string & GetString () const ; public const NFGUID & GetObject () const ; public const NFVector2 & GetVector2 () const ; public const NFVector3 & GetVector3 () const ; } \u5230\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u907f\u514d\u4e86\u6570\u636e\u64cd\u4f5c\u7684\u7ec6\u8282\uff0c\u5168\u90e8\u62bd\u8c61\u6210\u5408\u9002\u7684\u63a5\u53e3. \u867d\u7136\u90fd\u62bd\u8c61\u6210\u7edf\u4e00\u7684\u5c5e\u6027\u4e86\uff0c\u5982\u679c\u6bcf\u4e00\u6b21\u65b0\u4e1a\u52a1\uff0c\u90fd\u8981\u589e\u52a0\u8fd9\u4e9b\uff0c\u5c82\u4e0d\u662f\u5f88\u9ebb\u70e6\uff1f \u56e0\u6b64\u5f53\u65f6\u60f3\u5230\u4e86\uff0c\u589e\u52a0\u4e00\u4e2a\u7ba1\u7406\u5668\u5427\uff0c\u5176\u5b9e\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u91cd\u8981\u7684\u662f\u5404\u79cd\u7b80\u5355\u7684\u5185\u5bb9\uff0c\u7ec4\u5408\u8d77\u6765\u5c31\u80fd\u521b\u9020\u51fa\u4e00\u4e9b\u6709\u8da3\u7684\u65b0\u5185\u5bb9\uff0c\u4e8e\u662fDog\u7c7b\u53d8\u6210\u4e86\u5982\u4e0b: class Dog { map < string , Property > mPropertyMap ; } \u7136\u540e\u6211\u4eec\u53c8\u60f3\u6839\u636e\u540d\u5b57\uff0c\u4ece\u5bb9\u5668\u4e2d\u83b7\u53d6\u5c5e\u6027\uff0c\u7136\u540e\u4fee\u6539\u5c5e\u6027\uff0c\u6216\u8005\u6dfb\u52a0\u65b0\u7684\u5c5e\u6027\uff0c\u8fd9\u6837\u6bcf\u6b21\u65b0\u4e1a\u52a1\uff0c\u6211\u4eec\u5c31\u4e0d\u4f1a\u518d\u6dfb\u52a0\u65b0\u7684\u5b57\u6bb5\uff0c\u5f88\u65b9\u4fbf\uff0c\u4e0d\u662f\u5417\uff1f \u4f46\u662f\u8fd9\u4e2a\u8fdc\u8fbe\u4e0d\u5230\u6211\u4eec\u60f3\u8981\u7684\u89e3\u51b3\u65b9\u6848\u90a3\u6837\u65b9\u4fbf\uff0c\u56e0\u4e3a\u6709\u4eba\u62c5\u5fc3\uff0c\u90a3\u4e48name\u54ea\u6765\u7edf\u4e00\u7ba1\u7406\uff0c\u5404\u79cd\u8bbe\u7f6e\u63a5\u53e3\u5982\u4f55\u8bbe\u8ba1\uff0c\u7136\u540e\u5982\u679c\u6709\u591a\u79cd\u7c7b\u4f3c\u7684\u7ed3\u6784\u5982\u4f55\u5904\u7406\uff1f\u4e0d\u8981\u62c5\u5fc3\uff0c\u4e14\u7ee7\u7eed\u770b\uff0c\u6211\u4eec\u4e3a\u4e86\u907f\u514d\u540e\u7eed\u589e\u52a0\u65b0\u7684\u6a21\u5757\uff0c\u6211\u4eec\u5148\u628a\u5c5e\u6027\u7ba1\u7406\u5668\u62c6\u5206\u51fa\u6765\uff0c\u5219\u4e3a\u5982\u4e0b: class PropertyManager { public bool SetInt ( const std :: string & strPropertyName , const NFINT64 value ); public bool SetFloat ( const std :: string & strPropertyName , const double value ); public bool SetString ( const std :: string & strPropertyName , const std :: string & value ); public bool SetObject ( const std :: string & strPropertyName , const NFGUID & value ); public bool SetVector2 ( const std :: string & strPropertyName , const NFVector2 & value ); public bool SetVector3 ( const std :: string & strPropertyName , const NFVector3 & value ); public NFINT64 GetInt ( const std :: string & strPropertyName ) const ; public double GetFloat ( const std :: string & strPropertyName ) const ; public const std :: string & GetString ( const std :: string & strPropertyName ) const ; public const NFGUID & GetObject ( const std :: string & strPropertyName ) const ; public const NFVector2 & GetVector2 ( const std :: string & strPropertyName ) const ; public const NFVector3 & GetVector3 ( const std :: string & strPropertyName ) const ; } class Dog { PropertyManager mxPropertyManager ; }; \u5230\u73b0\u5728\uff0c\u6211\u4eec\u589e\u52a0\u901a\u7528\u7684\u7ba1\u7406\u673a\u5668\uff0c\u65b9\u4fbf\u5404\u79cd\u6dfb\u52a0\uff0c\u5220\u9664\uff0c\u548c\u64cd\u4f5c\u63a5\u53e3\uff0c\u6b63\u662f\u8fd9\u4e9b\u57fa\u7840\u63a5\u53e3\uff0c\u53ef\u4ee5\u8282\u7701\u5f00\u53d1\u4e2d50%\u4ee5\u4e0a\u7684\u65f6\u95f4\uff0c\u800c\u5173\u952e\u5728\u4e8e\uff0c\u7a33\u5b9a\uff0c\u4e0d\u51fa\u9519\uff0c\u4e5f\u7701\u5374\u4e86\u5927\u90e8\u5206\u8c03\u8bd5\u65f6\u95f4\u3002 \u90a3\u4e48\u5bf9\u4e8e\u73b0\u5728\u8fd9\u4e2aNFClass\u7c7b\u6765\u8bf4\uff0c\u4ed6\u53ef\u4ee5\u53ebNPC\uff0c\u53ef\u4ee5\u53ebDog\uff0c\u53ef\u4ee5\u53ebCat\uff0c\u90fd\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u56e0\u4e3a\u4ed6\u5df2\u7ecf\u652f\u6301\u52a8\u6001\u7684\u5404\u79cd\u5c5e\u6027\u6dfb\u52a0\u7b49\u4e8b\u9879.\u90a3\u4e48\u62bd\u8c61\u7684\u6570\u636e\u5bb9\u5668\u6709\u4e86\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5982\u4f55\u65b9\u4fbf\u7684\uff0c\u53ef\u4ee5\u5728excel\uff0c\u6216\u8005xml\u4e2d\uff0c\u628a\u6570\u636e\u80fd\u81ea\u52a8\u7684\u5bfc\u5165\u5462\uff0c\u867d\u7136\u4e2d\u9014\u9700\u8981\u5404\u79cd\u4ee3\u7801\u8981\u7801\uff0c\u4f46\u662f\u7ec8\u7a76\u662f\u53ef\u4ee5\u5b9e\u73b0\u7684\u3002 \u9996\u5148\uff0c\u6211\u4eec\u53bb\u6389\u4e86\u5728\u7a0b\u5e8f\u8bed\u8a00\u4e2d\u589e\u52a0\u5404\u79cd\u5b57\u6bb5\uff0c\u90a3\u4e48\u5f53\u7136\u907f\u514d\u4e0d\u4e86\u7684\uff0c\u6211\u4eec\u7684\u7ed3\u6784\u63cf\u8ff0\u6587\u672c\uff0c\u80af\u5b9a\u4f1a\u6709\u7c7b\u4f3c\u7684\u673a\u5236\u6765\u4fdd\u8bc1\u53ef\u4ee5\u6dfb\u52a0\u65b0\u5b57\u6bb5\uff0c\u6682\u4e14\u7528XML\u6765\u8868\u8fbe\u5427\uff0c\u5982\u4e0b\uff1a <XML> <Propertys> <Property Id= \"HP\" Type= \"int\" /> <Property Id= \"MP\" Type= \"string\" /> <Property Id= \"Name\" Type= \"int\" /> <Property Id= \"ID\" Type= \"string\" /> <Property Id= \"Level\" Type= \"int\" /> </Propertys> </XML> \u8fd8\u8bb0\u5f97\u4e4b\u524d\u6211\u4eec\u8bf4\u7684 PropertyManager\u7c7b\u4e2d\u7684map mPropertyMap \u7684Key\u54ea\u6765\u5417\uff1f\u5c31\u662f\u4e0a\u9762\u7684Id\u5b57\u6bb5\uff0cHP,MP,NAME\u7b49\u3002","title":"\u539f\u4f5c\u8005\u7684\u89e3\u91ca"},{"location":"NoahGameFrame/NFCore/NFIProperty_h/#_2","text":"#ifndef NFI_PROPERTY_H #define NFI_PROPERTY_H #include \"NFDataList.hpp\" #include \"NFList.hpp\" #include \"NFComm/NFPluginModule/NFPlatform.h\" typedef std :: function < int ( const NFGUID & , const std :: string & , const NFData & , const NFData & ) > PROPERTY_EVENT_FUNCTOR ; typedef NF_SHARE_PTR < PROPERTY_EVENT_FUNCTOR > PROPERTY_EVENT_FUNCTOR_PTR ; class _NFExport NFIProperty : public NFMemoryCounter { public : NFIProperty () : NFMemoryCounter ( GET_CLASS_NAME ( NFIProperty ), 1 ) { } virtual ~ NFIProperty () {} virtual void SetValue ( const NFData & TData ) = 0 ; virtual void SetValue ( const NFIProperty * pProperty ) = 0 ; virtual bool SetInt ( const NFINT64 value ) = 0 ; virtual bool SetFloat ( const double value ) = 0 ; virtual bool SetString ( const std :: string & value ) = 0 ; virtual bool SetObject ( const NFGUID & value ) = 0 ; virtual bool SetVector2 ( const NFVector2 & value ) = 0 ; virtual bool SetVector3 ( const NFVector3 & value ) = 0 ; virtual const NFDATA_TYPE GetType () const = 0 ; virtual const bool GeUsed () const = 0 ; virtual const std :: string & GetKey () const = 0 ; virtual const bool GetSave () const = 0 ; virtual const bool GetPublic () const = 0 ; virtual const bool GetPrivate () const = 0 ; virtual const bool GetCache () const = 0 ; virtual const bool GetRef () const = 0 ; virtual const bool GetForce () const = 0 ; virtual const bool GetUpload () const = 0 ; virtual void SetSave ( bool bSave ) = 0 ; virtual void SetPublic ( bool bPublic ) = 0 ; virtual void SetPrivate ( bool bPrivate ) = 0 ; virtual void SetCache ( bool bCache ) = 0 ; virtual void SetRef ( bool bRef ) = 0 ; virtual void SetForce ( bool bRef ) = 0 ; virtual void SetUpload ( bool bUpload ) = 0 ; virtual NFINT64 GetInt () const = 0 ; virtual int GetInt32 () const = 0 ; virtual double GetFloat () const = 0 ; virtual const std :: string & GetString () const = 0 ; virtual const NFGUID & GetObject () const = 0 ; virtual const NFVector2 & GetVector2 () const = 0 ; virtual const NFVector3 & GetVector3 () const = 0 ; virtual const NFData & GetValue () const = 0 ; virtual const NF_SHARE_PTR < NFList < std :: string >> GetEmbeddedList () const = 0 ; virtual const NF_SHARE_PTR < NFMapEx < std :: string , std :: string >> GetEmbeddedMap () const = 0 ; virtual bool Changed () const = 0 ; virtual std :: string ToString () = 0 ; virtual bool FromString ( const std :: string & strData ) = 0 ; virtual bool DeSerialization () = 0 ; virtual void RegisterCallback ( const PROPERTY_EVENT_FUNCTOR_PTR & cb ) = 0 ; }; #endif","title":"\u5b8c\u6574\u4ee3\u7801"},{"location":"NoahGameFrame/NFCore/NFMemoryCounter_h/","text":"NFMemoryCounter \u89e3\u6790 \u00b6 \u8fd9\u4e2a\u7c7b\u7684\u4f5c\u7528\u5982\u540c\u5b83\u7684\u540d\u5b57\u4e00\u6837\uff0c\u662f\u4e00\u4e2a\u5185\u5b58\u8ba1\u6570\u5668\u3002\u7981\u6b62\u4e86\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u4e00\u4e2a\u79c1\u6709\u7684\u5185\u90e8\u7c7b Data, Data\u5185\u4f7f\u7528map \u4fdd\u5b58\u4e86 \u5bf9\u8c61 \u548cdeep\u7684\u6620\u5c04\u5173\u7cfb\u3002 \u5185\u90e8\u7c7bData \u00b6 struct Data { Data ( NFMemoryCounter * p , int d ) : deep ( d ) { data . insert ( std :: map < NFMemoryCounter * , int >:: value_type ( p , d )); } std :: map < NFMemoryCounter * , int > data ; int deep = 0 ; }; deep \u7684\u4f5c\u7528\u6682\u65f6\u672a\u77e5\uff0c \u53ef\u80fd\u662f\u5185\u5b58\u7684\u4f18\u5148\u7ea7\uff1f \u5b8c\u6574\u4ee3\u7801 \u00b6 #ifndef NF_MEMORY_COUNTER_H #define NF_MEMORY_COUNTER_H #include <iostream> #include <string> #include <map> #include \"NFComm/NFPluginModule/NFPlatform.h\" class NFMemoryCounter { private : NFMemoryCounter () {} std :: string mstrClassName ; struct Data { Data ( NFMemoryCounter * p , int d ) : deep ( d ) { data . insert ( std :: map < NFMemoryCounter * , int >:: value_type ( p , d )); } std :: map < NFMemoryCounter * , int > data ; int deep = 0 ; }; public : static std :: map < std :: string , Data >* mxCounter ; NFMemoryCounter ( const std :: string & strClassName , const int deep = 0 ) { mstrClassName = strClassName ; if ( ! mxCounter ) { mxCounter = NF_NEW std :: map < std :: string , Data > (); } auto it = mxCounter -> find ( mstrClassName ); if ( it == mxCounter -> end ()) { mxCounter -> insert ( std :: map < std :: string , Data >:: value_type ( mstrClassName , Data ( this , deep ))); } else { it -> second . data . insert ( std :: map < NFMemoryCounter * , int >:: value_type ( this , deep )); } } virtual ~ NFMemoryCounter () { auto it = mxCounter -> find ( mstrClassName ); if ( it != mxCounter -> end ()) { auto it2 = it -> second . data . find ( this ); if ( it2 != it -> second . data . end ()) { it -> second . data . erase ( it2 ); } } } virtual void ToMemoryCounterString ( std :: string & info ) = 0 ; static void PrintMemoryInfo ( std :: string & info , const int deep = 0 ) { for ( auto it = mxCounter -> begin (); it != mxCounter -> end (); ++ it ) { info . append ( it -> first ); info . append ( \"=>\" ); info . append ( std :: to_string ( it -> second . data . size ())); info . append ( \" \\n \" ); if ( deep && it -> second . deep ) { for ( auto data : it -> second . data ) { data . first -> ToMemoryCounterString ( info ); } } } } }; #endif","title":"NFMemoryCounter_h"},{"location":"NoahGameFrame/NFCore/NFMemoryCounter_h/#nfmemorycounter","text":"\u8fd9\u4e2a\u7c7b\u7684\u4f5c\u7528\u5982\u540c\u5b83\u7684\u540d\u5b57\u4e00\u6837\uff0c\u662f\u4e00\u4e2a\u5185\u5b58\u8ba1\u6570\u5668\u3002\u7981\u6b62\u4e86\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u4e00\u4e2a\u79c1\u6709\u7684\u5185\u90e8\u7c7b Data, Data\u5185\u4f7f\u7528map \u4fdd\u5b58\u4e86 \u5bf9\u8c61 \u548cdeep\u7684\u6620\u5c04\u5173\u7cfb\u3002","title":"NFMemoryCounter \u89e3\u6790"},{"location":"NoahGameFrame/NFCore/NFMemoryCounter_h/#data","text":"struct Data { Data ( NFMemoryCounter * p , int d ) : deep ( d ) { data . insert ( std :: map < NFMemoryCounter * , int >:: value_type ( p , d )); } std :: map < NFMemoryCounter * , int > data ; int deep = 0 ; }; deep \u7684\u4f5c\u7528\u6682\u65f6\u672a\u77e5\uff0c \u53ef\u80fd\u662f\u5185\u5b58\u7684\u4f18\u5148\u7ea7\uff1f","title":"\u5185\u90e8\u7c7bData"},{"location":"NoahGameFrame/NFCore/NFMemoryCounter_h/#_1","text":"#ifndef NF_MEMORY_COUNTER_H #define NF_MEMORY_COUNTER_H #include <iostream> #include <string> #include <map> #include \"NFComm/NFPluginModule/NFPlatform.h\" class NFMemoryCounter { private : NFMemoryCounter () {} std :: string mstrClassName ; struct Data { Data ( NFMemoryCounter * p , int d ) : deep ( d ) { data . insert ( std :: map < NFMemoryCounter * , int >:: value_type ( p , d )); } std :: map < NFMemoryCounter * , int > data ; int deep = 0 ; }; public : static std :: map < std :: string , Data >* mxCounter ; NFMemoryCounter ( const std :: string & strClassName , const int deep = 0 ) { mstrClassName = strClassName ; if ( ! mxCounter ) { mxCounter = NF_NEW std :: map < std :: string , Data > (); } auto it = mxCounter -> find ( mstrClassName ); if ( it == mxCounter -> end ()) { mxCounter -> insert ( std :: map < std :: string , Data >:: value_type ( mstrClassName , Data ( this , deep ))); } else { it -> second . data . insert ( std :: map < NFMemoryCounter * , int >:: value_type ( this , deep )); } } virtual ~ NFMemoryCounter () { auto it = mxCounter -> find ( mstrClassName ); if ( it != mxCounter -> end ()) { auto it2 = it -> second . data . find ( this ); if ( it2 != it -> second . data . end ()) { it -> second . data . erase ( it2 ); } } } virtual void ToMemoryCounterString ( std :: string & info ) = 0 ; static void PrintMemoryInfo ( std :: string & info , const int deep = 0 ) { for ( auto it = mxCounter -> begin (); it != mxCounter -> end (); ++ it ) { info . append ( it -> first ); info . append ( \"=>\" ); info . append ( std :: to_string ( it -> second . data . size ())); info . append ( \" \\n \" ); if ( deep && it -> second . deep ) { for ( auto data : it -> second . data ) { data . first -> ToMemoryCounterString ( info ); } } } } }; #endif","title":"\u5b8c\u6574\u4ee3\u7801"},{"location":"NoahGameFrame/NFCore/NFVector2/","text":"NFVector2 \u00b6 \u7528\u4e24\u4e2afloat \u8868\u793a2\u7ef4\u5411\u91cf\uff0c\u5b9a\u4e49\u4e86\u5176\u57fa\u672c\u7684\u64cd\u4f5c\u3002 #ifndef NF_VETOR2_H #define NF_VETOR2_H #include <iostream> #include <string> #include <vector> #include \"NFComm/NFPluginModule/NFPlatform.h\" class NFLine ; class NFBox ; class NFPlane ; class NFVector2 { private : float x , y ; void InitData () { x = 0.0f ; y = 0.0f ; } public : // construction NFVector2 () { InitData (); } NFVector2 ( float x , float y ) { this -> x = x ; this -> y = y ; } NFVector2 ( float coordinate [ 2 ]) { this -> x = coordinate [ 0 ]; this -> y = coordinate [ 1 ]; } NFVector2 ( double coordinate [ 2 ]) { this -> x = ( float ) coordinate [ 0 ]; this -> y = ( float ) coordinate [ 1 ]; } NFVector2 ( const NFVector2 & v ) { this -> x = v . x ; this -> y = v . y ; } NFVector2 ( const std :: string & v ) { FromString ( v ); } bool operator < ( const NFVector2 & v ) const { return this -> Length () < v . Length (); } bool operator > ( const NFVector2 & v ) const { return this -> Length () > v . Length (); } NFVector2 & operator = ( const NFVector2 & v ) { this -> x = v . x ; this -> y = v . y ; return * this ; } bool operator == ( const NFVector2 & v ) const { return std :: abs ( this -> x - v . x ) < 0.001f && std :: abs ( this -> y - v . y ) < 0.001f ; } bool operator != ( const NFVector2 & v ) const { return std :: abs ( this -> x - v . x ) >= 0.001f || std :: abs ( this -> y - v . y ) >= 0.001f ; } //---------------------------------------------------------------------------- // Arithmetic Operations NFVector2 operator + ( const NFVector2 & v ) const { NFVector2 xV ; xV . x = this -> x + v . x ; xV . y = this -> y + v . y ; return xV ; } NFVector2 operator - ( const NFVector2 & v ) const { NFVector2 xV ; xV . x = this -> x - v . x ; xV . y = this -> y - v . y ; return xV ; } NFVector2 operator - () const { return NFVector2 ( - x , - y ); } NFVector2 operator * ( float s ) const { return NFVector2 ( x * s , y * s ); } NFVector2 operator / ( float s ) const { if ( std :: abs ( s ) > 0.001f ) { return NFVector2 ( x / s , y / s ); } return Zero (); } //---------------------------------------------------------------------------- // Arithmetic Updates NFVector2 & operator += ( const NFVector2 & v ) { x += v . x ; y += v . y ; return * this ; } NFVector2 & operator -= ( const NFVector2 v ) { x -= v . x ; y -= v . y ; return * this ; } NFVector2 & operator *= ( float s ) { x *= s ; y *= s ; return * this ; } NFVector2 operator /= ( float s ) { //if (std::abs(s) > 0.001f) { return NFVector2 ( x / s , y / s ); } //return Zero(); } float X () const { return this -> x ; } float Y () const { return this -> y ; } void SetX ( float x ) { this -> x = x ; } void SetY ( float y ) { this -> y = y ; } bool IsZero () const { return x < 0.001f && y < 0.001f ; } //---------------------------------------------------------------------------- inline float SquaredMagnitude () const { return x * x + y * y ; } //---------------------------------------------------------------------------- inline float SquaredLength () const { return SquaredMagnitude (); } //---------------------------------------------------------------------------- inline float Magnitude () const { return sqrtf ( x * x + y * y ); } //---------------------------------------------------------------------------- inline float Length () const { return Magnitude (); } //---------------------------------------------------------------------------- inline NFVector2 Direction () const { if ( this -> IsZero ()) { return Zero (); } float lenSquared = SquaredMagnitude (); float invSqrt = 1.0f / sqrtf ( lenSquared ); return NFVector2 ( x * invSqrt , y * invSqrt ); } //---------------------------------------------------------------------------- inline NFVector2 Normalized () const { return Direction (); } //---------------------------------------------------------------------------- float Distance ( const NFVector2 & v ) const { NFVector2 vX = * this - v ; return vX . Length (); } bool FromString ( const std :: string & value ) { std :: vector < std :: string > values ; Split ( value , values , \",\" ); if ( values . size () != 2 ) { return false ; } try { x = lexical_cast < float > ( values . at ( 0 )); y = lexical_cast < float > ( values . at ( 1 )); return true ; } catch ( const std :: exception & ) { } return false ; } std :: string ToString () const { return lexical_cast < std :: string > ( x ) + \",\" + lexical_cast < std :: string > ( this -> y ); } // Special values. inline static const NFVector2 & Zero () { static NFVector2 v ( 0 , 0 ); return v ; } inline static const NFVector2 & One () { static NFVector2 v ( 1 , 1 ); return v ; } inline static const NFVector2 & UnitX () { static NFVector2 v ( 1 , 0 ); return v ; } inline static const NFVector2 & UnitY () { static NFVector2 v ( 0 , 1 ); return v ; } bool Split ( const std :: string & str , std :: vector < std :: string >& result , std :: string delim ) { if ( str . empty ()) { return false ; } std :: string tmp ; size_t pos_begin = str . find_first_not_of ( delim ); size_t pos = 0 ; while ( pos_begin != std :: string :: npos ) { pos = str . find ( delim , pos_begin ); if ( pos != std :: string :: npos ) { tmp = str . substr ( pos_begin , pos - pos_begin ); pos_begin = pos + delim . length (); } else { tmp = str . substr ( pos_begin ); pos_begin = pos ; } if ( ! tmp . empty ()) { result . push_back ( tmp ); tmp . clear (); } } return true ; } }; #endif","title":"NFVector2"},{"location":"NoahGameFrame/NFCore/NFVector2/#nfvector2","text":"\u7528\u4e24\u4e2afloat \u8868\u793a2\u7ef4\u5411\u91cf\uff0c\u5b9a\u4e49\u4e86\u5176\u57fa\u672c\u7684\u64cd\u4f5c\u3002 #ifndef NF_VETOR2_H #define NF_VETOR2_H #include <iostream> #include <string> #include <vector> #include \"NFComm/NFPluginModule/NFPlatform.h\" class NFLine ; class NFBox ; class NFPlane ; class NFVector2 { private : float x , y ; void InitData () { x = 0.0f ; y = 0.0f ; } public : // construction NFVector2 () { InitData (); } NFVector2 ( float x , float y ) { this -> x = x ; this -> y = y ; } NFVector2 ( float coordinate [ 2 ]) { this -> x = coordinate [ 0 ]; this -> y = coordinate [ 1 ]; } NFVector2 ( double coordinate [ 2 ]) { this -> x = ( float ) coordinate [ 0 ]; this -> y = ( float ) coordinate [ 1 ]; } NFVector2 ( const NFVector2 & v ) { this -> x = v . x ; this -> y = v . y ; } NFVector2 ( const std :: string & v ) { FromString ( v ); } bool operator < ( const NFVector2 & v ) const { return this -> Length () < v . Length (); } bool operator > ( const NFVector2 & v ) const { return this -> Length () > v . Length (); } NFVector2 & operator = ( const NFVector2 & v ) { this -> x = v . x ; this -> y = v . y ; return * this ; } bool operator == ( const NFVector2 & v ) const { return std :: abs ( this -> x - v . x ) < 0.001f && std :: abs ( this -> y - v . y ) < 0.001f ; } bool operator != ( const NFVector2 & v ) const { return std :: abs ( this -> x - v . x ) >= 0.001f || std :: abs ( this -> y - v . y ) >= 0.001f ; } //---------------------------------------------------------------------------- // Arithmetic Operations NFVector2 operator + ( const NFVector2 & v ) const { NFVector2 xV ; xV . x = this -> x + v . x ; xV . y = this -> y + v . y ; return xV ; } NFVector2 operator - ( const NFVector2 & v ) const { NFVector2 xV ; xV . x = this -> x - v . x ; xV . y = this -> y - v . y ; return xV ; } NFVector2 operator - () const { return NFVector2 ( - x , - y ); } NFVector2 operator * ( float s ) const { return NFVector2 ( x * s , y * s ); } NFVector2 operator / ( float s ) const { if ( std :: abs ( s ) > 0.001f ) { return NFVector2 ( x / s , y / s ); } return Zero (); } //---------------------------------------------------------------------------- // Arithmetic Updates NFVector2 & operator += ( const NFVector2 & v ) { x += v . x ; y += v . y ; return * this ; } NFVector2 & operator -= ( const NFVector2 v ) { x -= v . x ; y -= v . y ; return * this ; } NFVector2 & operator *= ( float s ) { x *= s ; y *= s ; return * this ; } NFVector2 operator /= ( float s ) { //if (std::abs(s) > 0.001f) { return NFVector2 ( x / s , y / s ); } //return Zero(); } float X () const { return this -> x ; } float Y () const { return this -> y ; } void SetX ( float x ) { this -> x = x ; } void SetY ( float y ) { this -> y = y ; } bool IsZero () const { return x < 0.001f && y < 0.001f ; } //---------------------------------------------------------------------------- inline float SquaredMagnitude () const { return x * x + y * y ; } //---------------------------------------------------------------------------- inline float SquaredLength () const { return SquaredMagnitude (); } //---------------------------------------------------------------------------- inline float Magnitude () const { return sqrtf ( x * x + y * y ); } //---------------------------------------------------------------------------- inline float Length () const { return Magnitude (); } //---------------------------------------------------------------------------- inline NFVector2 Direction () const { if ( this -> IsZero ()) { return Zero (); } float lenSquared = SquaredMagnitude (); float invSqrt = 1.0f / sqrtf ( lenSquared ); return NFVector2 ( x * invSqrt , y * invSqrt ); } //---------------------------------------------------------------------------- inline NFVector2 Normalized () const { return Direction (); } //---------------------------------------------------------------------------- float Distance ( const NFVector2 & v ) const { NFVector2 vX = * this - v ; return vX . Length (); } bool FromString ( const std :: string & value ) { std :: vector < std :: string > values ; Split ( value , values , \",\" ); if ( values . size () != 2 ) { return false ; } try { x = lexical_cast < float > ( values . at ( 0 )); y = lexical_cast < float > ( values . at ( 1 )); return true ; } catch ( const std :: exception & ) { } return false ; } std :: string ToString () const { return lexical_cast < std :: string > ( x ) + \",\" + lexical_cast < std :: string > ( this -> y ); } // Special values. inline static const NFVector2 & Zero () { static NFVector2 v ( 0 , 0 ); return v ; } inline static const NFVector2 & One () { static NFVector2 v ( 1 , 1 ); return v ; } inline static const NFVector2 & UnitX () { static NFVector2 v ( 1 , 0 ); return v ; } inline static const NFVector2 & UnitY () { static NFVector2 v ( 0 , 1 ); return v ; } bool Split ( const std :: string & str , std :: vector < std :: string >& result , std :: string delim ) { if ( str . empty ()) { return false ; } std :: string tmp ; size_t pos_begin = str . find_first_not_of ( delim ); size_t pos = 0 ; while ( pos_begin != std :: string :: npos ) { pos = str . find ( delim , pos_begin ); if ( pos != std :: string :: npos ) { tmp = str . substr ( pos_begin , pos - pos_begin ); pos_begin = pos + delim . length (); } else { tmp = str . substr ( pos_begin ); pos_begin = pos ; } if ( ! tmp . empty ()) { result . push_back ( tmp ); tmp . clear (); } } return true ; } }; #endif","title":"NFVector2"},{"location":"NoahGameFrame/NFCore/NFVector3/","text":"NFVector3 \u00b6 #ifndef NF_VETOR3_H #define NF_VETOR3_H #include <iostream> #include <string> #include \"NFVector2.hpp\" class NFLine ; class NFBox ; class NFPlane ; class NFVector3 { private : float x , y , z ; void InitData () { x = 0.0f ; y = 0.0f ; z = 0.0f ; } public : // construction NFVector3 () { InitData (); } NFVector3 ( float x , float y , float z ) { this -> x = x ; this -> y = y ; this -> z = z ; } NFVector3 ( const NFVector2 & v , float z ) { this -> x = v . X (); this -> y = v . Y (); this -> z = z ; } NFVector3 ( float coordinate [ 3 ]) { this -> x = coordinate [ 0 ]; this -> y = coordinate [ 1 ]; this -> z = coordinate [ 2 ]; } NFVector3 ( double coordinate [ 3 ]) { this -> x = ( float ) coordinate [ 0 ]; this -> y = ( float ) coordinate [ 1 ]; this -> z = ( float ) coordinate [ 2 ]; } NFVector3 ( const NFVector3 & v ) { this -> x = v . x ; this -> y = v . y ; this -> z = v . z ; } NFVector3 ( const char * v , const int len ) { FromString ( std :: string ( v , len )); } NFVector3 ( const std :: string & v ) { FromString ( v ); } //---------------------------------------------------------------------------- bool operator < ( const NFVector3 & v ) const { return this -> Length () < v . Length () ; } bool operator > ( const NFVector3 & v ) const { return this -> Length () > v . Length (); } NFVector3 & operator = ( const NFVector3 & v ) { this -> x = v . x ; this -> y = v . y ; this -> z = v . z ; return * this ; } bool operator == ( const NFVector3 & v ) const { return std :: abs ( this -> x - v . x ) < 0.001f && std :: abs ( this -> y - v . y ) < 0.001f && std :: abs ( this -> z - v . z ) < 0.001f ; } bool operator != ( const NFVector3 & v ) const { return std :: abs ( this -> x - v . x ) >= 0.001f || std :: abs ( this -> y - v . y ) >= 0.001f || std :: abs ( this -> z - v . z ) >= 0.001f ; } //---------------------------------------------------------------------------- // Arithmetic Operations NFVector3 operator + ( const NFVector3 & v ) const { NFVector3 xV ; xV . x = this -> x + v . x ; xV . y = this -> y + v . y ; xV . z = this -> z + v . z ; return xV ; } NFVector3 operator - ( const NFVector3 & v ) const { NFVector3 xV ; xV . x = this -> x - v . x ; xV . y = this -> y - v . y ; xV . z = this -> z - v . z ; return xV ; } NFVector3 operator - () const { return NFVector3 ( - x , - y , - z ); } NFVector3 operator * ( float s ) const { return NFVector3 ( x * s , y * s , z * s ); } NFVector3 operator / ( float s ) const { if ( std :: abs ( s ) > 0.001f ) { return NFVector3 ( x / s , y / s , z / s ); } return Zero (); } //---------------------------------------------------------------------------- // Arithmetic Updates NFVector3 & operator += ( const NFVector3 & v ) { x += v . x ; y += v . y ; z += v . z ; return * this ; } NFVector3 & operator -= ( const NFVector3 & v ) { x -= v . x ; y -= v . y ; z -= v . z ; return * this ; } NFVector3 & operator *= ( float s ) { x *= s ; y *= s ; z *= s ; return * this ; } NFVector3 operator /= ( float s ) { //if (std::abs(s) > 0.001f) { return NFVector3 ( x / s , y / s , z / s ); } //return Zero(); } //---------------------------------------------------------------------------- float X () const { return this -> x ; } float Y () const { return this -> y ; } float Z () const { return this -> z ; } void SetX ( float x ) { this -> x = x ; } void SetY ( float y ) { this -> y = y ; } void SetZ ( float z ) { this -> z = z ; } //---------------------------------------------------------------------------- bool IsZero () const { return std :: abs ( x ) < 0.001f && std :: abs ( y ) < 0.001f && std :: abs ( z ) < 0.001f ; } //---------------------------------------------------------------------------- inline float SquaredMagnitude () const { return x * x + y * y + z * z ; } //---------------------------------------------------------------------------- inline float SquaredLength () const { return SquaredMagnitude (); } //---------------------------------------------------------------------------- inline float Magnitude () const { return sqrtf ( x * x + y * y + z * z ); } //---------------------------------------------------------------------------- inline float Length () const { return Magnitude (); } //---------------------------------------------------------------------------- inline NFVector3 Direction () const { if ( this -> IsZero ()) { return Zero (); } float lenSquared = SquaredMagnitude (); float invSqrt = 1.0f / sqrtf ( lenSquared ); return NFVector3 ( x * invSqrt , y * invSqrt , z * invSqrt ); } //---------------------------------------------------------------------------- inline NFVector3 Normalized () const { return Direction (); } //---------------------------------------------------------------------------- float Distance ( const NFVector3 & v ) const { NFVector3 vX = * this - v ; return vX . Length (); } //---------------------------------------------------------------------------- bool FromString ( const std :: string & value ) { std :: vector < std :: string > values ; Split ( value , values , \",\" ); if ( values . size () != 3 ) { return false ; } try { x = lexical_cast < float > ( values . at ( 0 )); y = lexical_cast < float > ( values . at ( 1 )); z = lexical_cast < float > ( values . at ( 2 )); return true ; } catch ( const std :: exception & ) { } return false ; } //---------------------------------------------------------------------------- std :: string ToString () const { return lexical_cast < std :: string > ( x ) + \",\" + lexical_cast < std :: string > ( y ) + \",\" + lexical_cast < std :: string > ( z ); } // Special values. inline static const NFVector3 & Zero () { static NFVector3 v ( 0 , 0 , 0 ); return v ; } inline static const NFVector3 & One () { static NFVector3 v ( 1 , 1 , 1 ); return v ; } inline static const NFVector3 & UnitX () { static NFVector3 v ( 1 , 0 , 0 ); return v ; } inline static const NFVector3 & UnitY () { static NFVector3 v ( 0 , 1 , 0 ); return v ; } inline static const NFVector3 & UnitZ () { static NFVector3 v ( 0 , 0 , 1 ); return v ; } NFVector2 xx () const { return NFVector2 ( this -> x , this -> x ); } NFVector2 yx () const { return NFVector2 ( this -> y , this -> x ); } NFVector2 zx () const { return NFVector2 ( this -> z , this -> x ); } NFVector2 xy () const { return NFVector2 ( this -> x , this -> y ); } NFVector2 yy () const { return NFVector2 ( this -> y , this -> y ); } NFVector2 zy () const { return NFVector2 ( this -> z , this -> y ); } NFVector2 xz () const { return NFVector2 ( this -> x , this -> z ); } NFVector2 yz () const { return NFVector2 ( this -> y , this -> z ); } NFVector2 zz () const { return NFVector2 ( this -> z , this -> z ); } bool Split ( const std :: string & str , std :: vector < std :: string >& result , std :: string delim ) { if ( str . empty ()) { return false ; } std :: string tmp ; size_t pos_begin = str . find_first_not_of ( delim ); size_t pos = 0 ; while ( pos_begin != std :: string :: npos ) { pos = str . find ( delim , pos_begin ); if ( pos != std :: string :: npos ) { tmp = str . substr ( pos_begin , pos - pos_begin ); pos_begin = pos + delim . length (); } else { tmp = str . substr ( pos_begin ); pos_begin = pos ; } if ( ! tmp . empty ()) { result . push_back ( tmp ); tmp . clear (); } } return true ; } }; #endif","title":"NFVector3"},{"location":"NoahGameFrame/NFCore/NFVector3/#nfvector3","text":"#ifndef NF_VETOR3_H #define NF_VETOR3_H #include <iostream> #include <string> #include \"NFVector2.hpp\" class NFLine ; class NFBox ; class NFPlane ; class NFVector3 { private : float x , y , z ; void InitData () { x = 0.0f ; y = 0.0f ; z = 0.0f ; } public : // construction NFVector3 () { InitData (); } NFVector3 ( float x , float y , float z ) { this -> x = x ; this -> y = y ; this -> z = z ; } NFVector3 ( const NFVector2 & v , float z ) { this -> x = v . X (); this -> y = v . Y (); this -> z = z ; } NFVector3 ( float coordinate [ 3 ]) { this -> x = coordinate [ 0 ]; this -> y = coordinate [ 1 ]; this -> z = coordinate [ 2 ]; } NFVector3 ( double coordinate [ 3 ]) { this -> x = ( float ) coordinate [ 0 ]; this -> y = ( float ) coordinate [ 1 ]; this -> z = ( float ) coordinate [ 2 ]; } NFVector3 ( const NFVector3 & v ) { this -> x = v . x ; this -> y = v . y ; this -> z = v . z ; } NFVector3 ( const char * v , const int len ) { FromString ( std :: string ( v , len )); } NFVector3 ( const std :: string & v ) { FromString ( v ); } //---------------------------------------------------------------------------- bool operator < ( const NFVector3 & v ) const { return this -> Length () < v . Length () ; } bool operator > ( const NFVector3 & v ) const { return this -> Length () > v . Length (); } NFVector3 & operator = ( const NFVector3 & v ) { this -> x = v . x ; this -> y = v . y ; this -> z = v . z ; return * this ; } bool operator == ( const NFVector3 & v ) const { return std :: abs ( this -> x - v . x ) < 0.001f && std :: abs ( this -> y - v . y ) < 0.001f && std :: abs ( this -> z - v . z ) < 0.001f ; } bool operator != ( const NFVector3 & v ) const { return std :: abs ( this -> x - v . x ) >= 0.001f || std :: abs ( this -> y - v . y ) >= 0.001f || std :: abs ( this -> z - v . z ) >= 0.001f ; } //---------------------------------------------------------------------------- // Arithmetic Operations NFVector3 operator + ( const NFVector3 & v ) const { NFVector3 xV ; xV . x = this -> x + v . x ; xV . y = this -> y + v . y ; xV . z = this -> z + v . z ; return xV ; } NFVector3 operator - ( const NFVector3 & v ) const { NFVector3 xV ; xV . x = this -> x - v . x ; xV . y = this -> y - v . y ; xV . z = this -> z - v . z ; return xV ; } NFVector3 operator - () const { return NFVector3 ( - x , - y , - z ); } NFVector3 operator * ( float s ) const { return NFVector3 ( x * s , y * s , z * s ); } NFVector3 operator / ( float s ) const { if ( std :: abs ( s ) > 0.001f ) { return NFVector3 ( x / s , y / s , z / s ); } return Zero (); } //---------------------------------------------------------------------------- // Arithmetic Updates NFVector3 & operator += ( const NFVector3 & v ) { x += v . x ; y += v . y ; z += v . z ; return * this ; } NFVector3 & operator -= ( const NFVector3 & v ) { x -= v . x ; y -= v . y ; z -= v . z ; return * this ; } NFVector3 & operator *= ( float s ) { x *= s ; y *= s ; z *= s ; return * this ; } NFVector3 operator /= ( float s ) { //if (std::abs(s) > 0.001f) { return NFVector3 ( x / s , y / s , z / s ); } //return Zero(); } //---------------------------------------------------------------------------- float X () const { return this -> x ; } float Y () const { return this -> y ; } float Z () const { return this -> z ; } void SetX ( float x ) { this -> x = x ; } void SetY ( float y ) { this -> y = y ; } void SetZ ( float z ) { this -> z = z ; } //---------------------------------------------------------------------------- bool IsZero () const { return std :: abs ( x ) < 0.001f && std :: abs ( y ) < 0.001f && std :: abs ( z ) < 0.001f ; } //---------------------------------------------------------------------------- inline float SquaredMagnitude () const { return x * x + y * y + z * z ; } //---------------------------------------------------------------------------- inline float SquaredLength () const { return SquaredMagnitude (); } //---------------------------------------------------------------------------- inline float Magnitude () const { return sqrtf ( x * x + y * y + z * z ); } //---------------------------------------------------------------------------- inline float Length () const { return Magnitude (); } //---------------------------------------------------------------------------- inline NFVector3 Direction () const { if ( this -> IsZero ()) { return Zero (); } float lenSquared = SquaredMagnitude (); float invSqrt = 1.0f / sqrtf ( lenSquared ); return NFVector3 ( x * invSqrt , y * invSqrt , z * invSqrt ); } //---------------------------------------------------------------------------- inline NFVector3 Normalized () const { return Direction (); } //---------------------------------------------------------------------------- float Distance ( const NFVector3 & v ) const { NFVector3 vX = * this - v ; return vX . Length (); } //---------------------------------------------------------------------------- bool FromString ( const std :: string & value ) { std :: vector < std :: string > values ; Split ( value , values , \",\" ); if ( values . size () != 3 ) { return false ; } try { x = lexical_cast < float > ( values . at ( 0 )); y = lexical_cast < float > ( values . at ( 1 )); z = lexical_cast < float > ( values . at ( 2 )); return true ; } catch ( const std :: exception & ) { } return false ; } //---------------------------------------------------------------------------- std :: string ToString () const { return lexical_cast < std :: string > ( x ) + \",\" + lexical_cast < std :: string > ( y ) + \",\" + lexical_cast < std :: string > ( z ); } // Special values. inline static const NFVector3 & Zero () { static NFVector3 v ( 0 , 0 , 0 ); return v ; } inline static const NFVector3 & One () { static NFVector3 v ( 1 , 1 , 1 ); return v ; } inline static const NFVector3 & UnitX () { static NFVector3 v ( 1 , 0 , 0 ); return v ; } inline static const NFVector3 & UnitY () { static NFVector3 v ( 0 , 1 , 0 ); return v ; } inline static const NFVector3 & UnitZ () { static NFVector3 v ( 0 , 0 , 1 ); return v ; } NFVector2 xx () const { return NFVector2 ( this -> x , this -> x ); } NFVector2 yx () const { return NFVector2 ( this -> y , this -> x ); } NFVector2 zx () const { return NFVector2 ( this -> z , this -> x ); } NFVector2 xy () const { return NFVector2 ( this -> x , this -> y ); } NFVector2 yy () const { return NFVector2 ( this -> y , this -> y ); } NFVector2 zy () const { return NFVector2 ( this -> z , this -> y ); } NFVector2 xz () const { return NFVector2 ( this -> x , this -> z ); } NFVector2 yz () const { return NFVector2 ( this -> y , this -> z ); } NFVector2 zz () const { return NFVector2 ( this -> z , this -> z ); } bool Split ( const std :: string & str , std :: vector < std :: string >& result , std :: string delim ) { if ( str . empty ()) { return false ; } std :: string tmp ; size_t pos_begin = str . find_first_not_of ( delim ); size_t pos = 0 ; while ( pos_begin != std :: string :: npos ) { pos = str . find ( delim , pos_begin ); if ( pos != std :: string :: npos ) { tmp = str . substr ( pos_begin , pos - pos_begin ); pos_begin = pos + delim . length (); } else { tmp = str . substr ( pos_begin ); pos_begin = pos ; } if ( ! tmp . empty ()) { result . push_back ( tmp ); tmp . clear (); } } return true ; } }; #endif","title":"NFVector3"},{"location":"NoahGameFrame/NFHeaderFiles/NFGUID_h/","text":"NFGUID \u5934\u6587\u4ef6\u4ee3\u7801\u89e3\u6790 \u00b6 \u4ee3\u7801 \u00b6 #ifndef NF_IDENTID_H #define NF_IDENTID_H #include \"NFPlatform.h\" #include <iostream> #include <stdio.h> #include <stdlib.h> class NFGUID { private : static NFINT64 nInstanceID ; static NFINT64 nGUIDIndex ; public : NFINT64 nData64 ; NFINT64 nHead64 ; static void SetInstanceID ( NFINT64 id ) { nInstanceID = id ; nGUIDIndex = 0 ; } NFGUID () { nData64 = 0 ; nHead64 = 0 ; } NFGUID ( NFINT64 nHeadData , NFINT64 nData ) { nHead64 = nHeadData ; nData64 = nData ; } NFGUID ( const NFGUID & xData ) { nHead64 = xData . nHead64 ; nData64 = xData . nData64 ; } NFGUID ( const std :: string & strID ) { FromString ( strID ); } static NFGUID CreateID () { int64_t value = 0 ; uint64_t time = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: system_clock :: now (). time_since_epoch ()). count (); //value = time << 16; value = time * 1000000 ; //value |= nGUIDIndex++; value += nGUIDIndex ++ ; //if (sequence_ == 0x7FFF) if ( nGUIDIndex == 999999 ) { nGUIDIndex = 0 ; } NFGUID xID ; xID . nHead64 = nInstanceID ; xID . nData64 = value ; return xID ; } NFGUID & operator = ( const NFGUID & xData ) { nHead64 = xData . nHead64 ; nData64 = xData . nData64 ; return * this ; } NFGUID & operator = ( const std :: string & strID ) { FromString ( strID ); return * this ; } const NFINT64 GetData () const { return nData64 ; } const NFINT64 GetHead () const { return nHead64 ; } void SetData ( const NFINT64 nData ) { nData64 = nData ; } void SetHead ( const NFINT64 nData ) { nHead64 = nData ; } bool IsNull () const { return 0 == nData64 && 0 == nHead64 ; } bool operator == ( const NFGUID & id ) const { return this -> nData64 == id . nData64 && this -> nHead64 == id . nHead64 ; } bool operator != ( const NFGUID & id ) const { return this -> nData64 != id . nData64 || this -> nHead64 != id . nHead64 ; } bool operator < ( const NFGUID & id ) const { if ( this -> nHead64 == id . nHead64 ) { return this -> nData64 < id . nData64 ; } return this -> nHead64 < id . nHead64 ; } std :: string ToString () const { return lexical_cast < std :: string > ( nHead64 ) + \"-\" + lexical_cast < std :: string > ( nData64 ); } bool FromString ( const std :: string & strID ) { size_t nStrLength = strID . length (); size_t nPos = strID . find ( '-' ); if ( nPos == std :: string :: npos ) { return false ; } std :: string strHead = strID . substr ( 0 , nPos ); std :: string strData = \"\" ; if ( nPos + 1 < nStrLength ) { strData = strID . substr ( nPos + 1 , nStrLength - nPos ); } try { nHead64 = lexical_cast < NFINT64 > ( strHead ); nData64 = lexical_cast < NFINT64 > ( strData ); return true ; } catch (...) { return false ; } } }; #endif \u56db\u4e2a\u6784\u9020\u51fd\u6570 \u00b6 NFGUID () { nData64 = 0 ; nHead64 = 0 ; } NFGUID ( NFINT64 nHeadData , NFINT64 nData ) { nHead64 = nHeadData ; nData64 = nData ; } NFGUID ( const NFGUID & xData ) { nHead64 = xData . nHead64 ; nData64 = xData . nData64 ; } NFGUID ( const std :: string & strID ) { FromString ( strID ); } \u56db\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u5176\u4e2d\u6700\u540e\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u662f\u4ece\u5b57\u7b26\u4e32\u4e2d\u5f97\u5230nHead64 \u548c nData64\u7684\u503c\u3002 FromString\u51fd\u6570 \u00b6 bool FromString(const std::string& strID) { size_t nStrLength = strID.length(); size_t nPos = strID.find('-'); if (nPos == std::string::npos) { return false; } std::string strHead = strID.substr(0, nPos); std::string strData = \"\"; if (nPos + 1 < nStrLength) { strData = strID.substr(nPos + 1, nStrLength - nPos); } try { nHead64 = lexical_cast<NFINT64>(strHead); nData64 = lexical_cast<NFINT64>(strData); return true; }catch (...){ return false; } } \u5728\u51fd\u6570\u5bf9\u5b57\u7b26\u4e32\u7684\u89e3\u6790\u4e2d\u53ef\u4ee5\u770b\u51fa \u8be5\u5b57\u7b26\u4e32\u7531 nHead64-nData64 \u7ec4\u6210\uff0c\u5176\u4e2d - \u5b57\u7b26\u8d77\u5230\u5206\u5272\u4f5c\u7528\u3002 lexical_cast \u662f\u4e07\u80fd\u7c7b\u578b\u8f6c\u6362\u5668\u6a21\u677f\u51fd\u6570\uff0c\u5728FromString \u4e2d\u5c06 string \u8f6c\u5316\u4e3a NFINT64(\u5373 int64) CreateID\u51fd\u6570 \u00b6 static NFGUID CreateID () { int64_t value = 0 ; // \u8fd4\u56de \u81ea1970 1/1 8:00 \u5f00\u59cb \u6beb\u79d2\u7ea7\u522b\u7684\u523b\u5ea6\u8ba1\u6570 uint64_t time = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: system_clock :: now (). time_since_epoch ()). count (); // \u8f6c\u6362\u5230 ns (\u7eb3\u79d2) \u7ea7\u522b //value = time << 16; value = time * 1000000 ; //value |= nGUIDIndex++; value += nGUIDIndex ++ ; //if (sequence_ == 0x7FFF) if ( nGUIDIndex == 999999 ) { nGUIDIndex = 0 ; } NFGUID xID ; xID . nHead64 = nInstanceID ; xID . nData64 = value ; return xID ; }","title":"NFGUID"},{"location":"NoahGameFrame/NFHeaderFiles/NFGUID_h/#nfguid","text":"","title":"NFGUID \u5934\u6587\u4ef6\u4ee3\u7801\u89e3\u6790"},{"location":"NoahGameFrame/NFHeaderFiles/NFGUID_h/#_1","text":"#ifndef NF_IDENTID_H #define NF_IDENTID_H #include \"NFPlatform.h\" #include <iostream> #include <stdio.h> #include <stdlib.h> class NFGUID { private : static NFINT64 nInstanceID ; static NFINT64 nGUIDIndex ; public : NFINT64 nData64 ; NFINT64 nHead64 ; static void SetInstanceID ( NFINT64 id ) { nInstanceID = id ; nGUIDIndex = 0 ; } NFGUID () { nData64 = 0 ; nHead64 = 0 ; } NFGUID ( NFINT64 nHeadData , NFINT64 nData ) { nHead64 = nHeadData ; nData64 = nData ; } NFGUID ( const NFGUID & xData ) { nHead64 = xData . nHead64 ; nData64 = xData . nData64 ; } NFGUID ( const std :: string & strID ) { FromString ( strID ); } static NFGUID CreateID () { int64_t value = 0 ; uint64_t time = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: system_clock :: now (). time_since_epoch ()). count (); //value = time << 16; value = time * 1000000 ; //value |= nGUIDIndex++; value += nGUIDIndex ++ ; //if (sequence_ == 0x7FFF) if ( nGUIDIndex == 999999 ) { nGUIDIndex = 0 ; } NFGUID xID ; xID . nHead64 = nInstanceID ; xID . nData64 = value ; return xID ; } NFGUID & operator = ( const NFGUID & xData ) { nHead64 = xData . nHead64 ; nData64 = xData . nData64 ; return * this ; } NFGUID & operator = ( const std :: string & strID ) { FromString ( strID ); return * this ; } const NFINT64 GetData () const { return nData64 ; } const NFINT64 GetHead () const { return nHead64 ; } void SetData ( const NFINT64 nData ) { nData64 = nData ; } void SetHead ( const NFINT64 nData ) { nHead64 = nData ; } bool IsNull () const { return 0 == nData64 && 0 == nHead64 ; } bool operator == ( const NFGUID & id ) const { return this -> nData64 == id . nData64 && this -> nHead64 == id . nHead64 ; } bool operator != ( const NFGUID & id ) const { return this -> nData64 != id . nData64 || this -> nHead64 != id . nHead64 ; } bool operator < ( const NFGUID & id ) const { if ( this -> nHead64 == id . nHead64 ) { return this -> nData64 < id . nData64 ; } return this -> nHead64 < id . nHead64 ; } std :: string ToString () const { return lexical_cast < std :: string > ( nHead64 ) + \"-\" + lexical_cast < std :: string > ( nData64 ); } bool FromString ( const std :: string & strID ) { size_t nStrLength = strID . length (); size_t nPos = strID . find ( '-' ); if ( nPos == std :: string :: npos ) { return false ; } std :: string strHead = strID . substr ( 0 , nPos ); std :: string strData = \"\" ; if ( nPos + 1 < nStrLength ) { strData = strID . substr ( nPos + 1 , nStrLength - nPos ); } try { nHead64 = lexical_cast < NFINT64 > ( strHead ); nData64 = lexical_cast < NFINT64 > ( strData ); return true ; } catch (...) { return false ; } } }; #endif","title":"\u4ee3\u7801"},{"location":"NoahGameFrame/NFHeaderFiles/NFGUID_h/#_2","text":"NFGUID () { nData64 = 0 ; nHead64 = 0 ; } NFGUID ( NFINT64 nHeadData , NFINT64 nData ) { nHead64 = nHeadData ; nData64 = nData ; } NFGUID ( const NFGUID & xData ) { nHead64 = xData . nHead64 ; nData64 = xData . nData64 ; } NFGUID ( const std :: string & strID ) { FromString ( strID ); } \u56db\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u5176\u4e2d\u6700\u540e\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u662f\u4ece\u5b57\u7b26\u4e32\u4e2d\u5f97\u5230nHead64 \u548c nData64\u7684\u503c\u3002","title":"\u56db\u4e2a\u6784\u9020\u51fd\u6570"},{"location":"NoahGameFrame/NFHeaderFiles/NFGUID_h/#fromstring","text":"bool FromString(const std::string& strID) { size_t nStrLength = strID.length(); size_t nPos = strID.find('-'); if (nPos == std::string::npos) { return false; } std::string strHead = strID.substr(0, nPos); std::string strData = \"\"; if (nPos + 1 < nStrLength) { strData = strID.substr(nPos + 1, nStrLength - nPos); } try { nHead64 = lexical_cast<NFINT64>(strHead); nData64 = lexical_cast<NFINT64>(strData); return true; }catch (...){ return false; } } \u5728\u51fd\u6570\u5bf9\u5b57\u7b26\u4e32\u7684\u89e3\u6790\u4e2d\u53ef\u4ee5\u770b\u51fa \u8be5\u5b57\u7b26\u4e32\u7531 nHead64-nData64 \u7ec4\u6210\uff0c\u5176\u4e2d - \u5b57\u7b26\u8d77\u5230\u5206\u5272\u4f5c\u7528\u3002 lexical_cast \u662f\u4e07\u80fd\u7c7b\u578b\u8f6c\u6362\u5668\u6a21\u677f\u51fd\u6570\uff0c\u5728FromString \u4e2d\u5c06 string \u8f6c\u5316\u4e3a NFINT64(\u5373 int64)","title":"FromString\u51fd\u6570"},{"location":"NoahGameFrame/NFHeaderFiles/NFGUID_h/#createid","text":"static NFGUID CreateID () { int64_t value = 0 ; // \u8fd4\u56de \u81ea1970 1/1 8:00 \u5f00\u59cb \u6beb\u79d2\u7ea7\u522b\u7684\u523b\u5ea6\u8ba1\u6570 uint64_t time = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: system_clock :: now (). time_since_epoch ()). count (); // \u8f6c\u6362\u5230 ns (\u7eb3\u79d2) \u7ea7\u522b //value = time << 16; value = time * 1000000 ; //value |= nGUIDIndex++; value += nGUIDIndex ++ ; //if (sequence_ == 0x7FFF) if ( nGUIDIndex == 999999 ) { nGUIDIndex = 0 ; } NFGUID xID ; xID . nHead64 = nInstanceID ; xID . nData64 = value ; return xID ; }","title":"CreateID\u51fd\u6570"},{"location":"NoahGameFrame/NFHeaderFiles/NFIModule_h/","text":"NFIModule \u5934\u6587\u4ef6\u89e3\u6790 \u00b6 NFIModule \u662f\u57fa\u7c7b\uff0c\u5b9a\u4e49\u4e86\u516c\u5171\u7684\u501f\u53e3\u3002 protected \u7684 \u62bd\u8c61\u57fa\u7c7b NFIPluginManager\uff0c\u4fdd\u5b58\u4e86 \u63d2\u4ef6\u7684\u7ba1\u7406\u5bf9\u8c61\u6307\u9488\u3002 \u5b8c\u6574\u4ee3\u7801 \u00b6 #ifndef NFI_MODULE_H #define NFI_MODULE_H #include <string> #include \"NFIPluginManager.h\" #include \"NFComm/NFCore/NFMap.hpp\" #include \"NFComm/NFCore/NFList.hpp\" #include \"NFComm/NFCore/NFDataList.hpp\" #include \"NFComm/NFCore/NFSmartEnum.hpp\" class NFIModule { public : NFIModule () : m_bIsExecute ( false ), pPluginManager ( NULL ) { } virtual ~ NFIModule () {} virtual bool Awake () { return true ; } virtual bool Init () { return true ; } virtual bool AfterInit () { return true ; } virtual bool CheckConfig () { return true ; } virtual bool ReadyExecute () { return true ; } virtual bool Execute () { return true ; } virtual bool BeforeShut () { return true ; } virtual bool Shut () { return true ; } virtual bool Finalize () { return true ; } virtual bool OnReloadPlugin () { return true ; } virtual NFIPluginManager * GetPluginManager () const { return pPluginManager ; } std :: string strName ; bool m_bIsExecute ; protected : NFIPluginManager * pPluginManager ; }; #endif","title":"NFIModule"},{"location":"NoahGameFrame/NFHeaderFiles/NFIModule_h/#nfimodule","text":"NFIModule \u662f\u57fa\u7c7b\uff0c\u5b9a\u4e49\u4e86\u516c\u5171\u7684\u501f\u53e3\u3002 protected \u7684 \u62bd\u8c61\u57fa\u7c7b NFIPluginManager\uff0c\u4fdd\u5b58\u4e86 \u63d2\u4ef6\u7684\u7ba1\u7406\u5bf9\u8c61\u6307\u9488\u3002","title":"NFIModule \u5934\u6587\u4ef6\u89e3\u6790"},{"location":"NoahGameFrame/NFHeaderFiles/NFIModule_h/#_1","text":"#ifndef NFI_MODULE_H #define NFI_MODULE_H #include <string> #include \"NFIPluginManager.h\" #include \"NFComm/NFCore/NFMap.hpp\" #include \"NFComm/NFCore/NFList.hpp\" #include \"NFComm/NFCore/NFDataList.hpp\" #include \"NFComm/NFCore/NFSmartEnum.hpp\" class NFIModule { public : NFIModule () : m_bIsExecute ( false ), pPluginManager ( NULL ) { } virtual ~ NFIModule () {} virtual bool Awake () { return true ; } virtual bool Init () { return true ; } virtual bool AfterInit () { return true ; } virtual bool CheckConfig () { return true ; } virtual bool ReadyExecute () { return true ; } virtual bool Execute () { return true ; } virtual bool BeforeShut () { return true ; } virtual bool Shut () { return true ; } virtual bool Finalize () { return true ; } virtual bool OnReloadPlugin () { return true ; } virtual NFIPluginManager * GetPluginManager () const { return pPluginManager ; } std :: string strName ; bool m_bIsExecute ; protected : NFIPluginManager * pPluginManager ; }; #endif","title":"\u5b8c\u6574\u4ee3\u7801"},{"location":"NoahGameFrame/NFHeaderFiles/NFIPluginManager_h/","text":"NFIPluginManager \u5934\u6587\u4ef6\u89e3\u6790 \u00b6 \u662f\u6240\u6709 NFPluginManager \u7684\u7236\u7c7b\u3002 TIsDerived \u00b6 \u6a21\u677f\u5143\u7f16\u7a0b\uff0c\u5229\u7528\u7f16\u8bd1\u671f\u591a\u6001\u7684\u6027\u8d28\u6765\u5224\u65ad\u4e24\u4e2a\u7c7b\u662f\u5426\u5177\u5907\u7ee7\u627f\u5173\u7cfb\u3002 template < typename DerivedType , typename BaseType > class TIsDerived { public : static int AnyFunction ( BaseType * base ) { return 1 ; } static char AnyFunction ( void * t2 ) { return 0 ; } enum { Result = ( sizeof ( int ) == sizeof ( AnyFunction (( DerivedType * ) NULL ))), }; }; \u91cd\u8f7d\u4e86 AnyFunction\uff0c \u4f20\u5165 DerivedType* \u7c7b\u578b\u7684\u7a7a\u6307\u9488\uff0c\u6839\u636e AnyFunction \u8fd4\u56de\u503c\u7c7b\u578b\u7684\u5927\u5c0f \u6765\u5224\u65ad\u4e24\u4e2a\u7c7b\u578b\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u5982\u679c\u6709\u7ee7\u627f\u5173\u7cfb\uff0cResult\u7684\u503c\u4e3a1\uff0c \u5426\u5219\u4e3a0\uff1b NFReplaceContent \u00b6 class NFReplaceContent { public : NFReplaceContent ( const std :: string content , const std :: string newValue ) { this -> content = content ; this -> newValue = newValue ; } std :: string content ; std :: string newValue ; }; \u6682\u65f6\u4e0d\u6e05\u695a \u8fd9\u4e48\u5199\u7684\u7528\u610f\u662f\u4ec0\u4e48 NFIPluginManager \u00b6 \u7528\u865a\u51fd\u6570\u5b9a\u4e49\u4e86\u57fa\u672c\u7684\u63a5\u53e3\u3002 template < typename T > T * FindModule () { NFIModule * pLogicModule = FindModule ( typeid ( T ). name ()); if ( pLogicModule ) { if ( ! TIsDerived < T , NFIModule >:: Result ) { return NULL ; } //TODO OSX\u4e0adynamic_cast\u8fd4\u56de\u4e86NULL #if NF_PLATFORM == NF_PLATFORM_APPLE T * pT = ( T * ) pLogicModule ; #else T * pT = dynamic_cast < T *> ( pLogicModule ); #endif assert ( NULL != pT ); return pT ; } assert ( NULL ); return NULL ; } template < typename T > void ReplaceModule ( NFIModule * pModule ) { NFIModule * pLogicModule = FindModule ( typeid ( T ). name ()); if ( pLogicModule ) { RemoveModule ( typeid ( T ). name ()); } // name() \u8fd4\u56de\u503c\u5177\u6709\u591a\u4f59\u5b57\u7b26\uff0c \u5df2\u63d0\u4ea4issue AddModule ( typeid ( T ). name (), pModule ); }; \u4e24\u4e2a\u6a21\u677f\u51fd\u6570\uff0c \u5b8c\u6574\u4ee3\u7801 \u00b6 #ifndef NFI_PLUGIN_MANAGER_H #define NFI_PLUGIN_MANAGER_H #include <functional> #include <list> #include <vector> #include \"NFPlatform.h\" class NFIPlugin ; class NFIModule ; class NFIPluginManager ; typedef std :: function < bool ( NFIPluginManager * p , const std :: string & strFileName , std :: string & strContent ) > GET_FILECONTENT_FUNCTOR ; template < typename DerivedType , typename BaseType > class TIsDerived { public : static int AnyFunction ( BaseType * base ) { return 1 ; } static char AnyFunction ( void * t2 ) { return 0 ; } enum { Result = ( sizeof ( int ) == sizeof ( AnyFunction (( DerivedType * ) NULL ))), }; }; class NFReplaceContent { public : NFReplaceContent ( const std :: string content , const std :: string newValue ) { this -> content = content ; this -> newValue = newValue ; } std :: string content ; std :: string newValue ; }; #define FIND_MODULE(classBaseName, className) \\ assert((TIsDerived<classBaseName, NFIModule>::Result)); class NFIPluginManager { public : NFIPluginManager () { } ///////////////////// virtual bool LoadPluginConfig () { return true ; } virtual bool LoadPlugin () { return true ; } virtual bool Awake () { return true ; } virtual bool Init () { return true ; } virtual bool AfterInit () { return true ; } virtual bool CheckConfig () { return true ; } virtual bool ReadyExecute () { return true ; } virtual bool Execute () { return true ; } virtual bool BeforeShut () { return true ; } virtual bool Shut () { return true ; } virtual bool Finalize () { return true ; } virtual bool OnReloadPlugin () { return true ; } ///////////////////// template < typename T > T * FindModule () { NFIModule * pLogicModule = FindModule ( typeid ( T ). name ()); if ( pLogicModule ) { if ( ! TIsDerived < T , NFIModule >:: Result ) { return NULL ; } //TODO OSX\u4e0adynamic_cast\u8fd4\u56de\u4e86NULL #if NF_PLATFORM == NF_PLATFORM_APPLE T * pT = ( T * ) pLogicModule ; #else T * pT = dynamic_cast < T *> ( pLogicModule ); #endif assert ( NULL != pT ); return pT ; } assert ( NULL ); return NULL ; } template < typename T > void ReplaceModule ( NFIModule * pModule ) { NFIModule * pLogicModule = FindModule ( typeid ( T ). name ()); if ( pLogicModule ) { RemoveModule ( typeid ( T ). name ()); } AddModule ( typeid ( T ). name (), pModule ); }; virtual bool ReLoadPlugin ( const std :: string & strPluginDLLName ) = 0 ; virtual void Registered ( NFIPlugin * plugin ) = 0 ; virtual void UnRegistered ( NFIPlugin * plugin ) = 0 ; virtual NFIPlugin * FindPlugin ( const std :: string & strPluginName ) = 0 ; virtual void AddModule ( const std :: string & strModuleName , NFIModule * pModule ) = 0 ; virtual void AddTestModule ( const std :: string & strModuleName , NFIModule * pModule ) = 0 ; virtual void RemoveModule ( const std :: string & strModuleName ) = 0 ; virtual NFIModule * FindModule ( const std :: string & strModuleName ) = 0 ; virtual NFIModule * FindTestModule ( const std :: string & strModuleName ) = 0 ; virtual std :: list < NFIModule *> Modules () = 0 ; virtual std :: list < NFIModule *> TestModules () = 0 ; virtual int GetAppID () const = 0 ; virtual void SetAppID ( const int nAppID ) = 0 ; virtual bool IsRunningDocker () const = 0 ; virtual void SetRunningDocker ( bool bDocker ) = 0 ; virtual bool IsStaticPlugin () const = 0 ; virtual NFINT64 GetInitTime () const = 0 ; virtual NFINT64 GetNowTime () const = 0 ; virtual const std :: string & GetConfigPath () const = 0 ; virtual void SetConfigPath ( const std :: string & strPath ) = 0 ; virtual void SetConfigName ( const std :: string & strFileName ) = 0 ; virtual const std :: string & GetConfigName () const = 0 ; virtual const std :: string & GetAppName () const = 0 ; virtual void SetAppName ( const std :: string & strAppName ) = 0 ; virtual const std :: string & GetLogConfigName () const = 0 ; virtual void SetLogConfigName ( const std :: string & strName ) = 0 ; virtual NFIPlugin * GetCurrentPlugin () = 0 ; virtual NFIModule * GetCurrentModule () = 0 ; virtual void SetCurrentPlugin ( NFIPlugin * pPlugin ) = 0 ; virtual void SetCurrentModule ( NFIModule * pModule ) = 0 ; virtual int GetAppCPUCount () const = 0 ; virtual void SetAppCPUCount ( const int count ) = 0 ; virtual void SetGetFileContentFunctor ( GET_FILECONTENT_FUNCTOR fun ) = 0 ; virtual bool GetFileContent ( const std :: string & strFileName , std :: string & strContent ) = 0 ; virtual void AddFileReplaceContent ( const std :: string & fileName , const std :: string & content , const std :: string & newValue ) = 0 ; virtual std :: vector < NFReplaceContent > GetFileReplaceContents ( const std :: string & fileName ) = 0 ; }; #endif","title":"NFIPluginManager"},{"location":"NoahGameFrame/NFHeaderFiles/NFIPluginManager_h/#nfipluginmanager","text":"\u662f\u6240\u6709 NFPluginManager \u7684\u7236\u7c7b\u3002","title":"NFIPluginManager \u5934\u6587\u4ef6\u89e3\u6790"},{"location":"NoahGameFrame/NFHeaderFiles/NFIPluginManager_h/#tisderived","text":"\u6a21\u677f\u5143\u7f16\u7a0b\uff0c\u5229\u7528\u7f16\u8bd1\u671f\u591a\u6001\u7684\u6027\u8d28\u6765\u5224\u65ad\u4e24\u4e2a\u7c7b\u662f\u5426\u5177\u5907\u7ee7\u627f\u5173\u7cfb\u3002 template < typename DerivedType , typename BaseType > class TIsDerived { public : static int AnyFunction ( BaseType * base ) { return 1 ; } static char AnyFunction ( void * t2 ) { return 0 ; } enum { Result = ( sizeof ( int ) == sizeof ( AnyFunction (( DerivedType * ) NULL ))), }; }; \u91cd\u8f7d\u4e86 AnyFunction\uff0c \u4f20\u5165 DerivedType* \u7c7b\u578b\u7684\u7a7a\u6307\u9488\uff0c\u6839\u636e AnyFunction \u8fd4\u56de\u503c\u7c7b\u578b\u7684\u5927\u5c0f \u6765\u5224\u65ad\u4e24\u4e2a\u7c7b\u578b\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u5982\u679c\u6709\u7ee7\u627f\u5173\u7cfb\uff0cResult\u7684\u503c\u4e3a1\uff0c \u5426\u5219\u4e3a0\uff1b","title":"TIsDerived"},{"location":"NoahGameFrame/NFHeaderFiles/NFIPluginManager_h/#nfreplacecontent","text":"class NFReplaceContent { public : NFReplaceContent ( const std :: string content , const std :: string newValue ) { this -> content = content ; this -> newValue = newValue ; } std :: string content ; std :: string newValue ; }; \u6682\u65f6\u4e0d\u6e05\u695a \u8fd9\u4e48\u5199\u7684\u7528\u610f\u662f\u4ec0\u4e48","title":"NFReplaceContent"},{"location":"NoahGameFrame/NFHeaderFiles/NFIPluginManager_h/#nfipluginmanager_1","text":"\u7528\u865a\u51fd\u6570\u5b9a\u4e49\u4e86\u57fa\u672c\u7684\u63a5\u53e3\u3002 template < typename T > T * FindModule () { NFIModule * pLogicModule = FindModule ( typeid ( T ). name ()); if ( pLogicModule ) { if ( ! TIsDerived < T , NFIModule >:: Result ) { return NULL ; } //TODO OSX\u4e0adynamic_cast\u8fd4\u56de\u4e86NULL #if NF_PLATFORM == NF_PLATFORM_APPLE T * pT = ( T * ) pLogicModule ; #else T * pT = dynamic_cast < T *> ( pLogicModule ); #endif assert ( NULL != pT ); return pT ; } assert ( NULL ); return NULL ; } template < typename T > void ReplaceModule ( NFIModule * pModule ) { NFIModule * pLogicModule = FindModule ( typeid ( T ). name ()); if ( pLogicModule ) { RemoveModule ( typeid ( T ). name ()); } // name() \u8fd4\u56de\u503c\u5177\u6709\u591a\u4f59\u5b57\u7b26\uff0c \u5df2\u63d0\u4ea4issue AddModule ( typeid ( T ). name (), pModule ); }; \u4e24\u4e2a\u6a21\u677f\u51fd\u6570\uff0c","title":"NFIPluginManager"},{"location":"NoahGameFrame/NFHeaderFiles/NFIPluginManager_h/#_1","text":"#ifndef NFI_PLUGIN_MANAGER_H #define NFI_PLUGIN_MANAGER_H #include <functional> #include <list> #include <vector> #include \"NFPlatform.h\" class NFIPlugin ; class NFIModule ; class NFIPluginManager ; typedef std :: function < bool ( NFIPluginManager * p , const std :: string & strFileName , std :: string & strContent ) > GET_FILECONTENT_FUNCTOR ; template < typename DerivedType , typename BaseType > class TIsDerived { public : static int AnyFunction ( BaseType * base ) { return 1 ; } static char AnyFunction ( void * t2 ) { return 0 ; } enum { Result = ( sizeof ( int ) == sizeof ( AnyFunction (( DerivedType * ) NULL ))), }; }; class NFReplaceContent { public : NFReplaceContent ( const std :: string content , const std :: string newValue ) { this -> content = content ; this -> newValue = newValue ; } std :: string content ; std :: string newValue ; }; #define FIND_MODULE(classBaseName, className) \\ assert((TIsDerived<classBaseName, NFIModule>::Result)); class NFIPluginManager { public : NFIPluginManager () { } ///////////////////// virtual bool LoadPluginConfig () { return true ; } virtual bool LoadPlugin () { return true ; } virtual bool Awake () { return true ; } virtual bool Init () { return true ; } virtual bool AfterInit () { return true ; } virtual bool CheckConfig () { return true ; } virtual bool ReadyExecute () { return true ; } virtual bool Execute () { return true ; } virtual bool BeforeShut () { return true ; } virtual bool Shut () { return true ; } virtual bool Finalize () { return true ; } virtual bool OnReloadPlugin () { return true ; } ///////////////////// template < typename T > T * FindModule () { NFIModule * pLogicModule = FindModule ( typeid ( T ). name ()); if ( pLogicModule ) { if ( ! TIsDerived < T , NFIModule >:: Result ) { return NULL ; } //TODO OSX\u4e0adynamic_cast\u8fd4\u56de\u4e86NULL #if NF_PLATFORM == NF_PLATFORM_APPLE T * pT = ( T * ) pLogicModule ; #else T * pT = dynamic_cast < T *> ( pLogicModule ); #endif assert ( NULL != pT ); return pT ; } assert ( NULL ); return NULL ; } template < typename T > void ReplaceModule ( NFIModule * pModule ) { NFIModule * pLogicModule = FindModule ( typeid ( T ). name ()); if ( pLogicModule ) { RemoveModule ( typeid ( T ). name ()); } AddModule ( typeid ( T ). name (), pModule ); }; virtual bool ReLoadPlugin ( const std :: string & strPluginDLLName ) = 0 ; virtual void Registered ( NFIPlugin * plugin ) = 0 ; virtual void UnRegistered ( NFIPlugin * plugin ) = 0 ; virtual NFIPlugin * FindPlugin ( const std :: string & strPluginName ) = 0 ; virtual void AddModule ( const std :: string & strModuleName , NFIModule * pModule ) = 0 ; virtual void AddTestModule ( const std :: string & strModuleName , NFIModule * pModule ) = 0 ; virtual void RemoveModule ( const std :: string & strModuleName ) = 0 ; virtual NFIModule * FindModule ( const std :: string & strModuleName ) = 0 ; virtual NFIModule * FindTestModule ( const std :: string & strModuleName ) = 0 ; virtual std :: list < NFIModule *> Modules () = 0 ; virtual std :: list < NFIModule *> TestModules () = 0 ; virtual int GetAppID () const = 0 ; virtual void SetAppID ( const int nAppID ) = 0 ; virtual bool IsRunningDocker () const = 0 ; virtual void SetRunningDocker ( bool bDocker ) = 0 ; virtual bool IsStaticPlugin () const = 0 ; virtual NFINT64 GetInitTime () const = 0 ; virtual NFINT64 GetNowTime () const = 0 ; virtual const std :: string & GetConfigPath () const = 0 ; virtual void SetConfigPath ( const std :: string & strPath ) = 0 ; virtual void SetConfigName ( const std :: string & strFileName ) = 0 ; virtual const std :: string & GetConfigName () const = 0 ; virtual const std :: string & GetAppName () const = 0 ; virtual void SetAppName ( const std :: string & strAppName ) = 0 ; virtual const std :: string & GetLogConfigName () const = 0 ; virtual void SetLogConfigName ( const std :: string & strName ) = 0 ; virtual NFIPlugin * GetCurrentPlugin () = 0 ; virtual NFIModule * GetCurrentModule () = 0 ; virtual void SetCurrentPlugin ( NFIPlugin * pPlugin ) = 0 ; virtual void SetCurrentModule ( NFIModule * pModule ) = 0 ; virtual int GetAppCPUCount () const = 0 ; virtual void SetAppCPUCount ( const int count ) = 0 ; virtual void SetGetFileContentFunctor ( GET_FILECONTENT_FUNCTOR fun ) = 0 ; virtual bool GetFileContent ( const std :: string & strFileName , std :: string & strContent ) = 0 ; virtual void AddFileReplaceContent ( const std :: string & fileName , const std :: string & content , const std :: string & newValue ) = 0 ; virtual std :: vector < NFReplaceContent > GetFileReplaceContents ( const std :: string & fileName ) = 0 ; }; #endif","title":"\u5b8c\u6574\u4ee3\u7801"},{"location":"NoahGameFrame/NFHeaderFiles/NFIPlugin_h/","text":"NFIPlugin \u5934\u6587\u4ef6\u89e3\u6790 \u00b6 NFIPlugin \u662f\u6240\u6709\u81ea\u5b9a\u4e49\u63d2\u4ef6\u7684\u7236\u7c7b\uff0c\u800c NFIPlugin \u53c8\u662f\u7ee7\u627f\u81ea NFIModule\u3002 \u7528 map \u5b58\u50a8 \u540d\u5b57\u548c module\u7684 pair , \u7ee7\u627f\u4e8eNFImodule \u7684awake init \u7b49\u51fd\u6570\uff0c\u5728\u7ee7\u627f\u7684\u51fd\u6570\u5185 \u4fdd\u5b58\u7684 modules \u5206\u522b\u8c03\u7528\u5176\u76f8\u5e94\u7684\u51fd\u6570\u3002 \u516d\u4e2a\u91cd\u8981\u7684\u5b8f \u00b6 #define REGISTER_MODULE(pManager, classBaseName, className) \\ assert((TIsDerived<classBaseName, NFIModule>::Result)); \\ assert((TIsDerived<className, classBaseName>::Result)); \\ NFIModule* pRegisterModule##className= new className(pManager); \\ pRegisterModule##className->strName = (#className); \\ pManager->AddModule( #classBaseName, pRegisterModule##className );\\ this->AddElement( #classBaseName, pRegisterModule##className ); #define REGISTER_TEST_MODULE(pManager, classBaseName, className) \\ assert((TIsDerived<classBaseName, NFIModule>::Result)); \\ assert((TIsDerived<className, NFIModule>::Result)); \\ NFIModule* pRegisterModule##className= new className(pManager); \\ pRegisterModule##className->strName = (#className); \\ pManager->AddTestModule( #classBaseName, pRegisterModule##className ); #define UNREGISTER_MODULE(pManager, classBaseName, className) \\ NFIModule* pUnRegisterModule##className = dynamic_cast<NFIModule*>( pManager->FindModule( #classBaseName )); \\ pManager->RemoveModule( #classBaseName ); \\ this->RemoveElement( #classBaseName ); \\ delete pUnRegisterModule##className; #define UNREGISTER_TEST_MODULE(pManager, classBaseName, className) \\ NFIModule* pUnRegisterModule##className = dynamic_cast<NFIModule*>( pManager->FindtESTModule( #classBaseName )); \\ pManager->RemoveTestModule( #classBaseName ); \\ delete pUnRegisterModule##className; #define CREATE_PLUGIN(pManager, className) NFIPlugin* pCreatePlugin##className = new className(pManager); pManager->Registered( pCreatePlugin##className ; #define DESTROY_PLUGIN(pManager, className) pManager->UnRegistered( pManager->FindPlugin((#className)) ); \u6ce8\u518c\u5b8f REGISTER_MODULE \u5148\u5224\u65ad\u7c7b\u578b \u4e4b\u95f4\u662f\u5426\u5b58\u5728\u7ee7\u627f\u5173\u7cfb\uff0c \u5c06pRegisterModule \u548c\u5b50\u7c7b \u62fc\u63a5\u6210\u65b0\u7684\u53d8\u91cf\u540d \u7136\u540e\u6dfb\u52a0\u5230 map \u91cc\u9762\u3002 \u5176\u4ed6\u7684\u5b8f\u540c\u7406\uff01 \u5b8c\u6574\u4ee3\u7801 \u00b6 #ifndef NFI_PLUGIN_H #define NFI_PLUGIN_H #include <iostream> #include <assert.h> #include \"NFComm/NFCore/NFMap.hpp\" #include \"NFComm/NFPluginModule/NFIModule.h\" #include \"NFComm/NFPluginModule/NFIPluginManager.h\" #define REGISTER_MODULE(pManager, classBaseName, className) \\ assert((TIsDerived<classBaseName, NFIModule>::Result)); \\ assert((TIsDerived<className, classBaseName>::Result)); \\ NFIModule* pRegisterModule##className= new className(pManager); \\ pRegisterModule##className->strName = (#className); \\ pManager->AddModule( #classBaseName, pRegisterModule##className );\\ this->AddElement( #classBaseName, pRegisterModule##className ); #define REGISTER_TEST_MODULE(pManager, classBaseName, className) \\ assert((TIsDerived<classBaseName, NFIModule>::Result)); \\ assert((TIsDerived<className, NFIModule>::Result)); \\ NFIModule* pRegisterModule##className= new className(pManager); \\ pRegisterModule##className->strName = (#className); \\ pManager->AddTestModule( #classBaseName, pRegisterModule##className ); #define UNREGISTER_MODULE(pManager, classBaseName, className) \\ NFIModule* pUnRegisterModule##className = dynamic_cast<NFIModule*>( pManager->FindModule( #classBaseName )); \\ pManager->RemoveModule( #classBaseName ); \\ this->RemoveElement( #classBaseName ); \\ delete pUnRegisterModule##className; #define UNREGISTER_TEST_MODULE(pManager, classBaseName, className) \\ NFIModule* pUnRegisterModule##className = dynamic_cast<NFIModule*>( pManager->FindtESTModule( #classBaseName )); \\ pManager->RemoveTestModule( #classBaseName ); \\ delete pUnRegisterModule##className; #define CREATE_PLUGIN(pManager, className) NFIPlugin* pCreatePlugin##className = new className(pManager); pManager->Registered( pCreatePlugin##className ); #define DESTROY_PLUGIN(pManager, className) pManager->UnRegistered( pManager->FindPlugin((#className)) ); /* #define REGISTER_COMPONENT(pManager, className) NFIComponent* pRegisterComponent##className= new className(pManager); \\ pRegisterComponent##className->strName = (#className); \\ pManager->AddComponent( (#className), pRegisterComponent##className ); #define UNREGISTER_COMPONENT(pManager, className) NFIComponent* pRegisterComponent##className = \\ dynamic_cast<NFIComponent*>( pManager->FindComponent( (#className) ) ); pManager->RemoveComponent( (#className) ); delete pRegisterComponent##className; */ class NFIPluginManager ; class NFIPlugin : public NFIModule { public : NFIPlugin () { } virtual ~ NFIPlugin () { } virtual const int GetPluginVersion () = 0 ; virtual const std :: string GetPluginName () = 0 ; virtual void Install () = 0 ; virtual void Uninstall () = 0 ; void AddElement ( const std :: string & name , NFIModule * module ) { mModules [ name ] = module ; } NFIModule * GetElement ( const std :: string & name ) { auto it = mModules . find ( name ); if ( it != mModules . end ()) { return it -> second ; } return nullptr ; } void RemoveElement ( const std :: string & name ) { auto it = mModules . find ( name ); if ( it != mModules . end ()) { mModules . erase ( it ); } } virtual bool Awake () { for ( auto it : mModules ) { NFIModule * pModule = it . second ; pPluginManager -> SetCurrentModule ( pModule ); bool bRet = pModule -> Awake (); if ( ! bRet ) { std :: cout << pModule -> strName << std :: endl ; assert ( 0 ); } } return true ; } virtual bool Init () { for ( auto it : mModules ) { NFIModule * pModule = it . second ; pPluginManager -> SetCurrentModule ( pModule ); bool bRet = pModule -> Init (); if ( ! bRet ) { std :: cout << pModule -> strName << std :: endl ; assert ( 0 ); } } return true ; } virtual bool AfterInit () { for ( auto it : mModules ) { NFIModule * pModule = it . second ; pPluginManager -> SetCurrentModule ( pModule ); bool bRet = pModule -> AfterInit (); if ( ! bRet ) { std :: cout << pModule -> strName << std :: endl ; assert ( 0 ); } } return true ; } virtual bool CheckConfig () { for ( auto it : mModules ) { NFIModule * pModule = it . second ; pPluginManager -> SetCurrentModule ( pModule ); pModule -> CheckConfig (); } return true ; } virtual bool ReadyExecute () { for ( auto it : mModules ) { NFIModule * pModule = it . second ; pPluginManager -> SetCurrentModule ( pModule ); pModule -> ReadyExecute (); } return true ; } virtual bool Execute () { for ( auto it : mModules ) { NFIModule * pModule = it . second ; pPluginManager -> SetCurrentModule ( pModule ); pModule -> Execute (); } return true ; } virtual bool BeforeShut () { for ( auto it : mModules ) { NFIModule * pModule = it . second ; pPluginManager -> SetCurrentModule ( pModule ); pModule -> BeforeShut (); } return true ; } virtual bool Shut () { for ( auto it : mModules ) { NFIModule * pModule = it . second ; pPluginManager -> SetCurrentModule ( pModule ); pModule -> Shut (); } return true ; } virtual bool Finalize () { for ( auto it : mModules ) { NFIModule * pModule = it . second ; pPluginManager -> SetCurrentModule ( pModule ); pModule -> Finalize (); } return true ; } virtual bool OnReloadPlugin () { for ( auto it : mModules ) { NFIModule * pModule = it . second ; pPluginManager -> SetCurrentModule ( pModule ); pModule -> OnReloadPlugin (); } return true ; } private : std :: map < std :: string , NFIModule *> mModules ; }; #endif","title":"NFIPlugin"},{"location":"NoahGameFrame/NFHeaderFiles/NFIPlugin_h/#nfiplugin","text":"NFIPlugin \u662f\u6240\u6709\u81ea\u5b9a\u4e49\u63d2\u4ef6\u7684\u7236\u7c7b\uff0c\u800c NFIPlugin \u53c8\u662f\u7ee7\u627f\u81ea NFIModule\u3002 \u7528 map \u5b58\u50a8 \u540d\u5b57\u548c module\u7684 pair , \u7ee7\u627f\u4e8eNFImodule \u7684awake init \u7b49\u51fd\u6570\uff0c\u5728\u7ee7\u627f\u7684\u51fd\u6570\u5185 \u4fdd\u5b58\u7684 modules \u5206\u522b\u8c03\u7528\u5176\u76f8\u5e94\u7684\u51fd\u6570\u3002","title":"NFIPlugin \u5934\u6587\u4ef6\u89e3\u6790"},{"location":"NoahGameFrame/NFHeaderFiles/NFIPlugin_h/#_1","text":"#define REGISTER_MODULE(pManager, classBaseName, className) \\ assert((TIsDerived<classBaseName, NFIModule>::Result)); \\ assert((TIsDerived<className, classBaseName>::Result)); \\ NFIModule* pRegisterModule##className= new className(pManager); \\ pRegisterModule##className->strName = (#className); \\ pManager->AddModule( #classBaseName, pRegisterModule##className );\\ this->AddElement( #classBaseName, pRegisterModule##className ); #define REGISTER_TEST_MODULE(pManager, classBaseName, className) \\ assert((TIsDerived<classBaseName, NFIModule>::Result)); \\ assert((TIsDerived<className, NFIModule>::Result)); \\ NFIModule* pRegisterModule##className= new className(pManager); \\ pRegisterModule##className->strName = (#className); \\ pManager->AddTestModule( #classBaseName, pRegisterModule##className ); #define UNREGISTER_MODULE(pManager, classBaseName, className) \\ NFIModule* pUnRegisterModule##className = dynamic_cast<NFIModule*>( pManager->FindModule( #classBaseName )); \\ pManager->RemoveModule( #classBaseName ); \\ this->RemoveElement( #classBaseName ); \\ delete pUnRegisterModule##className; #define UNREGISTER_TEST_MODULE(pManager, classBaseName, className) \\ NFIModule* pUnRegisterModule##className = dynamic_cast<NFIModule*>( pManager->FindtESTModule( #classBaseName )); \\ pManager->RemoveTestModule( #classBaseName ); \\ delete pUnRegisterModule##className; #define CREATE_PLUGIN(pManager, className) NFIPlugin* pCreatePlugin##className = new className(pManager); pManager->Registered( pCreatePlugin##className ; #define DESTROY_PLUGIN(pManager, className) pManager->UnRegistered( pManager->FindPlugin((#className)) ); \u6ce8\u518c\u5b8f REGISTER_MODULE \u5148\u5224\u65ad\u7c7b\u578b \u4e4b\u95f4\u662f\u5426\u5b58\u5728\u7ee7\u627f\u5173\u7cfb\uff0c \u5c06pRegisterModule \u548c\u5b50\u7c7b \u62fc\u63a5\u6210\u65b0\u7684\u53d8\u91cf\u540d \u7136\u540e\u6dfb\u52a0\u5230 map \u91cc\u9762\u3002 \u5176\u4ed6\u7684\u5b8f\u540c\u7406\uff01","title":"\u516d\u4e2a\u91cd\u8981\u7684\u5b8f"},{"location":"NoahGameFrame/NFHeaderFiles/NFIPlugin_h/#_2","text":"#ifndef NFI_PLUGIN_H #define NFI_PLUGIN_H #include <iostream> #include <assert.h> #include \"NFComm/NFCore/NFMap.hpp\" #include \"NFComm/NFPluginModule/NFIModule.h\" #include \"NFComm/NFPluginModule/NFIPluginManager.h\" #define REGISTER_MODULE(pManager, classBaseName, className) \\ assert((TIsDerived<classBaseName, NFIModule>::Result)); \\ assert((TIsDerived<className, classBaseName>::Result)); \\ NFIModule* pRegisterModule##className= new className(pManager); \\ pRegisterModule##className->strName = (#className); \\ pManager->AddModule( #classBaseName, pRegisterModule##className );\\ this->AddElement( #classBaseName, pRegisterModule##className ); #define REGISTER_TEST_MODULE(pManager, classBaseName, className) \\ assert((TIsDerived<classBaseName, NFIModule>::Result)); \\ assert((TIsDerived<className, NFIModule>::Result)); \\ NFIModule* pRegisterModule##className= new className(pManager); \\ pRegisterModule##className->strName = (#className); \\ pManager->AddTestModule( #classBaseName, pRegisterModule##className ); #define UNREGISTER_MODULE(pManager, classBaseName, className) \\ NFIModule* pUnRegisterModule##className = dynamic_cast<NFIModule*>( pManager->FindModule( #classBaseName )); \\ pManager->RemoveModule( #classBaseName ); \\ this->RemoveElement( #classBaseName ); \\ delete pUnRegisterModule##className; #define UNREGISTER_TEST_MODULE(pManager, classBaseName, className) \\ NFIModule* pUnRegisterModule##className = dynamic_cast<NFIModule*>( pManager->FindtESTModule( #classBaseName )); \\ pManager->RemoveTestModule( #classBaseName ); \\ delete pUnRegisterModule##className; #define CREATE_PLUGIN(pManager, className) NFIPlugin* pCreatePlugin##className = new className(pManager); pManager->Registered( pCreatePlugin##className ); #define DESTROY_PLUGIN(pManager, className) pManager->UnRegistered( pManager->FindPlugin((#className)) ); /* #define REGISTER_COMPONENT(pManager, className) NFIComponent* pRegisterComponent##className= new className(pManager); \\ pRegisterComponent##className->strName = (#className); \\ pManager->AddComponent( (#className), pRegisterComponent##className ); #define UNREGISTER_COMPONENT(pManager, className) NFIComponent* pRegisterComponent##className = \\ dynamic_cast<NFIComponent*>( pManager->FindComponent( (#className) ) ); pManager->RemoveComponent( (#className) ); delete pRegisterComponent##className; */ class NFIPluginManager ; class NFIPlugin : public NFIModule { public : NFIPlugin () { } virtual ~ NFIPlugin () { } virtual const int GetPluginVersion () = 0 ; virtual const std :: string GetPluginName () = 0 ; virtual void Install () = 0 ; virtual void Uninstall () = 0 ; void AddElement ( const std :: string & name , NFIModule * module ) { mModules [ name ] = module ; } NFIModule * GetElement ( const std :: string & name ) { auto it = mModules . find ( name ); if ( it != mModules . end ()) { return it -> second ; } return nullptr ; } void RemoveElement ( const std :: string & name ) { auto it = mModules . find ( name ); if ( it != mModules . end ()) { mModules . erase ( it ); } } virtual bool Awake () { for ( auto it : mModules ) { NFIModule * pModule = it . second ; pPluginManager -> SetCurrentModule ( pModule ); bool bRet = pModule -> Awake (); if ( ! bRet ) { std :: cout << pModule -> strName << std :: endl ; assert ( 0 ); } } return true ; } virtual bool Init () { for ( auto it : mModules ) { NFIModule * pModule = it . second ; pPluginManager -> SetCurrentModule ( pModule ); bool bRet = pModule -> Init (); if ( ! bRet ) { std :: cout << pModule -> strName << std :: endl ; assert ( 0 ); } } return true ; } virtual bool AfterInit () { for ( auto it : mModules ) { NFIModule * pModule = it . second ; pPluginManager -> SetCurrentModule ( pModule ); bool bRet = pModule -> AfterInit (); if ( ! bRet ) { std :: cout << pModule -> strName << std :: endl ; assert ( 0 ); } } return true ; } virtual bool CheckConfig () { for ( auto it : mModules ) { NFIModule * pModule = it . second ; pPluginManager -> SetCurrentModule ( pModule ); pModule -> CheckConfig (); } return true ; } virtual bool ReadyExecute () { for ( auto it : mModules ) { NFIModule * pModule = it . second ; pPluginManager -> SetCurrentModule ( pModule ); pModule -> ReadyExecute (); } return true ; } virtual bool Execute () { for ( auto it : mModules ) { NFIModule * pModule = it . second ; pPluginManager -> SetCurrentModule ( pModule ); pModule -> Execute (); } return true ; } virtual bool BeforeShut () { for ( auto it : mModules ) { NFIModule * pModule = it . second ; pPluginManager -> SetCurrentModule ( pModule ); pModule -> BeforeShut (); } return true ; } virtual bool Shut () { for ( auto it : mModules ) { NFIModule * pModule = it . second ; pPluginManager -> SetCurrentModule ( pModule ); pModule -> Shut (); } return true ; } virtual bool Finalize () { for ( auto it : mModules ) { NFIModule * pModule = it . second ; pPluginManager -> SetCurrentModule ( pModule ); pModule -> Finalize (); } return true ; } virtual bool OnReloadPlugin () { for ( auto it : mModules ) { NFIModule * pModule = it . second ; pPluginManager -> SetCurrentModule ( pModule ); pModule -> OnReloadPlugin (); } return true ; } private : std :: map < std :: string , NFIModule *> mModules ; }; #endif","title":"\u5b8c\u6574\u4ee3\u7801"},{"location":"NoahGameFrame/NFLogPlugin/NFLogModule/","text":"NFLogModule \u89e3\u6790 \u00b6 NFLogModule.h \u00b6 #ifndef NF_LOG_MODULE_H #define NF_LOG_MODULE_H #include \"NFComm/NFPluginModule/NFILogModule.h\" #include \"NFComm/NFCore/NFPerformance.hpp\" class NFLogModule : public NFILogModule { public : NFLogModule ( NFIPluginManager * p ); virtual ~ NFLogModule () {} virtual bool Awake (); virtual bool Init (); virtual bool Shut (); virtual bool BeforeShut (); virtual bool AfterInit (); virtual bool Execute (); /////////////////////////////////////////////////////////////////////// virtual void LogStack (); virtual bool LogElement ( const NF_LOG_LEVEL nll , const NFGUID ident , const std :: string & strElement , const std :: string & strDesc , const char * func = \"\" , int line = 0 ); virtual bool LogProperty ( const NF_LOG_LEVEL nll , const NFGUID ident , const std :: string & strProperty , const std :: string & strDesc , const char * func = \"\" , int line = 0 ); virtual bool LogRecord ( const NF_LOG_LEVEL nll , const NFGUID ident , const std :: string & strRecord , const std :: string & strDesc , const int nRow , const int nCol , const char * func = \"\" , int line = 0 ); virtual bool LogRecord ( const NF_LOG_LEVEL nll , const NFGUID ident , const std :: string & strRecord , const std :: string & strDesc , const char * func = \"\" , int line = 0 ); virtual bool LogObject ( const NF_LOG_LEVEL nll , const NFGUID ident , const std :: string & strDesc , const char * func = \"\" , int line = 0 ); virtual bool LogDebug ( const std :: string & strLog , const char * func = \"\" , int line = 0 ); virtual bool LogInfo ( const std :: string & strLog , const char * func = \"\" , int line = 0 ); virtual bool LogWarning ( const std :: string & strLog , const char * func = \"\" , int line = 0 ); virtual bool LogError ( const std :: string & strLog , const char * func = \"\" , int line = 0 ); virtual bool LogFatal ( const std :: string & strLog , const char * func = \"\" , int line = 0 ); virtual bool LogDebug ( const std :: ostringstream & stream , const char * func = \"\" , int line = 0 ); virtual bool LogInfo ( const std :: ostringstream & stream , const char * func = \"\" , int line = 0 ); virtual bool LogWarning ( const std :: ostringstream & stream , const char * func = \"\" , int line = 0 ); virtual bool LogError ( const std :: ostringstream & stream , const char * func = \"\" , int line = 0 ); virtual bool LogFatal ( const std :: ostringstream & stream , const char * func = \"\" , int line = 0 ); virtual bool LogDebug ( const NFGUID ident , const std :: string & strLog , const char * func = \"\" , int line = 0 ); virtual bool LogInfo ( const NFGUID ident , const std :: string & strLog , const char * func = \"\" , int line = 0 ); virtual bool LogWarning ( const NFGUID ident , const std :: string & strLog , const char * func = \"\" , int line = 0 ); virtual bool LogError ( const NFGUID ident , const std :: string & strLog , const char * func = \"\" , int line = 0 ); virtual bool LogFatal ( const NFGUID ident , const std :: string & strLog , const char * func = \"\" , int line = 0 ); virtual bool LogDebug ( const NFGUID ident , const std :: ostringstream & stream , const char * func = \"\" , int line = 0 ); virtual bool LogInfo ( const NFGUID ident , const std :: ostringstream & stream , const char * func = \"\" , int line = 0 ); virtual bool LogWarning ( const NFGUID ident , const std :: ostringstream & stream , const char * func = \"\" , int line = 0 ); virtual bool LogError ( const NFGUID ident , const std :: ostringstream & stream , const char * func = \"\" , int line = 0 ); virtual bool LogFatal ( const NFGUID ident , const std :: ostringstream & stream , const char * func = \"\" , int line = 0 ); virtual bool LogDebugFunctionDump ( const NFGUID ident , const int nMsg , const std :: string & strArg , const char * func = \"\" , const int line = 0 ); virtual bool ChangeLogLevel ( const std :: string & strLevel ); virtual void SetHooker ( LOG_HOOKER_FUNCTOR_PTR hooker ); virtual void StackTrace (); protected : virtual bool Log ( const NF_LOG_LEVEL nll , const char * format , ...); static bool CheckLogFileExist ( const char * filename ); static void rolloutHandler ( const char * filename , std :: size_t size ); std :: string GetConfigPath ( const std :: string & fileName ); private : std :: string mstrLocalStream ; LOG_HOOKER_FUNCTOR_PTR mLogHooker ; static unsigned int idx ; uint64_t mnLogCountTotal ; std :: list < NFPerformance > mxPerformanceList ; }; NFLogModule.cpp \u00b6 \u6784\u9020\u51fd\u6570 \u00b6 \u4fdd\u5b58\u4e86 NFIPluginManager\u7684\u6307\u9488\uff0c\u8bbe\u7f6e\u65e5\u5fd7\u5e93\u3002 StrictLogFileSizeCheck \uff1a \u786e\u4fdd\u6bcf\u6b21\u8bb0\u5f55\u7684\u65f6\u5019\u90fd\u4f1a\u68c0\u67e5\u65e5\u5fd7\u6587\u4ef6\u7684\u5927\u5c0f\u3002 DisableApplicationAbortOnFatalLog \uff1a \u9632\u6b62Fatal\u7ea7\u522b\u65e5\u5fd7\u4e2d\u65ad\u7a0b\u5e8f\u3002 NFLogModule :: NFLogModule ( NFIPluginManager * p ) { pPluginManager = p ; el :: Loggers :: addFlag ( el :: LoggingFlag :: StrictLogFileSizeCheck ); el :: Loggers :: addFlag ( el :: LoggingFlag :: DisableApplicationAbortOnFatalLog ); } awake \u00b6 bool NFLogModule :: Awake () { mnLogCountTotal = 0 ; //\u8fd9\u4e2a\u4f1a\u662f\u7a7a\u4e32 std :: string strLogConfigName = pPluginManager -> GetLogConfigName (); if ( strLogConfigName . empty ()) { strLogConfigName = pPluginManager -> GetAppName (); } // \u83b7\u53d6log\u914d\u7f6e\u6587\u4ef6 string strAppLogName = GetConfigPath ( strLogConfigName ); el :: Configurations conf ( strAppLogName ); el :: Configuration * pConfiguration = conf . get ( el :: Level :: Debug , el :: ConfigurationType :: Filename ); // \u5982\u679c\u6ca1\u6709\u83b7\u53d6\u5230 DBServer \u6216\u8005 GamerServer \u7b49 \u7684\u914d\u7f6e\u6587\u4ef6 \u5c31\u52a0\u8f7d\u9ed8\u8ba4\u7684\u914d\u7f6e\u6587\u4ef6 if ( pConfiguration == nullptr ) { conf = el :: Configurations ( GetConfigPath ( \"Default\" )); pConfiguration = conf . get ( el :: Level :: Debug , el :: ConfigurationType :: Filename ); } const std :: string & strFileName = pConfiguration -> value (); pConfiguration -> setValue ( pPluginManager -> GetConfigPath () + strFileName ); std :: cout << \"LogConfig: \" << strAppLogName << std :: endl ; el :: Loggers :: reconfigureAllLoggers ( conf ); el :: Helpers :: installPreRollOutCallback ( rolloutHandler ); return true ; } \u76ee\u524d \u6211\u770b\u5230\u7684\u662fGetLogConfigName() \u8fd4\u56de\u7684\u662f\u7a7a\u4e32\u3002 setValue \u91cd\u65b0\u8bbe\u7f6e\u65e5\u5fd7\u6587\u4ef6\u4e3a \u201clogs\\master_server_debug_%datetime{%Y%M%d}.log\u201d\uff08\u5047\u5982\u5f53\u524d\u662fMasterServer\uff09 std :: string NFLogModule :: GetConfigPath ( const std :: string & fileName ) { std :: string strAppLogName ; #if NF_PLATFORM == NF_PLATFORM_WIN #ifdef NF_DEBUG_MODE strAppLogName = pPluginManager -> GetConfigPath () + \"NFDataCfg/Debug/logconfig/\" + fileName + \"_win.conf\" ; #else strAppLogName = pPluginManager -> GetConfigPath () + \"NFDataCfg/Release/logconfig/\" + fileName + \"_win.conf\" ; #endif #else #ifdef NF_DEBUG_MODE strAppLogName = pPluginManager -> GetConfigPath () + \"NFDataCfg/Debug/logconfig/\" + fileName + \".conf\" ; #else strAppLogName = pPluginManager -> GetConfigPath () + \"NFDataCfg/Release/logconfig/\" + fileName + \".conf\" ; #endif #endif return strAppLogName ; } \u5047\u5982 fileName \u662f MasterServe \u90a3\u4e48\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u662f \u201c../NFDataCfg/Debug/logconfig/MasterServer_win.conf\u201d Log\u51fd\u6570 \u00b6 bool NFLogModule :: Log ( const NF_LOG_LEVEL nll , const char * format , ...) { //\u65e5\u5fd7\u8bb0\u5f55\u7684\u603b\u6570\u52a0\u4e00 mnLogCountTotal ++ ; char szBuffer [ 1024 * 10 ] = { 0 }; va_list args ; va_start ( args , format ); vsnprintf ( szBuffer , sizeof ( szBuffer ) - 1 , format , args ); va_end ( args ); mstrLocalStream . clear (); mstrLocalStream . append ( std :: to_string ( mnLogCountTotal )); mstrLocalStream . append ( \" | \" ); mstrLocalStream . append ( std :: to_string ( pPluginManager -> GetAppID ())); mstrLocalStream . append ( \" | \" ); mstrLocalStream . append ( szBuffer ); if ( mLogHooker ) { mLogHooker . get () -> operator ()( nll , mstrLocalStream ); } switch ( nll ) { case NFILogModule :: NLL_DEBUG_NORMAL : { std :: cout << termcolor :: green ; LOG ( DEBUG ) << mstrLocalStream ; } break ; case NFILogModule :: NLL_INFO_NORMAL : { std :: cout << termcolor :: green ; LOG ( INFO ) << mstrLocalStream ; } break ; case NFILogModule :: NLL_WARING_NORMAL : { std :: cout << termcolor :: yellow ; LOG ( WARNING ) << mstrLocalStream ; } break ; case NFILogModule :: NLL_ERROR_NORMAL : { std :: cout << termcolor :: red ; LOG ( ERROR ) << mstrLocalStream ; //LogStack(); } break ; case NFILogModule :: NLL_FATAL_NORMAL : { std :: cout << termcolor :: red ; LOG ( FATAL ) << mstrLocalStream ; } break ; default : { std :: cout << termcolor :: green ; LOG ( INFO ) << mstrLocalStream ; } break ; } std :: cout << termcolor :: reset ; return true ; } \u5c06\u53c2\u6570\u4fdd\u5b58\u5230mstrLocalStream\u5b57\u7b26\u4e32\u4e2d \u6839\u636elog\u7684\u7ea7\u522b \u6539\u53d8\u5b57\u4f53\u7684\u989c\u8272\u8fdb\u884clog\u8f93\u51fa\u3002 LogStack \u51fd\u6570 \u00b6 void NFLogModule :: LogStack () { //To Add #if NF_PLATFORM == NF_PLATFORM_WIN time_t t = time ( 0 ); char szDmupName [ MAX_PATH ]; tm * ptm = localtime ( & t ); sprintf ( szDmupName , \"%d_%d_%d_%d_%d_%d.dmp\" , ptm -> tm_year + 1900 , ptm -> tm_mon , ptm -> tm_mday , ptm -> tm_hour , ptm -> tm_min , ptm -> tm_sec ); HANDLE hDumpFile = CreateFileA ( szDmupName , GENERIC_WRITE , 0 , NULL , CREATE_ALWAYS , FILE_ATTRIBUTE_NORMAL , NULL ); MINIDUMP_EXCEPTION_INFORMATION dumpInfo ; //dumpInfo.ExceptionPointers = pException; dumpInfo . ThreadId = GetCurrentThreadId (); dumpInfo . ClientPointers = TRUE ; MiniDumpWriteDump ( GetCurrentProcess (), GetCurrentProcessId (), hDumpFile , MiniDumpNormal , & dumpInfo , NULL , NULL ); CloseHandle ( hDumpFile ); #else int size = 16 ; void * array [ 16 ]; int stack_num = backtrace ( array , size ); char ** stacktrace = backtrace_symbols ( array , stack_num ); for ( int i = 0 ; i < stack_num ; ++ i ) { //printf(\"%s\\n\", stacktrace[i]); Log ( NLL_FATAL_NORMAL , \"%s\" , stacktrace [ i ]); } free ( stacktrace ); #endif } \u5c06\u65f6\u95f4 \u548c\u7ebf\u7a0b\u4fe1\u606f \u4fdd\u5b58\u5230Dump\u6587\u4ef6\u4e2d \u5b8c\u6574\u4ee3\u7801 \u00b6 #define GLOG_NO_ABBREVIATED_SEVERITIES #include <stdarg.h> #include \"NFLogModule.h\" #include \"NFLogPlugin.h\" #include \"termcolor.hpp\" #include \"NFComm/NFCore/easylogging++.h\" #if NF_PLATFORM != NF_PLATFORM_WIN #include <execinfo.h> #endif unsigned int NFLogModule :: idx = 0 ; bool NFLogModule :: CheckLogFileExist ( const char * filename ) { std :: stringstream stream ; stream << filename << \".\" << ++ idx ; std :: fstream file ; file . open ( stream . str (), std :: ios :: in ); if ( file ) { return CheckLogFileExist ( filename ); } return false ; } void NFLogModule :: rolloutHandler ( const char * filename , std :: size_t size ) { std :: stringstream stream ; if ( ! CheckLogFileExist ( filename )) { stream << filename << \".\" << idx ; rename ( filename , stream . str (). c_str ()); } } std :: string NFLogModule :: GetConfigPath ( const std :: string & fileName ) { std :: string strAppLogName ; #if NF_PLATFORM == NF_PLATFORM_WIN #ifdef NF_DEBUG_MODE strAppLogName = pPluginManager -> GetConfigPath () + \"NFDataCfg/Debug/logconfig/\" + fileName + \"_win.conf\" ; #else strAppLogName = pPluginManager -> GetConfigPath () + \"NFDataCfg/Release/logconfig/\" + fileName + \"_win.conf\" ; #endif #else #ifdef NF_DEBUG_MODE strAppLogName = pPluginManager -> GetConfigPath () + \"NFDataCfg/Debug/logconfig/\" + fileName + \".conf\" ; #else strAppLogName = pPluginManager -> GetConfigPath () + \"NFDataCfg/Release/logconfig/\" + fileName + \".conf\" ; #endif #endif return strAppLogName ; } NFLogModule :: NFLogModule ( NFIPluginManager * p ) { pPluginManager = p ; el :: Loggers :: addFlag ( el :: LoggingFlag :: StrictLogFileSizeCheck ); el :: Loggers :: addFlag ( el :: LoggingFlag :: DisableApplicationAbortOnFatalLog ); } bool NFLogModule :: Awake () { mnLogCountTotal = 0 ; std :: string strLogConfigName = pPluginManager -> GetLogConfigName (); if ( strLogConfigName . empty ()) { strLogConfigName = pPluginManager -> GetAppName (); } string strAppLogName = GetConfigPath ( strLogConfigName ); el :: Configurations conf ( strAppLogName ); el :: Configuration * pConfiguration = conf . get ( el :: Level :: Debug , el :: ConfigurationType :: Filename ); if ( pConfiguration == nullptr ) { conf = el :: Configurations ( GetConfigPath ( \"Default\" )); pConfiguration = conf . get ( el :: Level :: Debug , el :: ConfigurationType :: Filename ); } const std :: string & strFileName = pConfiguration -> value (); pConfiguration -> setValue ( pPluginManager -> GetConfigPath () + strFileName ); std :: cout << \"LogConfig: \" << strAppLogName << std :: endl ; el :: Loggers :: reconfigureAllLoggers ( conf ); el :: Helpers :: installPreRollOutCallback ( rolloutHandler ); return true ; } bool NFLogModule :: Init () { return true ; } bool NFLogModule :: Shut () { el :: Helpers :: uninstallPreRollOutCallback (); return true ; } bool NFLogModule :: BeforeShut () { return true ; } bool NFLogModule :: AfterInit () { return true ; } bool NFLogModule :: Execute () { return true ; } bool NFLogModule :: Log ( const NF_LOG_LEVEL nll , const char * format , ...) { mnLogCountTotal ++ ; char szBuffer [ 1024 * 10 ] = { 0 }; va_list args ; va_start ( args , format ); vsnprintf ( szBuffer , sizeof ( szBuffer ) - 1 , format , args ); va_end ( args ); mstrLocalStream . clear (); mstrLocalStream . append ( std :: to_string ( mnLogCountTotal )); mstrLocalStream . append ( \" | \" ); mstrLocalStream . append ( std :: to_string ( pPluginManager -> GetAppID ())); mstrLocalStream . append ( \" | \" ); mstrLocalStream . append ( szBuffer ); if ( mLogHooker ) { mLogHooker . get () -> operator ()( nll , mstrLocalStream ); } switch ( nll ) { case NFILogModule :: NLL_DEBUG_NORMAL : { std :: cout << termcolor :: green ; LOG ( DEBUG ) << mstrLocalStream ; } break ; case NFILogModule :: NLL_INFO_NORMAL : { std :: cout << termcolor :: green ; LOG ( INFO ) << mstrLocalStream ; } break ; case NFILogModule :: NLL_WARING_NORMAL : { std :: cout << termcolor :: yellow ; LOG ( WARNING ) << mstrLocalStream ; } break ; case NFILogModule :: NLL_ERROR_NORMAL : { std :: cout << termcolor :: red ; LOG ( ERROR ) << mstrLocalStream ; //LogStack(); } break ; case NFILogModule :: NLL_FATAL_NORMAL : { std :: cout << termcolor :: red ; LOG ( FATAL ) << mstrLocalStream ; } break ; default : { std :: cout << termcolor :: green ; LOG ( INFO ) << mstrLocalStream ; } break ; } std :: cout << termcolor :: reset ; return true ; } bool NFLogModule :: LogElement ( const NF_LOG_LEVEL nll , const NFGUID ident , const std :: string & strElement , const std :: string & strDesc , const char * func , int line ) { if ( line > 0 ) { Log ( nll , \"[ELEMENT] Indent[%s] Element[%s] %s %s %d\" , ident . ToString (). c_str (), strElement . c_str (), strDesc . c_str (), func , line ); } else { Log ( nll , \"[ELEMENT] Indent[%s] Element[%s] %s\" , ident . ToString (). c_str (), strElement . c_str (), strDesc . c_str ()); } return true ; } bool NFLogModule :: LogProperty ( const NF_LOG_LEVEL nll , const NFGUID ident , const std :: string & strProperty , const std :: string & strDesc , const char * func , int line ) { if ( line > 0 ) { Log ( nll , \"[PROPERTY] Indent[%s] Property[%s] %s %s %d\" , ident . ToString (). c_str (), strProperty . c_str (), strDesc . c_str (), func , line ); } else { Log ( nll , \"[PROPERTY] Indent[%s] Property[%s] %s\" , ident . ToString (). c_str (), strProperty . c_str (), strDesc . c_str ()); } return true ; } bool NFLogModule :: LogRecord ( const NF_LOG_LEVEL nll , const NFGUID ident , const std :: string & strRecord , const std :: string & strDesc , const int nRow , const int nCol , const char * func , int line ) { if ( line > 0 ) { Log ( nll , \"[RECORD] Indent[%s] Record[%s] Row[%d] Col[%d] %s %s %d\" , ident . ToString (). c_str (), strRecord . c_str (), nRow , nCol , strDesc . c_str (), func , line ); } else { Log ( nll , \"[RECORD] Indent[%s] Record[%s] Row[%d] Col[%d] %s\" , ident . ToString (). c_str (), strRecord . c_str (), nRow , nCol , strDesc . c_str ()); } return true ; } bool NFLogModule :: LogRecord ( const NF_LOG_LEVEL nll , const NFGUID ident , const std :: string & strRecord , const std :: string & strDesc , const char * func , int line ) { if ( line > 0 ) { Log ( nll , \"[RECORD] Indent[%s] Record[%s] %s %s %d\" , ident . ToString (). c_str (), strRecord . c_str (), strDesc . c_str (), func , line ); } else { Log ( nll , \"[RECORD] Indent[%s] Record[%s] %s\" , ident . ToString (). c_str (), strRecord . c_str (), strDesc . c_str ()); } return true ; } bool NFLogModule :: LogObject ( const NF_LOG_LEVEL nll , const NFGUID ident , const std :: string & strDesc , const char * func , int line ) { if ( line > 0 ) { Log ( nll , \"[OBJECT] Indent[%s] %s %s %d\" , ident . ToString (). c_str (), strDesc . c_str (), func , line ); } else { Log ( nll , \"[OBJECT] Indent[%s] %s\" , ident . ToString (). c_str (), strDesc . c_str ()); } return true ; } void NFLogModule :: LogStack () { //To Add #if NF_PLATFORM == NF_PLATFORM_WIN time_t t = time ( 0 ); char szDmupName [ MAX_PATH ]; tm * ptm = localtime ( & t ); sprintf ( szDmupName , \"%d_%d_%d_%d_%d_%d.dmp\" , ptm -> tm_year + 1900 , ptm -> tm_mon , ptm -> tm_mday , ptm -> tm_hour , ptm -> tm_min , ptm -> tm_sec ); HANDLE hDumpFile = CreateFileA ( szDmupName , GENERIC_WRITE , 0 , NULL , CREATE_ALWAYS , FILE_ATTRIBUTE_NORMAL , NULL ); MINIDUMP_EXCEPTION_INFORMATION dumpInfo ; //dumpInfo.ExceptionPointers = pException; dumpInfo . ThreadId = GetCurrentThreadId (); dumpInfo . ClientPointers = TRUE ; MiniDumpWriteDump ( GetCurrentProcess (), GetCurrentProcessId (), hDumpFile , MiniDumpNormal , & dumpInfo , NULL , NULL ); CloseHandle ( hDumpFile ); #else int size = 16 ; void * array [ 16 ]; int stack_num = backtrace ( array , size ); char ** stacktrace = backtrace_symbols ( array , stack_num ); for ( int i = 0 ; i < stack_num ; ++ i ) { //printf(\"%s\\n\", stacktrace[i]); Log ( NLL_FATAL_NORMAL , \"%s\" , stacktrace [ i ]); } free ( stacktrace ); #endif } bool NFLogModule :: LogDebugFunctionDump ( const NFGUID ident , const int nMsg , const std :: string & strArg , const char * func /*= \"\"*/ , const int line /*= 0*/ ) { //#ifdef NF_DEBUG_MODE LogDebug ( ident , strArg + \"MsgID:\" + std :: to_string ( nMsg ), func , line ); //#endif return true ; } bool NFLogModule :: ChangeLogLevel ( const std :: string & strLevel ) { el :: Level logLevel = el :: LevelHelper :: convertFromString ( strLevel . c_str ()); el :: Logger * pLogger = el :: Loggers :: getLogger ( \"default\" ); if ( NULL == pLogger ) { return false ; } el :: Configurations * pConfigurations = pLogger -> configurations (); if ( NULL == pConfigurations ) { return false ; } switch ( logLevel ) { case el :: Level :: Fatal : { el :: Configuration errorConfiguration ( el :: Level :: Error , el :: ConfigurationType :: Enabled , \"false\" ); pConfigurations -> set ( & errorConfiguration ); } case el :: Level :: Error : { el :: Configuration warnConfiguration ( el :: Level :: Warning , el :: ConfigurationType :: Enabled , \"false\" ); pConfigurations -> set ( & warnConfiguration ); } case el :: Level :: Warning : { el :: Configuration infoConfiguration ( el :: Level :: Info , el :: ConfigurationType :: Enabled , \"false\" ); pConfigurations -> set ( & infoConfiguration ); } case el :: Level :: Info : { el :: Configuration debugConfiguration ( el :: Level :: Debug , el :: ConfigurationType :: Enabled , \"false\" ); pConfigurations -> set ( & debugConfiguration ); } case el :: Level :: Debug : break ; default : break ; } el :: Loggers :: reconfigureAllLoggers ( * pConfigurations ); LogInfo ( \"[Log] Change log level as \" + strLevel , __FUNCTION__ , __LINE__ ); return true ; } bool NFLogModule :: LogDebug ( const std :: string & strLog , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_DEBUG_NORMAL , \"%s %s %d\" , strLog . c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_DEBUG_NORMAL , \"%s\" , strLog . c_str ()); } return true ; } bool NFLogModule :: LogInfo ( const std :: string & strLog , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_INFO_NORMAL , \"%s %s %d\" , strLog . c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_INFO_NORMAL , \"%s\" , strLog . c_str ()); } return true ; } bool NFLogModule :: LogWarning ( const std :: string & strLog , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_WARING_NORMAL , \"%s %s %d\" , strLog . c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_WARING_NORMAL , \"%s\" , strLog . c_str ()); } return true ; } bool NFLogModule :: LogError ( const std :: string & strLog , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_ERROR_NORMAL , \"%s %s %d\" , strLog . c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_ERROR_NORMAL , \"%s\" , strLog . c_str ()); } return true ; } bool NFLogModule :: LogFatal ( const std :: string & strLog , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_FATAL_NORMAL , \"%s %s %d\" , strLog . c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_FATAL_NORMAL , \"%s\" , strLog . c_str ()); } return true ; } bool NFLogModule :: LogDebug ( const std :: ostringstream & stream , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_DEBUG_NORMAL , \"%s %s %d\" , stream . str (). c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_DEBUG_NORMAL , \"%s\" , stream . str (). c_str ()); } return true ; } bool NFLogModule :: LogInfo ( const std :: ostringstream & stream , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_INFO_NORMAL , \"%s %s %d\" , stream . str (). c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_INFO_NORMAL , \"%s\" , stream . str (). c_str ()); } return true ; } bool NFLogModule :: LogWarning ( const std :: ostringstream & stream , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_WARING_NORMAL , \"%s %s %d\" , stream . str (). c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_WARING_NORMAL , \"%s\" , stream . str (). c_str ()); } return true ; } bool NFLogModule :: LogError ( const std :: ostringstream & stream , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_ERROR_NORMAL , \"%s %s %d\" , stream . str (). c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_ERROR_NORMAL , \"%s\" , stream . str (). c_str ()); } return true ; } bool NFLogModule :: LogFatal ( const std :: ostringstream & stream , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_FATAL_NORMAL , \"%s %s %d\" , stream . str (). c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_FATAL_NORMAL , \"%s\" , stream . str (). c_str ()); } return true ; } bool NFLogModule :: LogDebug ( const NFGUID ident , const std :: string & strLog , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_DEBUG_NORMAL , \"Indent[%s] %s %s %d\" , ident . ToString (). c_str (), strLog . c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_DEBUG_NORMAL , \"Indent[%s] %s\" , ident . ToString (). c_str (), strLog . c_str ()); } return true ; } bool NFLogModule :: LogInfo ( const NFGUID ident , const std :: string & strLog , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_INFO_NORMAL , \"Indent[%s] %s %s %d\" , ident . ToString (). c_str (), strLog . c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_INFO_NORMAL , \"Indent[%s] %s\" , ident . ToString (). c_str (), strLog . c_str ()); } return true ; } bool NFLogModule :: LogWarning ( const NFGUID ident , const std :: string & strLog , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_WARING_NORMAL , \"Indent[%s] %s %s %d\" , ident . ToString (). c_str (), strLog . c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_WARING_NORMAL , \"Indent[%s] %s\" , ident . ToString (). c_str (), strLog . c_str ()); } return true ; } bool NFLogModule :: LogError ( const NFGUID ident , const std :: string & strLog , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_ERROR_NORMAL , \"Indent[%s] %s %s %d\" , ident . ToString (). c_str (), strLog . c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_ERROR_NORMAL , \"Indent[%s] %s\" , ident . ToString (). c_str (), strLog . c_str ()); } return true ; } bool NFLogModule :: LogFatal ( const NFGUID ident , const std :: string & strLog , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_FATAL_NORMAL , \"Indent[%s] %s %s %d\" , ident . ToString (). c_str (), strLog . c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_FATAL_NORMAL , \"Indent[%s] %s\" , ident . ToString (). c_str (), strLog . c_str ()); } return true ; } bool NFLogModule :: LogDebug ( const NFGUID ident , const std :: ostringstream & stream , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_DEBUG_NORMAL , \"Indent[%s] %s %s %d\" , ident . ToString (). c_str (), stream . str (). c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_DEBUG_NORMAL , \"Indent[%s] %s\" , ident . ToString (). c_str (), stream . str (). c_str ()); } return true ; } bool NFLogModule :: LogInfo ( const NFGUID ident , const std :: ostringstream & stream , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_INFO_NORMAL , \"Indent[%s] %s %s %d\" , ident . ToString (). c_str (), stream . str (). c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_INFO_NORMAL , \"Indent[%s] %s\" , ident . ToString (). c_str (), stream . str (). c_str ()); } return true ; } bool NFLogModule :: LogWarning ( const NFGUID ident , const std :: ostringstream & stream , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_WARING_NORMAL , \"Indent[%s] %s %s %d\" , ident . ToString (). c_str (), stream . str (). c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_WARING_NORMAL , \"Indent[%s] %s\" , ident . ToString (). c_str (), stream . str (). c_str ()); } return true ; } bool NFLogModule :: LogError ( const NFGUID ident , const std :: ostringstream & stream , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_ERROR_NORMAL , \"Indent[%s] %s %s %d\" , ident . ToString (). c_str (), stream . str (). c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_ERROR_NORMAL , \"Indent[%s] %s\" , ident . ToString (). c_str (), stream . str (). c_str ()); } return true ; } bool NFLogModule :: LogFatal ( const NFGUID ident , const std :: ostringstream & stream , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_FATAL_NORMAL , \"Indent[%s] %s %s %d\" , ident . ToString (). c_str (), stream . str (). c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_FATAL_NORMAL , \"Indent[%s] %s\" , ident . ToString (). c_str (), stream . str (). c_str ()); } return true ; } void NFLogModule :: StackTrace ( /*const NF_LOG_LEVEL nll = NFILogModule::NLL_FATAL_NORMAL*/ ) { #if NF_PLATFORM != NF_PLATFORM_WIN int size = 8 ; void * array [ 8 ]; int stack_num = backtrace ( array , size ); char ** stacktrace = backtrace_symbols ( array , stack_num ); for ( int i = 0 ; i < stack_num ; ++ i ) { //printf(\"%s\\n\", stacktrace[i]); Log ( NLL_FATAL_NORMAL , \"%s\" , stacktrace [ i ]); } free ( stacktrace ); #else static const int MAX_STACK_FRAMES = 8 ; void * pStack [ MAX_STACK_FRAMES ]; HANDLE process = GetCurrentProcess (); SymInitialize ( process , NULL , TRUE ); WORD frames = CaptureStackBackTrace ( 0 , MAX_STACK_FRAMES , pStack , NULL ); Log ( NLL_FATAL_NORMAL , \"stack traceback: \" ); //LOG(FATAL) << \"stack traceback: \" << std::endl; for ( WORD i = 0 ; i < frames ; ++ i ) { DWORD64 address = ( DWORD64 )( pStack [ i ]); DWORD64 displacementSym = 0 ; char buffer [ sizeof ( SYMBOL_INFO ) + MAX_SYM_NAME * sizeof ( TCHAR )]; PSYMBOL_INFO pSymbol = ( PSYMBOL_INFO ) buffer ; pSymbol -> SizeOfStruct = sizeof ( SYMBOL_INFO ); pSymbol -> MaxNameLen = MAX_SYM_NAME ; DWORD displacementLine = 0 ; IMAGEHLP_LINE64 line ; //SymSetOptions(SYMOPT_LOAD_LINES); line . SizeOfStruct = sizeof ( IMAGEHLP_LINE64 ); if ( SymFromAddr ( process , address , & displacementSym , pSymbol ) && SymGetLineFromAddr64 ( process , address , & displacementLine , & line )) { Log ( NLL_FATAL_NORMAL , \" \\t %s at %s : %d (0x%16d)\" , pSymbol -> Name , line . FileName , line . LineNumber , pSymbol -> Address ); //LOG(FATAL) << \"\\t\" << pSymbol->Name << \" at \" << line.FileName << \":\" << line.LineNumber << \"(0x\" << std::hex << pSymbol->Address << std::dec << \")\" << std::endl; } else { Log ( NLL_FATAL_NORMAL , \" \\t error %d\" , GetLastError ()); //LOG(FATAL) << \"\\terror: \" << GetLastError() << std::endl; } } #endif } void NFLogModule :: SetHooker ( LOG_HOOKER_FUNCTOR_PTR hooker ) { mLogHooker = hooker ; }","title":"NFLogModule"},{"location":"NoahGameFrame/NFLogPlugin/NFLogModule/#nflogmodule","text":"","title":"NFLogModule \u89e3\u6790"},{"location":"NoahGameFrame/NFLogPlugin/NFLogModule/#nflogmoduleh","text":"#ifndef NF_LOG_MODULE_H #define NF_LOG_MODULE_H #include \"NFComm/NFPluginModule/NFILogModule.h\" #include \"NFComm/NFCore/NFPerformance.hpp\" class NFLogModule : public NFILogModule { public : NFLogModule ( NFIPluginManager * p ); virtual ~ NFLogModule () {} virtual bool Awake (); virtual bool Init (); virtual bool Shut (); virtual bool BeforeShut (); virtual bool AfterInit (); virtual bool Execute (); /////////////////////////////////////////////////////////////////////// virtual void LogStack (); virtual bool LogElement ( const NF_LOG_LEVEL nll , const NFGUID ident , const std :: string & strElement , const std :: string & strDesc , const char * func = \"\" , int line = 0 ); virtual bool LogProperty ( const NF_LOG_LEVEL nll , const NFGUID ident , const std :: string & strProperty , const std :: string & strDesc , const char * func = \"\" , int line = 0 ); virtual bool LogRecord ( const NF_LOG_LEVEL nll , const NFGUID ident , const std :: string & strRecord , const std :: string & strDesc , const int nRow , const int nCol , const char * func = \"\" , int line = 0 ); virtual bool LogRecord ( const NF_LOG_LEVEL nll , const NFGUID ident , const std :: string & strRecord , const std :: string & strDesc , const char * func = \"\" , int line = 0 ); virtual bool LogObject ( const NF_LOG_LEVEL nll , const NFGUID ident , const std :: string & strDesc , const char * func = \"\" , int line = 0 ); virtual bool LogDebug ( const std :: string & strLog , const char * func = \"\" , int line = 0 ); virtual bool LogInfo ( const std :: string & strLog , const char * func = \"\" , int line = 0 ); virtual bool LogWarning ( const std :: string & strLog , const char * func = \"\" , int line = 0 ); virtual bool LogError ( const std :: string & strLog , const char * func = \"\" , int line = 0 ); virtual bool LogFatal ( const std :: string & strLog , const char * func = \"\" , int line = 0 ); virtual bool LogDebug ( const std :: ostringstream & stream , const char * func = \"\" , int line = 0 ); virtual bool LogInfo ( const std :: ostringstream & stream , const char * func = \"\" , int line = 0 ); virtual bool LogWarning ( const std :: ostringstream & stream , const char * func = \"\" , int line = 0 ); virtual bool LogError ( const std :: ostringstream & stream , const char * func = \"\" , int line = 0 ); virtual bool LogFatal ( const std :: ostringstream & stream , const char * func = \"\" , int line = 0 ); virtual bool LogDebug ( const NFGUID ident , const std :: string & strLog , const char * func = \"\" , int line = 0 ); virtual bool LogInfo ( const NFGUID ident , const std :: string & strLog , const char * func = \"\" , int line = 0 ); virtual bool LogWarning ( const NFGUID ident , const std :: string & strLog , const char * func = \"\" , int line = 0 ); virtual bool LogError ( const NFGUID ident , const std :: string & strLog , const char * func = \"\" , int line = 0 ); virtual bool LogFatal ( const NFGUID ident , const std :: string & strLog , const char * func = \"\" , int line = 0 ); virtual bool LogDebug ( const NFGUID ident , const std :: ostringstream & stream , const char * func = \"\" , int line = 0 ); virtual bool LogInfo ( const NFGUID ident , const std :: ostringstream & stream , const char * func = \"\" , int line = 0 ); virtual bool LogWarning ( const NFGUID ident , const std :: ostringstream & stream , const char * func = \"\" , int line = 0 ); virtual bool LogError ( const NFGUID ident , const std :: ostringstream & stream , const char * func = \"\" , int line = 0 ); virtual bool LogFatal ( const NFGUID ident , const std :: ostringstream & stream , const char * func = \"\" , int line = 0 ); virtual bool LogDebugFunctionDump ( const NFGUID ident , const int nMsg , const std :: string & strArg , const char * func = \"\" , const int line = 0 ); virtual bool ChangeLogLevel ( const std :: string & strLevel ); virtual void SetHooker ( LOG_HOOKER_FUNCTOR_PTR hooker ); virtual void StackTrace (); protected : virtual bool Log ( const NF_LOG_LEVEL nll , const char * format , ...); static bool CheckLogFileExist ( const char * filename ); static void rolloutHandler ( const char * filename , std :: size_t size ); std :: string GetConfigPath ( const std :: string & fileName ); private : std :: string mstrLocalStream ; LOG_HOOKER_FUNCTOR_PTR mLogHooker ; static unsigned int idx ; uint64_t mnLogCountTotal ; std :: list < NFPerformance > mxPerformanceList ; };","title":"NFLogModule.h"},{"location":"NoahGameFrame/NFLogPlugin/NFLogModule/#nflogmodulecpp","text":"","title":"NFLogModule.cpp"},{"location":"NoahGameFrame/NFLogPlugin/NFLogModule/#_1","text":"\u4fdd\u5b58\u4e86 NFIPluginManager\u7684\u6307\u9488\uff0c\u8bbe\u7f6e\u65e5\u5fd7\u5e93\u3002 StrictLogFileSizeCheck \uff1a \u786e\u4fdd\u6bcf\u6b21\u8bb0\u5f55\u7684\u65f6\u5019\u90fd\u4f1a\u68c0\u67e5\u65e5\u5fd7\u6587\u4ef6\u7684\u5927\u5c0f\u3002 DisableApplicationAbortOnFatalLog \uff1a \u9632\u6b62Fatal\u7ea7\u522b\u65e5\u5fd7\u4e2d\u65ad\u7a0b\u5e8f\u3002 NFLogModule :: NFLogModule ( NFIPluginManager * p ) { pPluginManager = p ; el :: Loggers :: addFlag ( el :: LoggingFlag :: StrictLogFileSizeCheck ); el :: Loggers :: addFlag ( el :: LoggingFlag :: DisableApplicationAbortOnFatalLog ); }","title":"\u6784\u9020\u51fd\u6570"},{"location":"NoahGameFrame/NFLogPlugin/NFLogModule/#awake","text":"bool NFLogModule :: Awake () { mnLogCountTotal = 0 ; //\u8fd9\u4e2a\u4f1a\u662f\u7a7a\u4e32 std :: string strLogConfigName = pPluginManager -> GetLogConfigName (); if ( strLogConfigName . empty ()) { strLogConfigName = pPluginManager -> GetAppName (); } // \u83b7\u53d6log\u914d\u7f6e\u6587\u4ef6 string strAppLogName = GetConfigPath ( strLogConfigName ); el :: Configurations conf ( strAppLogName ); el :: Configuration * pConfiguration = conf . get ( el :: Level :: Debug , el :: ConfigurationType :: Filename ); // \u5982\u679c\u6ca1\u6709\u83b7\u53d6\u5230 DBServer \u6216\u8005 GamerServer \u7b49 \u7684\u914d\u7f6e\u6587\u4ef6 \u5c31\u52a0\u8f7d\u9ed8\u8ba4\u7684\u914d\u7f6e\u6587\u4ef6 if ( pConfiguration == nullptr ) { conf = el :: Configurations ( GetConfigPath ( \"Default\" )); pConfiguration = conf . get ( el :: Level :: Debug , el :: ConfigurationType :: Filename ); } const std :: string & strFileName = pConfiguration -> value (); pConfiguration -> setValue ( pPluginManager -> GetConfigPath () + strFileName ); std :: cout << \"LogConfig: \" << strAppLogName << std :: endl ; el :: Loggers :: reconfigureAllLoggers ( conf ); el :: Helpers :: installPreRollOutCallback ( rolloutHandler ); return true ; } \u76ee\u524d \u6211\u770b\u5230\u7684\u662fGetLogConfigName() \u8fd4\u56de\u7684\u662f\u7a7a\u4e32\u3002 setValue \u91cd\u65b0\u8bbe\u7f6e\u65e5\u5fd7\u6587\u4ef6\u4e3a \u201clogs\\master_server_debug_%datetime{%Y%M%d}.log\u201d\uff08\u5047\u5982\u5f53\u524d\u662fMasterServer\uff09 std :: string NFLogModule :: GetConfigPath ( const std :: string & fileName ) { std :: string strAppLogName ; #if NF_PLATFORM == NF_PLATFORM_WIN #ifdef NF_DEBUG_MODE strAppLogName = pPluginManager -> GetConfigPath () + \"NFDataCfg/Debug/logconfig/\" + fileName + \"_win.conf\" ; #else strAppLogName = pPluginManager -> GetConfigPath () + \"NFDataCfg/Release/logconfig/\" + fileName + \"_win.conf\" ; #endif #else #ifdef NF_DEBUG_MODE strAppLogName = pPluginManager -> GetConfigPath () + \"NFDataCfg/Debug/logconfig/\" + fileName + \".conf\" ; #else strAppLogName = pPluginManager -> GetConfigPath () + \"NFDataCfg/Release/logconfig/\" + fileName + \".conf\" ; #endif #endif return strAppLogName ; } \u5047\u5982 fileName \u662f MasterServe \u90a3\u4e48\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u662f \u201c../NFDataCfg/Debug/logconfig/MasterServer_win.conf\u201d","title":"awake"},{"location":"NoahGameFrame/NFLogPlugin/NFLogModule/#log","text":"bool NFLogModule :: Log ( const NF_LOG_LEVEL nll , const char * format , ...) { //\u65e5\u5fd7\u8bb0\u5f55\u7684\u603b\u6570\u52a0\u4e00 mnLogCountTotal ++ ; char szBuffer [ 1024 * 10 ] = { 0 }; va_list args ; va_start ( args , format ); vsnprintf ( szBuffer , sizeof ( szBuffer ) - 1 , format , args ); va_end ( args ); mstrLocalStream . clear (); mstrLocalStream . append ( std :: to_string ( mnLogCountTotal )); mstrLocalStream . append ( \" | \" ); mstrLocalStream . append ( std :: to_string ( pPluginManager -> GetAppID ())); mstrLocalStream . append ( \" | \" ); mstrLocalStream . append ( szBuffer ); if ( mLogHooker ) { mLogHooker . get () -> operator ()( nll , mstrLocalStream ); } switch ( nll ) { case NFILogModule :: NLL_DEBUG_NORMAL : { std :: cout << termcolor :: green ; LOG ( DEBUG ) << mstrLocalStream ; } break ; case NFILogModule :: NLL_INFO_NORMAL : { std :: cout << termcolor :: green ; LOG ( INFO ) << mstrLocalStream ; } break ; case NFILogModule :: NLL_WARING_NORMAL : { std :: cout << termcolor :: yellow ; LOG ( WARNING ) << mstrLocalStream ; } break ; case NFILogModule :: NLL_ERROR_NORMAL : { std :: cout << termcolor :: red ; LOG ( ERROR ) << mstrLocalStream ; //LogStack(); } break ; case NFILogModule :: NLL_FATAL_NORMAL : { std :: cout << termcolor :: red ; LOG ( FATAL ) << mstrLocalStream ; } break ; default : { std :: cout << termcolor :: green ; LOG ( INFO ) << mstrLocalStream ; } break ; } std :: cout << termcolor :: reset ; return true ; } \u5c06\u53c2\u6570\u4fdd\u5b58\u5230mstrLocalStream\u5b57\u7b26\u4e32\u4e2d \u6839\u636elog\u7684\u7ea7\u522b \u6539\u53d8\u5b57\u4f53\u7684\u989c\u8272\u8fdb\u884clog\u8f93\u51fa\u3002","title":"Log\u51fd\u6570"},{"location":"NoahGameFrame/NFLogPlugin/NFLogModule/#logstack","text":"void NFLogModule :: LogStack () { //To Add #if NF_PLATFORM == NF_PLATFORM_WIN time_t t = time ( 0 ); char szDmupName [ MAX_PATH ]; tm * ptm = localtime ( & t ); sprintf ( szDmupName , \"%d_%d_%d_%d_%d_%d.dmp\" , ptm -> tm_year + 1900 , ptm -> tm_mon , ptm -> tm_mday , ptm -> tm_hour , ptm -> tm_min , ptm -> tm_sec ); HANDLE hDumpFile = CreateFileA ( szDmupName , GENERIC_WRITE , 0 , NULL , CREATE_ALWAYS , FILE_ATTRIBUTE_NORMAL , NULL ); MINIDUMP_EXCEPTION_INFORMATION dumpInfo ; //dumpInfo.ExceptionPointers = pException; dumpInfo . ThreadId = GetCurrentThreadId (); dumpInfo . ClientPointers = TRUE ; MiniDumpWriteDump ( GetCurrentProcess (), GetCurrentProcessId (), hDumpFile , MiniDumpNormal , & dumpInfo , NULL , NULL ); CloseHandle ( hDumpFile ); #else int size = 16 ; void * array [ 16 ]; int stack_num = backtrace ( array , size ); char ** stacktrace = backtrace_symbols ( array , stack_num ); for ( int i = 0 ; i < stack_num ; ++ i ) { //printf(\"%s\\n\", stacktrace[i]); Log ( NLL_FATAL_NORMAL , \"%s\" , stacktrace [ i ]); } free ( stacktrace ); #endif } \u5c06\u65f6\u95f4 \u548c\u7ebf\u7a0b\u4fe1\u606f \u4fdd\u5b58\u5230Dump\u6587\u4ef6\u4e2d","title":"LogStack \u51fd\u6570"},{"location":"NoahGameFrame/NFLogPlugin/NFLogModule/#_2","text":"#define GLOG_NO_ABBREVIATED_SEVERITIES #include <stdarg.h> #include \"NFLogModule.h\" #include \"NFLogPlugin.h\" #include \"termcolor.hpp\" #include \"NFComm/NFCore/easylogging++.h\" #if NF_PLATFORM != NF_PLATFORM_WIN #include <execinfo.h> #endif unsigned int NFLogModule :: idx = 0 ; bool NFLogModule :: CheckLogFileExist ( const char * filename ) { std :: stringstream stream ; stream << filename << \".\" << ++ idx ; std :: fstream file ; file . open ( stream . str (), std :: ios :: in ); if ( file ) { return CheckLogFileExist ( filename ); } return false ; } void NFLogModule :: rolloutHandler ( const char * filename , std :: size_t size ) { std :: stringstream stream ; if ( ! CheckLogFileExist ( filename )) { stream << filename << \".\" << idx ; rename ( filename , stream . str (). c_str ()); } } std :: string NFLogModule :: GetConfigPath ( const std :: string & fileName ) { std :: string strAppLogName ; #if NF_PLATFORM == NF_PLATFORM_WIN #ifdef NF_DEBUG_MODE strAppLogName = pPluginManager -> GetConfigPath () + \"NFDataCfg/Debug/logconfig/\" + fileName + \"_win.conf\" ; #else strAppLogName = pPluginManager -> GetConfigPath () + \"NFDataCfg/Release/logconfig/\" + fileName + \"_win.conf\" ; #endif #else #ifdef NF_DEBUG_MODE strAppLogName = pPluginManager -> GetConfigPath () + \"NFDataCfg/Debug/logconfig/\" + fileName + \".conf\" ; #else strAppLogName = pPluginManager -> GetConfigPath () + \"NFDataCfg/Release/logconfig/\" + fileName + \".conf\" ; #endif #endif return strAppLogName ; } NFLogModule :: NFLogModule ( NFIPluginManager * p ) { pPluginManager = p ; el :: Loggers :: addFlag ( el :: LoggingFlag :: StrictLogFileSizeCheck ); el :: Loggers :: addFlag ( el :: LoggingFlag :: DisableApplicationAbortOnFatalLog ); } bool NFLogModule :: Awake () { mnLogCountTotal = 0 ; std :: string strLogConfigName = pPluginManager -> GetLogConfigName (); if ( strLogConfigName . empty ()) { strLogConfigName = pPluginManager -> GetAppName (); } string strAppLogName = GetConfigPath ( strLogConfigName ); el :: Configurations conf ( strAppLogName ); el :: Configuration * pConfiguration = conf . get ( el :: Level :: Debug , el :: ConfigurationType :: Filename ); if ( pConfiguration == nullptr ) { conf = el :: Configurations ( GetConfigPath ( \"Default\" )); pConfiguration = conf . get ( el :: Level :: Debug , el :: ConfigurationType :: Filename ); } const std :: string & strFileName = pConfiguration -> value (); pConfiguration -> setValue ( pPluginManager -> GetConfigPath () + strFileName ); std :: cout << \"LogConfig: \" << strAppLogName << std :: endl ; el :: Loggers :: reconfigureAllLoggers ( conf ); el :: Helpers :: installPreRollOutCallback ( rolloutHandler ); return true ; } bool NFLogModule :: Init () { return true ; } bool NFLogModule :: Shut () { el :: Helpers :: uninstallPreRollOutCallback (); return true ; } bool NFLogModule :: BeforeShut () { return true ; } bool NFLogModule :: AfterInit () { return true ; } bool NFLogModule :: Execute () { return true ; } bool NFLogModule :: Log ( const NF_LOG_LEVEL nll , const char * format , ...) { mnLogCountTotal ++ ; char szBuffer [ 1024 * 10 ] = { 0 }; va_list args ; va_start ( args , format ); vsnprintf ( szBuffer , sizeof ( szBuffer ) - 1 , format , args ); va_end ( args ); mstrLocalStream . clear (); mstrLocalStream . append ( std :: to_string ( mnLogCountTotal )); mstrLocalStream . append ( \" | \" ); mstrLocalStream . append ( std :: to_string ( pPluginManager -> GetAppID ())); mstrLocalStream . append ( \" | \" ); mstrLocalStream . append ( szBuffer ); if ( mLogHooker ) { mLogHooker . get () -> operator ()( nll , mstrLocalStream ); } switch ( nll ) { case NFILogModule :: NLL_DEBUG_NORMAL : { std :: cout << termcolor :: green ; LOG ( DEBUG ) << mstrLocalStream ; } break ; case NFILogModule :: NLL_INFO_NORMAL : { std :: cout << termcolor :: green ; LOG ( INFO ) << mstrLocalStream ; } break ; case NFILogModule :: NLL_WARING_NORMAL : { std :: cout << termcolor :: yellow ; LOG ( WARNING ) << mstrLocalStream ; } break ; case NFILogModule :: NLL_ERROR_NORMAL : { std :: cout << termcolor :: red ; LOG ( ERROR ) << mstrLocalStream ; //LogStack(); } break ; case NFILogModule :: NLL_FATAL_NORMAL : { std :: cout << termcolor :: red ; LOG ( FATAL ) << mstrLocalStream ; } break ; default : { std :: cout << termcolor :: green ; LOG ( INFO ) << mstrLocalStream ; } break ; } std :: cout << termcolor :: reset ; return true ; } bool NFLogModule :: LogElement ( const NF_LOG_LEVEL nll , const NFGUID ident , const std :: string & strElement , const std :: string & strDesc , const char * func , int line ) { if ( line > 0 ) { Log ( nll , \"[ELEMENT] Indent[%s] Element[%s] %s %s %d\" , ident . ToString (). c_str (), strElement . c_str (), strDesc . c_str (), func , line ); } else { Log ( nll , \"[ELEMENT] Indent[%s] Element[%s] %s\" , ident . ToString (). c_str (), strElement . c_str (), strDesc . c_str ()); } return true ; } bool NFLogModule :: LogProperty ( const NF_LOG_LEVEL nll , const NFGUID ident , const std :: string & strProperty , const std :: string & strDesc , const char * func , int line ) { if ( line > 0 ) { Log ( nll , \"[PROPERTY] Indent[%s] Property[%s] %s %s %d\" , ident . ToString (). c_str (), strProperty . c_str (), strDesc . c_str (), func , line ); } else { Log ( nll , \"[PROPERTY] Indent[%s] Property[%s] %s\" , ident . ToString (). c_str (), strProperty . c_str (), strDesc . c_str ()); } return true ; } bool NFLogModule :: LogRecord ( const NF_LOG_LEVEL nll , const NFGUID ident , const std :: string & strRecord , const std :: string & strDesc , const int nRow , const int nCol , const char * func , int line ) { if ( line > 0 ) { Log ( nll , \"[RECORD] Indent[%s] Record[%s] Row[%d] Col[%d] %s %s %d\" , ident . ToString (). c_str (), strRecord . c_str (), nRow , nCol , strDesc . c_str (), func , line ); } else { Log ( nll , \"[RECORD] Indent[%s] Record[%s] Row[%d] Col[%d] %s\" , ident . ToString (). c_str (), strRecord . c_str (), nRow , nCol , strDesc . c_str ()); } return true ; } bool NFLogModule :: LogRecord ( const NF_LOG_LEVEL nll , const NFGUID ident , const std :: string & strRecord , const std :: string & strDesc , const char * func , int line ) { if ( line > 0 ) { Log ( nll , \"[RECORD] Indent[%s] Record[%s] %s %s %d\" , ident . ToString (). c_str (), strRecord . c_str (), strDesc . c_str (), func , line ); } else { Log ( nll , \"[RECORD] Indent[%s] Record[%s] %s\" , ident . ToString (). c_str (), strRecord . c_str (), strDesc . c_str ()); } return true ; } bool NFLogModule :: LogObject ( const NF_LOG_LEVEL nll , const NFGUID ident , const std :: string & strDesc , const char * func , int line ) { if ( line > 0 ) { Log ( nll , \"[OBJECT] Indent[%s] %s %s %d\" , ident . ToString (). c_str (), strDesc . c_str (), func , line ); } else { Log ( nll , \"[OBJECT] Indent[%s] %s\" , ident . ToString (). c_str (), strDesc . c_str ()); } return true ; } void NFLogModule :: LogStack () { //To Add #if NF_PLATFORM == NF_PLATFORM_WIN time_t t = time ( 0 ); char szDmupName [ MAX_PATH ]; tm * ptm = localtime ( & t ); sprintf ( szDmupName , \"%d_%d_%d_%d_%d_%d.dmp\" , ptm -> tm_year + 1900 , ptm -> tm_mon , ptm -> tm_mday , ptm -> tm_hour , ptm -> tm_min , ptm -> tm_sec ); HANDLE hDumpFile = CreateFileA ( szDmupName , GENERIC_WRITE , 0 , NULL , CREATE_ALWAYS , FILE_ATTRIBUTE_NORMAL , NULL ); MINIDUMP_EXCEPTION_INFORMATION dumpInfo ; //dumpInfo.ExceptionPointers = pException; dumpInfo . ThreadId = GetCurrentThreadId (); dumpInfo . ClientPointers = TRUE ; MiniDumpWriteDump ( GetCurrentProcess (), GetCurrentProcessId (), hDumpFile , MiniDumpNormal , & dumpInfo , NULL , NULL ); CloseHandle ( hDumpFile ); #else int size = 16 ; void * array [ 16 ]; int stack_num = backtrace ( array , size ); char ** stacktrace = backtrace_symbols ( array , stack_num ); for ( int i = 0 ; i < stack_num ; ++ i ) { //printf(\"%s\\n\", stacktrace[i]); Log ( NLL_FATAL_NORMAL , \"%s\" , stacktrace [ i ]); } free ( stacktrace ); #endif } bool NFLogModule :: LogDebugFunctionDump ( const NFGUID ident , const int nMsg , const std :: string & strArg , const char * func /*= \"\"*/ , const int line /*= 0*/ ) { //#ifdef NF_DEBUG_MODE LogDebug ( ident , strArg + \"MsgID:\" + std :: to_string ( nMsg ), func , line ); //#endif return true ; } bool NFLogModule :: ChangeLogLevel ( const std :: string & strLevel ) { el :: Level logLevel = el :: LevelHelper :: convertFromString ( strLevel . c_str ()); el :: Logger * pLogger = el :: Loggers :: getLogger ( \"default\" ); if ( NULL == pLogger ) { return false ; } el :: Configurations * pConfigurations = pLogger -> configurations (); if ( NULL == pConfigurations ) { return false ; } switch ( logLevel ) { case el :: Level :: Fatal : { el :: Configuration errorConfiguration ( el :: Level :: Error , el :: ConfigurationType :: Enabled , \"false\" ); pConfigurations -> set ( & errorConfiguration ); } case el :: Level :: Error : { el :: Configuration warnConfiguration ( el :: Level :: Warning , el :: ConfigurationType :: Enabled , \"false\" ); pConfigurations -> set ( & warnConfiguration ); } case el :: Level :: Warning : { el :: Configuration infoConfiguration ( el :: Level :: Info , el :: ConfigurationType :: Enabled , \"false\" ); pConfigurations -> set ( & infoConfiguration ); } case el :: Level :: Info : { el :: Configuration debugConfiguration ( el :: Level :: Debug , el :: ConfigurationType :: Enabled , \"false\" ); pConfigurations -> set ( & debugConfiguration ); } case el :: Level :: Debug : break ; default : break ; } el :: Loggers :: reconfigureAllLoggers ( * pConfigurations ); LogInfo ( \"[Log] Change log level as \" + strLevel , __FUNCTION__ , __LINE__ ); return true ; } bool NFLogModule :: LogDebug ( const std :: string & strLog , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_DEBUG_NORMAL , \"%s %s %d\" , strLog . c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_DEBUG_NORMAL , \"%s\" , strLog . c_str ()); } return true ; } bool NFLogModule :: LogInfo ( const std :: string & strLog , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_INFO_NORMAL , \"%s %s %d\" , strLog . c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_INFO_NORMAL , \"%s\" , strLog . c_str ()); } return true ; } bool NFLogModule :: LogWarning ( const std :: string & strLog , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_WARING_NORMAL , \"%s %s %d\" , strLog . c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_WARING_NORMAL , \"%s\" , strLog . c_str ()); } return true ; } bool NFLogModule :: LogError ( const std :: string & strLog , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_ERROR_NORMAL , \"%s %s %d\" , strLog . c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_ERROR_NORMAL , \"%s\" , strLog . c_str ()); } return true ; } bool NFLogModule :: LogFatal ( const std :: string & strLog , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_FATAL_NORMAL , \"%s %s %d\" , strLog . c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_FATAL_NORMAL , \"%s\" , strLog . c_str ()); } return true ; } bool NFLogModule :: LogDebug ( const std :: ostringstream & stream , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_DEBUG_NORMAL , \"%s %s %d\" , stream . str (). c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_DEBUG_NORMAL , \"%s\" , stream . str (). c_str ()); } return true ; } bool NFLogModule :: LogInfo ( const std :: ostringstream & stream , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_INFO_NORMAL , \"%s %s %d\" , stream . str (). c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_INFO_NORMAL , \"%s\" , stream . str (). c_str ()); } return true ; } bool NFLogModule :: LogWarning ( const std :: ostringstream & stream , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_WARING_NORMAL , \"%s %s %d\" , stream . str (). c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_WARING_NORMAL , \"%s\" , stream . str (). c_str ()); } return true ; } bool NFLogModule :: LogError ( const std :: ostringstream & stream , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_ERROR_NORMAL , \"%s %s %d\" , stream . str (). c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_ERROR_NORMAL , \"%s\" , stream . str (). c_str ()); } return true ; } bool NFLogModule :: LogFatal ( const std :: ostringstream & stream , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_FATAL_NORMAL , \"%s %s %d\" , stream . str (). c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_FATAL_NORMAL , \"%s\" , stream . str (). c_str ()); } return true ; } bool NFLogModule :: LogDebug ( const NFGUID ident , const std :: string & strLog , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_DEBUG_NORMAL , \"Indent[%s] %s %s %d\" , ident . ToString (). c_str (), strLog . c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_DEBUG_NORMAL , \"Indent[%s] %s\" , ident . ToString (). c_str (), strLog . c_str ()); } return true ; } bool NFLogModule :: LogInfo ( const NFGUID ident , const std :: string & strLog , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_INFO_NORMAL , \"Indent[%s] %s %s %d\" , ident . ToString (). c_str (), strLog . c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_INFO_NORMAL , \"Indent[%s] %s\" , ident . ToString (). c_str (), strLog . c_str ()); } return true ; } bool NFLogModule :: LogWarning ( const NFGUID ident , const std :: string & strLog , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_WARING_NORMAL , \"Indent[%s] %s %s %d\" , ident . ToString (). c_str (), strLog . c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_WARING_NORMAL , \"Indent[%s] %s\" , ident . ToString (). c_str (), strLog . c_str ()); } return true ; } bool NFLogModule :: LogError ( const NFGUID ident , const std :: string & strLog , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_ERROR_NORMAL , \"Indent[%s] %s %s %d\" , ident . ToString (). c_str (), strLog . c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_ERROR_NORMAL , \"Indent[%s] %s\" , ident . ToString (). c_str (), strLog . c_str ()); } return true ; } bool NFLogModule :: LogFatal ( const NFGUID ident , const std :: string & strLog , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_FATAL_NORMAL , \"Indent[%s] %s %s %d\" , ident . ToString (). c_str (), strLog . c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_FATAL_NORMAL , \"Indent[%s] %s\" , ident . ToString (). c_str (), strLog . c_str ()); } return true ; } bool NFLogModule :: LogDebug ( const NFGUID ident , const std :: ostringstream & stream , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_DEBUG_NORMAL , \"Indent[%s] %s %s %d\" , ident . ToString (). c_str (), stream . str (). c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_DEBUG_NORMAL , \"Indent[%s] %s\" , ident . ToString (). c_str (), stream . str (). c_str ()); } return true ; } bool NFLogModule :: LogInfo ( const NFGUID ident , const std :: ostringstream & stream , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_INFO_NORMAL , \"Indent[%s] %s %s %d\" , ident . ToString (). c_str (), stream . str (). c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_INFO_NORMAL , \"Indent[%s] %s\" , ident . ToString (). c_str (), stream . str (). c_str ()); } return true ; } bool NFLogModule :: LogWarning ( const NFGUID ident , const std :: ostringstream & stream , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_WARING_NORMAL , \"Indent[%s] %s %s %d\" , ident . ToString (). c_str (), stream . str (). c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_WARING_NORMAL , \"Indent[%s] %s\" , ident . ToString (). c_str (), stream . str (). c_str ()); } return true ; } bool NFLogModule :: LogError ( const NFGUID ident , const std :: ostringstream & stream , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_ERROR_NORMAL , \"Indent[%s] %s %s %d\" , ident . ToString (). c_str (), stream . str (). c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_ERROR_NORMAL , \"Indent[%s] %s\" , ident . ToString (). c_str (), stream . str (). c_str ()); } return true ; } bool NFLogModule :: LogFatal ( const NFGUID ident , const std :: ostringstream & stream , const char * func , int line ) { if ( line > 0 ) { Log ( NF_LOG_LEVEL :: NLL_FATAL_NORMAL , \"Indent[%s] %s %s %d\" , ident . ToString (). c_str (), stream . str (). c_str (), func , line ); } else { Log ( NF_LOG_LEVEL :: NLL_FATAL_NORMAL , \"Indent[%s] %s\" , ident . ToString (). c_str (), stream . str (). c_str ()); } return true ; } void NFLogModule :: StackTrace ( /*const NF_LOG_LEVEL nll = NFILogModule::NLL_FATAL_NORMAL*/ ) { #if NF_PLATFORM != NF_PLATFORM_WIN int size = 8 ; void * array [ 8 ]; int stack_num = backtrace ( array , size ); char ** stacktrace = backtrace_symbols ( array , stack_num ); for ( int i = 0 ; i < stack_num ; ++ i ) { //printf(\"%s\\n\", stacktrace[i]); Log ( NLL_FATAL_NORMAL , \"%s\" , stacktrace [ i ]); } free ( stacktrace ); #else static const int MAX_STACK_FRAMES = 8 ; void * pStack [ MAX_STACK_FRAMES ]; HANDLE process = GetCurrentProcess (); SymInitialize ( process , NULL , TRUE ); WORD frames = CaptureStackBackTrace ( 0 , MAX_STACK_FRAMES , pStack , NULL ); Log ( NLL_FATAL_NORMAL , \"stack traceback: \" ); //LOG(FATAL) << \"stack traceback: \" << std::endl; for ( WORD i = 0 ; i < frames ; ++ i ) { DWORD64 address = ( DWORD64 )( pStack [ i ]); DWORD64 displacementSym = 0 ; char buffer [ sizeof ( SYMBOL_INFO ) + MAX_SYM_NAME * sizeof ( TCHAR )]; PSYMBOL_INFO pSymbol = ( PSYMBOL_INFO ) buffer ; pSymbol -> SizeOfStruct = sizeof ( SYMBOL_INFO ); pSymbol -> MaxNameLen = MAX_SYM_NAME ; DWORD displacementLine = 0 ; IMAGEHLP_LINE64 line ; //SymSetOptions(SYMOPT_LOAD_LINES); line . SizeOfStruct = sizeof ( IMAGEHLP_LINE64 ); if ( SymFromAddr ( process , address , & displacementSym , pSymbol ) && SymGetLineFromAddr64 ( process , address , & displacementLine , & line )) { Log ( NLL_FATAL_NORMAL , \" \\t %s at %s : %d (0x%16d)\" , pSymbol -> Name , line . FileName , line . LineNumber , pSymbol -> Address ); //LOG(FATAL) << \"\\t\" << pSymbol->Name << \" at \" << line.FileName << \":\" << line.LineNumber << \"(0x\" << std::hex << pSymbol->Address << std::dec << \")\" << std::endl; } else { Log ( NLL_FATAL_NORMAL , \" \\t error %d\" , GetLastError ()); //LOG(FATAL) << \"\\terror: \" << GetLastError() << std::endl; } } #endif } void NFLogModule :: SetHooker ( LOG_HOOKER_FUNCTOR_PTR hooker ) { mLogHooker = hooker ; }","title":"\u5b8c\u6574\u4ee3\u7801"},{"location":"NoahGameFrame/NFLogPlugin/NFLogPlugin/","text":"NFLogPlugin \u89e3\u6790 \u00b6 NFLogPlugin.h \u00b6 #include \"NFComm/NFPluginModule/NFIPlugin.h\" #include \"NFComm/NFPluginModule/NFIPluginManager.h\" ////////////////////////////////////////////////////////////////////////// class NFLogPlugin : public NFIPlugin { public : NFLogPlugin ( NFIPluginManager * p ) { pPluginManager = p ; } virtual const int GetPluginVersion (); virtual const std :: string GetPluginName (); virtual void Install (); virtual void Uninstall (); }; \u5bf9 \u7ee7\u627f\u81eaNFIPlugin\u7684\u63a5\u53e3\u8fdb\u884c\u91cd\u5199\u3002 NFLogPlugin.cpp \u00b6 #include \"NFLogPlugin.h\" #include \"NFLogModule.h\" #ifdef NF_DYNAMIC_PLUGIN NF_EXPORT void DllStartPlugin ( NFIPluginManager * pm ) { CREATE_PLUGIN ( pm , NFLogPlugin ) }; NF_EXPORT void DllStopPlugin ( NFIPluginManager * pm ) { DESTROY_PLUGIN ( pm , NFLogPlugin ) }; #endif ////////////////////////////////////////////////////////////////////////// const int NFLogPlugin :: GetPluginVersion () { return 0 ; } const std :: string NFLogPlugin :: GetPluginName () { return GET_CLASS_NAME ( NFLogPlugin ); } void NFLogPlugin :: Install () { REGISTER_MODULE ( pPluginManager , NFILogModule , NFLogModule ) } void NFLogPlugin :: Uninstall () { UNREGISTER_MODULE ( pPluginManager , NFILogModule , NFLogModule ) } GET_CLASS_NAME \u00b6 \u53ef\u4ee5\u5728 NFPlatform \u5934\u6587\u4ef6 \u770b\u5230 GET_CLASS_NAME \u5b8f\u5b9a\u4e49\u3002 #define GET_CLASS_NAME(className) (#className) \u901a\u8fc7 \u5b8f \u5c06className \u8f6c\u5316\u6210\u5b57\u7b26\u4e32 REGISTER_MODULE \u548c UNREGISTER_MODULE \u00b6 #define REGISTER_MODULE(pManager, classBaseName, className) \\ assert((TIsDerived<classBaseName, NFIModule>::Result)); \\ assert((TIsDerived<className, classBaseName>::Result)); \\ NFIModule* pRegisterModule##className= new className(pManager); \\ pRegisterModule##className->strName = (#className); \\ pManager->AddModule( #classBaseName, pRegisterModule##className );\\ this->AddElement( #classBaseName, pRegisterModule##className ); #define UNREGISTER_MODULE(pManager, classBaseName, className) \\ NFIModule* pUnRegisterModule##className = dynamic_cast<NFIModule*>( pManager->FindModule( #classBaseName )); \\ pManager->RemoveModule( #classBaseName ); \\ this->RemoveElement( #classBaseName ); \\ delete pUnRegisterModule##className; \u5728NFPluginManager \u91cc\u5bf9 mModuleInstanceMap \u8fdb\u884c \u6dfb\u52a0 or \u5220\u9664 module\u3002 \u56e0\u4e3a NFLogModule \u7ee7\u627f\u4e0e NFIModule \u6240\u4ee5 \u4f1a\u5c06 NFILogModule\u5b57\u7b26\u4e32\u4e3akey NFLogModule\u5bf9\u8c61\u6307\u9488\u4e3avalue\uff0c\u5b58\u5165\u5230 NFIModule \u7684map \u91cc\u9762\u3002","title":"NFLogPlugin"},{"location":"NoahGameFrame/NFLogPlugin/NFLogPlugin/#nflogplugin","text":"","title":"NFLogPlugin \u89e3\u6790"},{"location":"NoahGameFrame/NFLogPlugin/NFLogPlugin/#nflogpluginh","text":"#include \"NFComm/NFPluginModule/NFIPlugin.h\" #include \"NFComm/NFPluginModule/NFIPluginManager.h\" ////////////////////////////////////////////////////////////////////////// class NFLogPlugin : public NFIPlugin { public : NFLogPlugin ( NFIPluginManager * p ) { pPluginManager = p ; } virtual const int GetPluginVersion (); virtual const std :: string GetPluginName (); virtual void Install (); virtual void Uninstall (); }; \u5bf9 \u7ee7\u627f\u81eaNFIPlugin\u7684\u63a5\u53e3\u8fdb\u884c\u91cd\u5199\u3002","title":"NFLogPlugin.h"},{"location":"NoahGameFrame/NFLogPlugin/NFLogPlugin/#nflogplugincpp","text":"#include \"NFLogPlugin.h\" #include \"NFLogModule.h\" #ifdef NF_DYNAMIC_PLUGIN NF_EXPORT void DllStartPlugin ( NFIPluginManager * pm ) { CREATE_PLUGIN ( pm , NFLogPlugin ) }; NF_EXPORT void DllStopPlugin ( NFIPluginManager * pm ) { DESTROY_PLUGIN ( pm , NFLogPlugin ) }; #endif ////////////////////////////////////////////////////////////////////////// const int NFLogPlugin :: GetPluginVersion () { return 0 ; } const std :: string NFLogPlugin :: GetPluginName () { return GET_CLASS_NAME ( NFLogPlugin ); } void NFLogPlugin :: Install () { REGISTER_MODULE ( pPluginManager , NFILogModule , NFLogModule ) } void NFLogPlugin :: Uninstall () { UNREGISTER_MODULE ( pPluginManager , NFILogModule , NFLogModule ) }","title":"NFLogPlugin.cpp"},{"location":"NoahGameFrame/NFLogPlugin/NFLogPlugin/#get_class_name","text":"\u53ef\u4ee5\u5728 NFPlatform \u5934\u6587\u4ef6 \u770b\u5230 GET_CLASS_NAME \u5b8f\u5b9a\u4e49\u3002 #define GET_CLASS_NAME(className) (#className) \u901a\u8fc7 \u5b8f \u5c06className \u8f6c\u5316\u6210\u5b57\u7b26\u4e32","title":"GET_CLASS_NAME"},{"location":"NoahGameFrame/NFLogPlugin/NFLogPlugin/#register_module-unregister_module","text":"#define REGISTER_MODULE(pManager, classBaseName, className) \\ assert((TIsDerived<classBaseName, NFIModule>::Result)); \\ assert((TIsDerived<className, classBaseName>::Result)); \\ NFIModule* pRegisterModule##className= new className(pManager); \\ pRegisterModule##className->strName = (#className); \\ pManager->AddModule( #classBaseName, pRegisterModule##className );\\ this->AddElement( #classBaseName, pRegisterModule##className ); #define UNREGISTER_MODULE(pManager, classBaseName, className) \\ NFIModule* pUnRegisterModule##className = dynamic_cast<NFIModule*>( pManager->FindModule( #classBaseName )); \\ pManager->RemoveModule( #classBaseName ); \\ this->RemoveElement( #classBaseName ); \\ delete pUnRegisterModule##className; \u5728NFPluginManager \u91cc\u5bf9 mModuleInstanceMap \u8fdb\u884c \u6dfb\u52a0 or \u5220\u9664 module\u3002 \u56e0\u4e3a NFLogModule \u7ee7\u627f\u4e0e NFIModule \u6240\u4ee5 \u4f1a\u5c06 NFILogModule\u5b57\u7b26\u4e32\u4e3akey NFLogModule\u5bf9\u8c61\u6307\u9488\u4e3avalue\uff0c\u5b58\u5165\u5230 NFIModule \u7684map \u91cc\u9762\u3002","title":"REGISTER_MODULE \u548c UNREGISTER_MODULE"},{"location":"NoahGameFrame/NFLogPlugin/dllmain/","text":"dllmain.cpp \u00b6 \u8fd9\u4e2a\u6587\u4ef6\u4e3b\u8981\u662f\u6839\u636e\u5e73\u53f0 \u5b8f \u6765\u5224\u65ad\u8be5module\u9700\u8981\u8fde\u63a5\u4ec0\u4e48\u683c\u5f0f\u7684\u9759\u6001\u5e93\u6587\u4ef6 #include \"NFComm/NFPluginModule/NFPlatform.h\" #if NF_PLATFORM == NF_PLATFORM_WIN #pragma comment( lib, \"Dbghelp.lib\" ) #endif #ifdef NF_DEBUG_MODE #if NF_PLATFORM == NF_PLATFORM_WIN #ifdef NF_DYNAMIC_PLUGIN #pragma comment( lib, \"NFCore.lib\" ) #else #pragma comment( lib, \"NFCore.lib\" ) #endif // #elif NF_PLATFORM == NF_PLATFORM_LINUX || NF_PLATFORM == NF_PLATFORM_ANDROID #pragma comment( lib, \"NFCore.a\" ) #elif NF_PLATFORM == NF_PLATFORM_APPLE || NF_PLATFORM == NF_PLATFORM_APPLE_IOS #endif #else #if NF_PLATFORM == NF_PLATFORM_WIN #ifdef NF_DYNAMIC_PLUGIN #pragma comment( lib, \"NFCore.lib\" ) #else #pragma comment( lib, \"NFCore.lib\" ) #endif // #elif NF_PLATFORM == NF_PLATFORM_LINUX || NF_PLATFORM == NF_PLATFORM_ANDROID #pragma comment( lib, \"NFCore.a\" ) #elif NF_PLATFORM == NF_PLATFORM_APPLE || NF_PLATFORM == NF_PLATFORM_APPLE_IOS #endif #endif","title":"dllmain"},{"location":"NoahGameFrame/NFLogPlugin/dllmain/#dllmaincpp","text":"\u8fd9\u4e2a\u6587\u4ef6\u4e3b\u8981\u662f\u6839\u636e\u5e73\u53f0 \u5b8f \u6765\u5224\u65ad\u8be5module\u9700\u8981\u8fde\u63a5\u4ec0\u4e48\u683c\u5f0f\u7684\u9759\u6001\u5e93\u6587\u4ef6 #include \"NFComm/NFPluginModule/NFPlatform.h\" #if NF_PLATFORM == NF_PLATFORM_WIN #pragma comment( lib, \"Dbghelp.lib\" ) #endif #ifdef NF_DEBUG_MODE #if NF_PLATFORM == NF_PLATFORM_WIN #ifdef NF_DYNAMIC_PLUGIN #pragma comment( lib, \"NFCore.lib\" ) #else #pragma comment( lib, \"NFCore.lib\" ) #endif // #elif NF_PLATFORM == NF_PLATFORM_LINUX || NF_PLATFORM == NF_PLATFORM_ANDROID #pragma comment( lib, \"NFCore.a\" ) #elif NF_PLATFORM == NF_PLATFORM_APPLE || NF_PLATFORM == NF_PLATFORM_APPLE_IOS #endif #else #if NF_PLATFORM == NF_PLATFORM_WIN #ifdef NF_DYNAMIC_PLUGIN #pragma comment( lib, \"NFCore.lib\" ) #else #pragma comment( lib, \"NFCore.lib\" ) #endif // #elif NF_PLATFORM == NF_PLATFORM_LINUX || NF_PLATFORM == NF_PLATFORM_ANDROID #pragma comment( lib, \"NFCore.a\" ) #elif NF_PLATFORM == NF_PLATFORM_APPLE || NF_PLATFORM == NF_PLATFORM_APPLE_IOS #endif #endif","title":"dllmain.cpp"},{"location":"mkdocs/%E6%97%A0%E6%B3%95build%E7%9A%84%E5%8E%9F%E5%9B%A0/","text":"\u65e0\u6cd5build\u7684\u539f\u56e0 \u00b6 \u63cf\u8ff0: \u00b6 INFO - Cleaning site directory INFO - Building documentation to directory: /../.../.... \u5728building documentation \u4e4b\u540e\u65e0\u6cd5build\u5b8c\u6210\uff0c\u4e00\u76f4\u5361\u5728\u8fd9\u4e2a\u5730\u65b9 \u539f\u56e0: \u00b6 \u6587\u4ef6\u5939\u91cc\u9762\u7684 markdown \u6587\u4ef6\u5b58\u5728\u8bed\u6cd5\u9519\u8bef \u5bfc\u81f4\u65e0\u6cd5\u7f16\u8bd1\u6210html \u6587\u4ef6\uff0c\u5f88\u64cd\u86cb\uff01\uff01\uff01\uff01\uff01\uff01","title":"\u65e0\u6cd5build"},{"location":"mkdocs/%E6%97%A0%E6%B3%95build%E7%9A%84%E5%8E%9F%E5%9B%A0/#build","text":"","title":"\u65e0\u6cd5build\u7684\u539f\u56e0"},{"location":"mkdocs/%E6%97%A0%E6%B3%95build%E7%9A%84%E5%8E%9F%E5%9B%A0/#_1","text":"INFO - Cleaning site directory INFO - Building documentation to directory: /../.../.... \u5728building documentation \u4e4b\u540e\u65e0\u6cd5build\u5b8c\u6210\uff0c\u4e00\u76f4\u5361\u5728\u8fd9\u4e2a\u5730\u65b9","title":"\u63cf\u8ff0:"},{"location":"mkdocs/%E6%97%A0%E6%B3%95build%E7%9A%84%E5%8E%9F%E5%9B%A0/#_2","text":"\u6587\u4ef6\u5939\u91cc\u9762\u7684 markdown \u6587\u4ef6\u5b58\u5728\u8bed\u6cd5\u9519\u8bef \u5bfc\u81f4\u65e0\u6cd5\u7f16\u8bd1\u6210html \u6587\u4ef6\uff0c\u5f88\u64cd\u86cb\uff01\uff01\uff01\uff01\uff01\uff01","title":"\u539f\u56e0:"},{"location":"vs2019%E5%B0%8F%E7%9F%A5%E8%AF%86/%E8%B0%83%E8%AF%95%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/","text":"\u8c03\u8bd5\u6587\u4ef6\u8def\u5f84 \u00b6 \u4eca\u5929\u8c03\u8bd5\u4e00\u4e2a\u7a0b\u5e8fxml\u5e93\u629b\u51fa\u4e86\u5f02\u5e38\uff0c\u6253\u65ad\u70b9\u8fdb\u53bb\u67e5\u770b\uff0c\u8def\u5f84\u90fd\u6ca1\u95ee\u9898\uff0c\u53cc\u51fbexe\u6587\u4ef6\u4e5f\u80fd\u542f\u52a8\uff0c\u4e3a\u4ec0\u4e48\u8c03\u8bd5\u5c31\u63d0\u793a\u627e\u4e0d\u5230\u6587\u4ef6\uff1f \u539f\u6765\u8c03\u8bd5\u7684\u65f6\u5019\uff0cvs2019\u662f\u4ee5main\u51fd\u6570\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\u4e3a\u5f53\u524d\u76ee\u5f55\uff0c\u4e0d\u662fexe\u6240\u5728\u7684\u76ee\u5f55","title":"\u8c03\u8bd5\u6587\u4ef6\u8def\u5f84"},{"location":"vs2019%E5%B0%8F%E7%9F%A5%E8%AF%86/%E8%B0%83%E8%AF%95%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/#_1","text":"\u4eca\u5929\u8c03\u8bd5\u4e00\u4e2a\u7a0b\u5e8fxml\u5e93\u629b\u51fa\u4e86\u5f02\u5e38\uff0c\u6253\u65ad\u70b9\u8fdb\u53bb\u67e5\u770b\uff0c\u8def\u5f84\u90fd\u6ca1\u95ee\u9898\uff0c\u53cc\u51fbexe\u6587\u4ef6\u4e5f\u80fd\u542f\u52a8\uff0c\u4e3a\u4ec0\u4e48\u8c03\u8bd5\u5c31\u63d0\u793a\u627e\u4e0d\u5230\u6587\u4ef6\uff1f \u539f\u6765\u8c03\u8bd5\u7684\u65f6\u5019\uff0cvs2019\u662f\u4ee5main\u51fd\u6570\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\u4e3a\u5f53\u524d\u76ee\u5f55\uff0c\u4e0d\u662fexe\u6240\u5728\u7684\u76ee\u5f55","title":"\u8c03\u8bd5\u6587\u4ef6\u8def\u5f84"}]}