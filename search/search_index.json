{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u8fd9\u662f\u6211\u7528\u6765\u8bb0\u5f55\u7684\u4e2a\u4eba\u535a\u5ba2 \u00b6 \u8be5\u535a\u5ba2\u7684\u5730\u5740\u662f( https://908760230.github.io/MyRecords ) \u5206\u7c7b \u00b6 \u8bbe\u8ba1\u6a21\u5f0f - \u81ea\u5df1\u5199\u7684\u8bbe\u8ba1\u6a21\u5f0f\u7b14\u8bb0 \u6570\u636e\u7ed3\u6784 - \u76ee\u524d\u53ea\u6709AVL\u6811 mkdocs\u603b\u7ed3 - \u6211\u9047\u5230\u7684mkdocs\u5404\u79cd\u9519\u8bef\u603b\u7ed3. C++ - \u4e00\u4e9b\u57fa\u7840\u6216\u8005\u5bb9\u6613\u5fd8\u8bb0\u7684C++\u77e5\u8bc6.","title":"\u4ecb\u7ecd"},{"location":"#_1","text":"\u8be5\u535a\u5ba2\u7684\u5730\u5740\u662f( https://908760230.github.io/MyRecords )","title":"\u8fd9\u662f\u6211\u7528\u6765\u8bb0\u5f55\u7684\u4e2a\u4eba\u535a\u5ba2"},{"location":"#_2","text":"\u8bbe\u8ba1\u6a21\u5f0f - \u81ea\u5df1\u5199\u7684\u8bbe\u8ba1\u6a21\u5f0f\u7b14\u8bb0 \u6570\u636e\u7ed3\u6784 - \u76ee\u524d\u53ea\u6709AVL\u6811 mkdocs\u603b\u7ed3 - \u6211\u9047\u5230\u7684mkdocs\u5404\u79cd\u9519\u8bef\u603b\u7ed3. C++ - \u4e00\u4e9b\u57fa\u7840\u6216\u8005\u5bb9\u6613\u5fd8\u8bb0\u7684C++\u77e5\u8bc6.","title":"\u5206\u7c7b"},{"location":"C%2B%2B/C%2B%2B11%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E9%94%81/","text":"\u3010\u8f6c\u8f7d\u3011C++11\u7ebf\u7a0b\u4e2d\u7684\u51e0\u79cd\u9501 \u00b6 \u7ebf\u7a0b\u4e4b\u95f4\u7684\u9501\u6709\uff1a \u4e92\u65a5\u9501\u3001\u6761\u4ef6\u9501\u3001\u81ea\u65cb\u9501\u3001\u8bfb\u5199\u9501\u3001\u9012\u5f52\u9501 \u3002\u4e00\u822c\u800c\u8a00\uff0c\u9501\u7684\u529f\u80fd\u4e0e\u6027\u80fd\u6210\u53cd\u6bd4\u3002\u4e0d\u8fc7\u6211\u4eec\u4e00\u822c\u4e0d\u4f7f\u7528\u9012\u5f52\u9501\uff08C++\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86std::recursive_mutex\uff09\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u4e0d\u63a8\u8350\u4e86\u3002 \u4e92\u65a5\u9501\uff08Mutex\uff09 \u00b6 \u4e92\u65a5\u9501\u7528\u4e8e\u63a7\u5236\u591a\u4e2a\u7ebf\u7a0b\u5bf9\u4ed6\u4eec\u4e4b\u95f4\u5171\u4eab\u8d44\u6e90\u4e92\u65a5\u8bbf\u95ee\u7684\u4e00\u4e2a\u4fe1\u53f7\u91cf\u3002\u4e5f\u5c31\u662f\u8bf4\u662f\u4e3a\u4e86\u907f\u514d\u591a\u4e2a\u7ebf\u7a0b\u5728\u67d0\u4e00\u65f6\u523b\u540c\u65f6\u64cd\u4f5c\u4e00\u4e2a\u5171\u4eab\u8d44\u6e90\u3002\u4f8b\u5982\u7ebf\u7a0b\u6c60\u4e2d\u7684\u6709\u591a\u4e2a\u7a7a\u95f2\u7ebf\u7a0b\u548c\u4e00\u4e2a\u4efb\u52a1\u961f\u5217\u3002\u4efb\u4f55\u662f\u4e00\u4e2a\u7ebf\u7a0b\u90fd\u8981\u4f7f\u7528\u4e92\u65a5\u9501\u4e92\u65a5\u8bbf\u95ee\u4efb\u52a1\u961f\u5217\uff0c\u4ee5\u907f\u514d\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bbf\u95ee\u4efb\u52a1\u961f\u5217\u4ee5\u53d1\u751f\u9519\u4e71\u3002 \u5728\u67d0\u4e00\u65f6\u523b\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u83b7\u53d6\u4e92\u65a5\u9501\uff0c\u5728\u91ca\u653e\u4e92\u65a5\u9501\u4e4b\u524d\u5176\u4ed6\u7ebf\u7a0b\u90fd\u4e0d\u80fd\u83b7\u53d6\u8be5\u4e92\u65a5\u9501\u3002\u5982\u679c\u5176\u4ed6\u7ebf\u7a0b\u60f3\u8981\u83b7\u53d6\u8fd9\u4e2a\u4e92\u65a5\u9501\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7ebf\u7a0b\u53ea\u80fd\u4ee5\u963b\u585e\u65b9\u5f0f\u8fdb\u884c\u7b49\u5f85\u3002 \u5934\u6587\u4ef6\uff1a< mutex > \u7c7b\u578b\uff1a std::mutex \u7528\u6cd5\uff1a\u5728C++\u4e2d\uff0c\u901a\u8fc7\u6784\u9020std::mutex\u7684\u5b9e\u4f8b\u521b\u5efa\u4e92\u65a5\u5143\uff0c\u8c03\u7528\u6210\u5458\u51fd\u6570lock()\u6765\u9501\u5b9a\u5b83\uff0c\u8c03\u7528unlock()\u6765\u89e3\u9501\uff0c\u4e0d\u8fc7\u4e00\u822c\u4e0d\u63a8\u8350\u8fd9\u79cd\u505a\u6cd5\uff0c\u6807\u51c6C++\u5e93\u63d0\u4f9b\u4e86std::lock_guard\u7c7b\u6a21\u677f\uff0c\u5b9e\u73b0\u4e86\u4e92\u65a5\u5143\u7684RAII\u60ef\u7528\u8bed\u6cd5\u3002std::mutex\u548cstd::lock _ guard\u3002\u90fd\u58f0\u660e\u5728< mutex >\u5934\u6587\u4ef6\u4e2d\u3002 \u53c2\u8003\u4ee3\u7801\uff1a //\u7528\u4e92\u65a5\u5143\u4fdd\u62a4\u5217\u8868 #include <list> #include <mutex> std :: list < int > some_list ; std :: mutex some_mutex ; void add_to_list ( int new_value ) { std :: lock_guard < std :: mutex > guard ( some_mutex ); some_list . push_back ( new_value ); } \u4e92\u65a5\u9501\u53c8\u53ef\u5206\u4e3a\u4e24\u79cd\uff1a \u9012\u5f52\u9501 \u548c \u975e\u9012\u5f52\u9501 \u3002 \u540c\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u591a\u6b21\u83b7\u53d6\u540c\u4e00\u4e2a\u9012\u5f52\u9501\uff0c\u4e0d\u4f1a\u4ea7\u751f\u6b7b\u9501\u3002\u800c\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u591a\u6b21\u83b7\u53d6\u540c\u4e00\u4e2a\u975e\u9012\u5f52\u9501\uff0c\u5219\u4f1a\u4ea7\u751f\u6b7b\u9501\u3002 \u4e92\u65a5\u9501\u9ed8\u8ba4\u5c5e\u6027\u662f\u975e\u9012\u5f52\u7684\uff0c \u6761\u4ef6\u9501 \u00b6 \u6761\u4ef6\u9501\u5c31\u662f\u6240\u8c13\u7684\u6761\u4ef6\u53d8\u91cf\uff0c\u67d0\u4e00\u4e2a\u7ebf\u7a0b\u56e0\u4e3a\u67d0\u4e2a\u6761\u4ef6\u4e3a\u6ee1\u8db3\u65f6\u53ef\u4ee5\u4f7f\u7528\u6761\u4ef6\u53d8\u91cf\u4f7f\u6539\u7a0b\u5e8f\u5904\u4e8e\u963b\u585e\u72b6\u6001\u3002\u4e00\u65e6\u6761\u4ef6\u6ee1\u8db3\u4ee5\u201c\u4fe1\u53f7\u91cf\u201d\u7684\u65b9\u5f0f\u5524\u9192\u4e00\u4e2a\u56e0\u4e3a\u8be5\u6761\u4ef6\u800c\u88ab\u963b\u585e\u7684\u7ebf\u7a0b\u3002\u6700\u4e3a\u5e38\u89c1\u5c31\u662f\u5728\u7ebf\u7a0b\u6c60\u4e2d\uff0c\u8d77\u521d\u6ca1\u6709\u4efb\u52a1\u65f6\u4efb\u52a1\u961f\u5217\u4e3a\u7a7a\uff0c\u6b64\u65f6\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u56e0\u4e3a\u201c\u4efb\u52a1\u961f\u5217\u4e3a\u7a7a\u201d\u8fd9\u4e2a\u6761\u4ef6\u5904\u4e8e\u963b\u585e\u72b6\u6001\u3002\u4e00\u65e6\u6709\u4efb\u52a1\u8fdb\u6765\uff0c\u5c31\u4f1a\u4ee5\u4fe1\u53f7\u91cf\u7684\u65b9\u5f0f\u5524\u9192\u4e00\u4e2a\u7ebf\u7a0b\u6765\u5904\u7406\u8fd9\u4e2a\u4efb\u52a1\u3002 \u5934\u6587\u4ef6\uff1a< condition_variable > \u7c7b\u578b\uff1astd::condition_variable\uff08\u53ea\u548cstd::mutex\u4e00\u8d77\u5de5\u4f5c\uff09 \u548c std::condition_variable_any\uff08\u7b26\u5408\u7c7b\u4f3c\u4e92\u65a5\u5143\u7684\u6700\u4f4e\u6807\u51c6\u7684\u4efb\u4f55\u4e1c\u897f\u4e00\u8d77\u5de5\u4f5c\uff09\u3002 //\u4f7f\u7528std::condition_variable\u7b49\u5f85\u6570\u636e std :: mutex mut ; std :: queue < data_chunk > data_queue ; std :: condition_variable data_cond ; void data_preparation_thread () { while ( more_data_to_prepare ()) { data_chunk const data = prepare_data (); std :: lock_guard < std :: mutex > lk ( mut ); data_queue . push ( data ); data_cond . notify_one (); } } void data_processing_thread () { while ( true ) { std :: unique_lock < std :: mutex > lk ( mut ); //\u8fd9\u91cc\u4f7f\u7528unique_lock\u662f\u4e3a\u4e86\u540e\u9762\u65b9\u4fbf\u89e3\u9501 data_cond . wait ( lk ,{[] return ! data_queue . empty ();}); data_chunk data = data_queue . front (); data_queue . pop (); lk . unlock (); process ( data ); if ( is_last_chunk ( data )) break ; } } 1\uff09wait()\u7684\u5b9e\u73b0\u63a5\u4e0b\u6765\u68c0\u67e5\u6761\u4ef6\uff0c\u5e76\u5728\u6ee1\u8db3\u65f6\u8fd4\u56de\u3002\u5982\u679c\u6761\u4ef6\u4e0d\u6ee1\u8db3\uff0cwait()\u89e3\u9501\u4e92\u65a5\u5143\uff0c\u5e76\u5c06\u8be5\u7ebf\u7a0b\u7f6e\u4e8e\u963b\u585e\u6216\u7b49\u5f85\u72b6\u6001\u3002\u5f53\u6765\u81ea\u6570\u636e\u51c6\u5907\u7ebf\u7a0b\u4e2d\u5bf9notify_one()\u7684\u8c03\u7528\u901a\u77e5\u6761\u4ef6\u53d8\u91cf\u65f6\uff0c\u7ebf\u7a0b\u4ece\u7761\u7720\u72b6\u6001\u4e2d\u82cf\u9192\uff08\u89e3\u9664\u5176\u963b\u585e\uff09\uff0c\u91cd\u65b0\u83b7\u5f97\u4e92\u65a5\u5143\u4e0a\u7684\u9501\uff0c\u5e76\u518d\u6b21\u68c0\u67e5\u6761\u4ef6\uff0c\u5982\u679c\u6761\u4ef6\u5df2\u7ecf\u6ee1\u8db3\uff0c\u5c31\u4ecewait()\u8fd4\u56de\u503c\uff0c\u4e92\u65a5\u5143\u4ecd\u88ab\u9501\u5b9a\u3002\u5982\u679c\u6761\u4ef6\u4e0d\u6ee1\u8db3\uff0c\u8be5\u7ebf\u7a0b\u89e3\u9501\u4e92\u65a5\u5143\uff0c\u5e76\u6062\u590d\u7b49\u5f85\u3002 2\uff09\u5982\u679c\u7b49\u5f85\u7ebf\u7a0b\u53ea\u6253\u7b97\u7b49\u5f85\u4e00\u6b21\uff0c\u90a3\u4e48\u5f53\u6761\u4ef6\u4e3atrue\u65f6\u5b83\u5c31\u4e0d\u4f1a\u518d\u7b49\u5f85\u8fd9\u4e2a\u6761\u4ef6\u53d8\u91cf\u4e86\uff0c\u6761\u4ef6\u53d8\u91cf\u672a\u5fc5\u662f\u540c\u6b65\u673a\u5236\u7684\u6700\u4f73\u9009\u62e9\u3002\u5982\u679c\u7b49\u5f85\u7684\u6761\u4ef6\u662f\u4e00\u4e2a\u7279\u5b9a\u6570\u636e\u5757\u7684\u53ef\u7528\u6027\u65f6\uff0c\u8fd9\u5c24\u5176\u6b63\u786e\u3002\u5728\u8fd9\u4e2a\u573a\u666f\u4e2d\uff0c\u4f7f\u7528\u671f\u503c\uff08future\uff09\u66f4\u5408\u9002\u3002\u4f7f\u7528future\u7b49\u5f85\u4e00\u6b21\u6027\u4e8b\u4ef6\u3002 \u81ea\u65cb\u9501 \u00b6 \u524d\u9762\u7684\u4e24\u79cd\u9501\u662f\u6bd4\u8f83\u5e38\u89c1\u7684\u9501\uff0c\u4e5f\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\u3002\u4e0b\u9762\u901a\u8fc7\u6bd4\u8f83\u4e92\u65a5\u9501\u548c\u81ea\u65cb\u9501\u539f\u7406\u7684\u4e0d\u540c\uff0c\u8fd9\u5bf9\u4e8e\u771f\u6b63\u7406\u89e3\u81ea\u65cb\u9501\u6709\u5f88\u5927\u5e2e\u52a9\u3002 \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u4e24\u4e2a\u5904\u7406\u5668core1\u548ccore2\u8ba1\u7b97\u673a\uff0c\u73b0\u5728\u5728\u8fd9\u53f0\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u7684\u7a0b\u5e8f\u4e2d\u6709\u4e24\u4e2a\u7ebf\u7a0b\uff1aT1\u548cT2\u5206\u522b\u5728\u5904\u7406\u5668core1\u548ccore2\u4e0a\u8fd0\u884c\uff0c\u4e24\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u5171\u4eab\u7740\u4e00\u4e2a\u8d44\u6e90\u3002 \u9996\u5148\u6211\u4eec\u8bf4\u660e\u4e92\u65a5\u9501\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u4e92\u65a5\u9501\u662f\u662f\u4e00\u79cdsleep-waiting\u7684\u9501\u3002\u5047\u8bbe\u7ebf\u7a0bT1\u83b7\u53d6\u4e92\u65a5\u9501\u5e76\u4e14\u6b63\u5728core1\u4e0a\u8fd0\u884c\u65f6\uff0c\u6b64\u65f6\u7ebf\u7a0bT2\u4e5f\u60f3\u8981\u83b7\u53d6\u4e92\u65a5\u9501\uff08pthread_mutex_lock\uff09\uff0c\u4f46\u662f\u7531\u4e8eT1\u6b63\u5728\u4f7f\u7528\u4e92\u65a5\u9501\u4f7f\u5f97T2\u88ab\u963b\u585e\u3002\u5f53T2\u5904\u4e8e\u963b\u585e\u72b6\u6001\u65f6\uff0cT2\u88ab\u653e\u5165\u5230\u7b49\u5f85\u961f\u5217\u4e2d\u53bb\uff0c\u5904\u7406\u5668core2\u4f1a\u53bb\u5904\u7406\u5176\u4ed6\u4efb\u52a1\u800c\u4e0d\u5fc5\u4e00\u76f4\u7b49\u5f85\uff08\u5fd9\u7b49\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\u5904\u7406\u5668\u4e0d\u4f1a\u56e0\u4e3a\u7ebf\u7a0b\u963b\u585e\u800c\u7a7a\u95f2\u7740\uff0c\u5b83\u53bb\u5904\u7406\u5176\u4ed6\u4e8b\u52a1\u53bb\u4e86\u3002 \u800c\u81ea\u65cb\u9501\u5c31\u4e0d\u540c\u4e86\uff0c\u81ea\u65cb\u9501\u662f\u4e00\u79cdbusy-waiting\u7684\u9501\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679cT1\u6b63\u5728\u4f7f\u7528\u81ea\u65cb\u9501\uff0c\u800cT2\u4e5f\u53bb\u7533\u8bf7\u8fd9\u4e2a\u81ea\u65cb\u9501\uff0c\u6b64\u65f6T2\u80af\u5b9a\u5f97\u4e0d\u5230\u8fd9\u4e2a\u81ea\u65cb\u9501\u3002\u4e0e\u4e92\u65a5\u9501\u76f8\u53cd\u7684\u662f\uff0c\u6b64\u65f6\u8fd0\u884cT2\u7684\u5904\u7406\u5668core2\u4f1a\u4e00\u76f4\u4e0d\u65ad\u5730\u5faa\u73af\u68c0\u67e5\u9501\u662f\u5426\u53ef\u7528\uff08\u81ea\u65cb\u9501\u8bf7\u6c42\uff09\uff0c\u76f4\u5230\u83b7\u53d6\u5230\u8fd9\u4e2a\u81ea\u65cb\u9501\u4e3a\u6b62\u3002 \u4ece\u201c\u81ea\u65cb\u9501\u201d\u7684\u540d\u5b57\u4e5f\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u60f3\u8981\u83b7\u53d6\u4e00\u4e2a\u88ab\u4f7f\u7528\u7684\u81ea\u65cb\u9501\uff0c\u90a3\u4e48\u5b83\u4f1a\u4e00\u81f4\u5360\u7528CPU\u8bf7\u6c42\u8fd9\u4e2a\u81ea\u65cb\u9501\u4f7f\u5f97CPU\u4e0d\u80fd\u53bb\u505a\u5176\u4ed6\u7684\u4e8b\u60c5\uff0c\u76f4\u5230\u83b7\u53d6\u8fd9\u4e2a\u9501\u4e3a\u6b62\uff0c\u8fd9\u5c31\u662f\u201c\u81ea\u65cb\u201d\u7684\u542b\u4e49\u3002 \u5f53\u53d1\u751f\u963b\u585e\u65f6\uff0c\u4e92\u65a5\u9501\u53ef\u4ee5\u8ba9CPU\u53bb\u5904\u7406\u5176\u4ed6\u7684\u4efb\u52a1\uff1b\u800c\u81ea\u65cb\u9501\u8ba9CPU\u4e00\u76f4\u4e0d\u65ad\u5faa\u73af\u8bf7\u6c42\u83b7\u53d6\u8fd9\u4e2a\u9501\u3002\u901a\u8fc7\u4e24\u4e2a\u542b\u4e49\u7684\u5bf9\u6bd4\u53ef\u4ee5\u6211\u4eec\u77e5\u9053\u201c\u81ea\u65cb\u9501\u201d\u662f\u6bd4\u8f83\u8017\u8d39CPU\u7684\u3002 //\u4f7f\u7528std::atomic_flag\u7684\u81ea\u65cb\u9501\u4e92\u65a5\u5b9e\u73b0 class spinlock_mutex { std :: atomic_flag flag ; public : spinlock_mutex () : flag ( ATOMIC_FLAG_INIT ) {} void lock () { while ( flag . test_and_set ( std :: memory_order_acquire )); } void unlock () { flag . clear ( std :: memory_order_release ); } } \u8bfb\u5199\u9501 \u00b6 \u8bf4\u5230\u8bfb\u5199\u9501\u6211\u4eec\u53ef\u4ee5\u501f\u52a9\u4e8e\u201c\u8bfb\u8005-\u5199\u8005\u201d\u95ee\u9898\u8fdb\u884c\u7406\u89e3\u3002\u9996\u5148\u6211\u4eec\u7b80\u5355\u8bf4\u4e0b\u201c\u8bfb\u8005-\u5199\u8005\u201d\u95ee\u9898\u3002 \u8ba1\u7b97\u673a\u4e2d\u67d0\u4e9b\u6570\u636e\u88ab\u591a\u4e2a\u8fdb\u7a0b\u5171\u4eab\uff0c\u5bf9\u6570\u636e\u5e93\u7684\u64cd\u4f5c\u6709\u4e24\u79cd\uff1a\u4e00\u79cd\u662f\u8bfb\u64cd\u4f5c\uff0c\u5c31\u662f\u4ece\u6570\u636e\u5e93\u4e2d\u8bfb\u53d6\u6570\u636e\u4e0d\u4f1a\u4fee\u6539\u6570\u636e\u5e93\u4e2d\u5185\u5bb9\uff1b\u53e6\u4e00\u79cd\u5c31\u662f\u5199\u64cd\u4f5c\uff0c\u5199\u64cd\u4f5c\u4f1a\u4fee\u6539\u6570\u636e\u5e93\u4e2d\u5b58\u653e\u7684\u6570\u636e\u3002\u56e0\u6b64\u53ef\u4ee5\u5f97\u5230\u6211\u4eec\u5141\u8bb8\u5728\u6570\u636e\u5e93\u4e0a\u540c\u65f6\u6267\u884c\u591a\u4e2a\u201c\u8bfb\u201d\u64cd\u4f5c\uff0c\u4f46\u662f\u67d0\u4e00\u65f6\u523b\u53ea\u80fd\u5728\u6570\u636e\u5e93\u4e0a\u6709\u4e00\u4e2a\u201c\u5199\u201d\u64cd\u4f5c\u6765\u66f4\u65b0\u6570\u636e\u3002\u8fd9\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8bfb\u8005-\u5199\u8005\u6a21\u578b\u3002 \u5934\u6587\u4ef6\uff1aboost/thread/shared_mutex.cpp \u7c7b\u578b\uff1aboost::shared_lock \u7528\u6cd5\uff1a\u4f60\u53ef\u4ee5\u4f7f\u7528boost::shared_ mutex\u7684\u5b9e\u4f8b\u6765\u5b9e\u73b0\u540c\u6b65\uff0c\u800c\u4e0d\u662f\u4f7f\u7528std::mutex\u7684\u5b9e\u4f8b\u3002\u5bf9\u4e8e\u66f4\u65b0\u64cd\u4f5c\uff0cstd::lock_guard< boost::shared _mutex>\u548c std::unique _lock< boost::shared _mutex>\u53ef\u7528\u4e8e\u9501\u5b9a\uff0c\u4ee5\u53d6\u4ee3\u76f8\u5e94\u7684std::mutex\u7279\u5316\u3002\u8fd9\u786e\u4fdd\u4e86\u72ec\u5360\u8bbf\u95ee\uff0c\u5c31\u50cfstd::mutex\u90a3\u6837\u3002\u90a3\u4e9b\u4e0d\u9700\u8981\u66f4\u65b0\u6570\u636e\u7ed3\u6784\u7684\u7ebf\u7a0b\u80fd\u591f\u8f6c\u800c\u4f7f\u7528 boost::shared _lock< boost::shared _mutex>\u6765\u83b7\u5f97\u5171\u4eab\u8bbf\u95ee\u3002\u8fd9\u4e0estd::unique _lock\u7528\u8d77\u6765\u6b63\u662f\u76f8\u540c\u7684\uff0c\u9664\u4e86\u591a\u4e2a\u7ebf\u7a0b\u5728\u540c\u4e00\u65f6\u95f4\uff0c\u540c\u4e00boost::shared _mutex\u4e0a\u53ef\u80fd\u4f1a\u5177\u6709\u5171\u4eab\u9501\u3002\u552f\u4e00\u7684\u9650\u5236\u662f\uff0c\u5982\u679c\u4efb\u610f\u4e00\u4e2a\u7ebf\u7a0b\u62e5\u6709\u4e00\u4e2a\u5171\u4eab\u9501\uff0c\u8bd5\u56fe\u83b7\u53d6\u72ec\u5360\u9501\u7684\u7ebf\u7a0b\u4f1a\u88ab\u963b\u585e\uff0c\u77e5\u9053\u5176\u4ed6\u7ebf\u7a0b\u5168\u90fd\u64a4\u56de\u5b83\u4eec\u7684\u9501\u3002\u540c\u6837\u7684\uff0c\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u5177\u6709\u72ec\u5360\u9501\uff0c\u5176\u4ed6\u7ebf\u7a0b\u90fd\u4e0d\u80fd\u83b7\u53d6\u5171\u4eab\u9501\u6216\u72ec\u5360\u9501\uff0c\u76f4\u5230\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u64a4\u56de\u5b83\u7684\u9501\u3002","title":"C++11\u7ebf\u7a0b\u4e2d\u7684\u51e0\u79cd\u9501"},{"location":"C%2B%2B/C%2B%2B11%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E9%94%81/#c11","text":"\u7ebf\u7a0b\u4e4b\u95f4\u7684\u9501\u6709\uff1a \u4e92\u65a5\u9501\u3001\u6761\u4ef6\u9501\u3001\u81ea\u65cb\u9501\u3001\u8bfb\u5199\u9501\u3001\u9012\u5f52\u9501 \u3002\u4e00\u822c\u800c\u8a00\uff0c\u9501\u7684\u529f\u80fd\u4e0e\u6027\u80fd\u6210\u53cd\u6bd4\u3002\u4e0d\u8fc7\u6211\u4eec\u4e00\u822c\u4e0d\u4f7f\u7528\u9012\u5f52\u9501\uff08C++\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86std::recursive_mutex\uff09\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u4e0d\u63a8\u8350\u4e86\u3002","title":"\u3010\u8f6c\u8f7d\u3011C++11\u7ebf\u7a0b\u4e2d\u7684\u51e0\u79cd\u9501"},{"location":"C%2B%2B/C%2B%2B11%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E9%94%81/#mutex","text":"\u4e92\u65a5\u9501\u7528\u4e8e\u63a7\u5236\u591a\u4e2a\u7ebf\u7a0b\u5bf9\u4ed6\u4eec\u4e4b\u95f4\u5171\u4eab\u8d44\u6e90\u4e92\u65a5\u8bbf\u95ee\u7684\u4e00\u4e2a\u4fe1\u53f7\u91cf\u3002\u4e5f\u5c31\u662f\u8bf4\u662f\u4e3a\u4e86\u907f\u514d\u591a\u4e2a\u7ebf\u7a0b\u5728\u67d0\u4e00\u65f6\u523b\u540c\u65f6\u64cd\u4f5c\u4e00\u4e2a\u5171\u4eab\u8d44\u6e90\u3002\u4f8b\u5982\u7ebf\u7a0b\u6c60\u4e2d\u7684\u6709\u591a\u4e2a\u7a7a\u95f2\u7ebf\u7a0b\u548c\u4e00\u4e2a\u4efb\u52a1\u961f\u5217\u3002\u4efb\u4f55\u662f\u4e00\u4e2a\u7ebf\u7a0b\u90fd\u8981\u4f7f\u7528\u4e92\u65a5\u9501\u4e92\u65a5\u8bbf\u95ee\u4efb\u52a1\u961f\u5217\uff0c\u4ee5\u907f\u514d\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bbf\u95ee\u4efb\u52a1\u961f\u5217\u4ee5\u53d1\u751f\u9519\u4e71\u3002 \u5728\u67d0\u4e00\u65f6\u523b\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u83b7\u53d6\u4e92\u65a5\u9501\uff0c\u5728\u91ca\u653e\u4e92\u65a5\u9501\u4e4b\u524d\u5176\u4ed6\u7ebf\u7a0b\u90fd\u4e0d\u80fd\u83b7\u53d6\u8be5\u4e92\u65a5\u9501\u3002\u5982\u679c\u5176\u4ed6\u7ebf\u7a0b\u60f3\u8981\u83b7\u53d6\u8fd9\u4e2a\u4e92\u65a5\u9501\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7ebf\u7a0b\u53ea\u80fd\u4ee5\u963b\u585e\u65b9\u5f0f\u8fdb\u884c\u7b49\u5f85\u3002 \u5934\u6587\u4ef6\uff1a< mutex > \u7c7b\u578b\uff1a std::mutex \u7528\u6cd5\uff1a\u5728C++\u4e2d\uff0c\u901a\u8fc7\u6784\u9020std::mutex\u7684\u5b9e\u4f8b\u521b\u5efa\u4e92\u65a5\u5143\uff0c\u8c03\u7528\u6210\u5458\u51fd\u6570lock()\u6765\u9501\u5b9a\u5b83\uff0c\u8c03\u7528unlock()\u6765\u89e3\u9501\uff0c\u4e0d\u8fc7\u4e00\u822c\u4e0d\u63a8\u8350\u8fd9\u79cd\u505a\u6cd5\uff0c\u6807\u51c6C++\u5e93\u63d0\u4f9b\u4e86std::lock_guard\u7c7b\u6a21\u677f\uff0c\u5b9e\u73b0\u4e86\u4e92\u65a5\u5143\u7684RAII\u60ef\u7528\u8bed\u6cd5\u3002std::mutex\u548cstd::lock _ guard\u3002\u90fd\u58f0\u660e\u5728< mutex >\u5934\u6587\u4ef6\u4e2d\u3002 \u53c2\u8003\u4ee3\u7801\uff1a //\u7528\u4e92\u65a5\u5143\u4fdd\u62a4\u5217\u8868 #include <list> #include <mutex> std :: list < int > some_list ; std :: mutex some_mutex ; void add_to_list ( int new_value ) { std :: lock_guard < std :: mutex > guard ( some_mutex ); some_list . push_back ( new_value ); } \u4e92\u65a5\u9501\u53c8\u53ef\u5206\u4e3a\u4e24\u79cd\uff1a \u9012\u5f52\u9501 \u548c \u975e\u9012\u5f52\u9501 \u3002 \u540c\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u591a\u6b21\u83b7\u53d6\u540c\u4e00\u4e2a\u9012\u5f52\u9501\uff0c\u4e0d\u4f1a\u4ea7\u751f\u6b7b\u9501\u3002\u800c\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u591a\u6b21\u83b7\u53d6\u540c\u4e00\u4e2a\u975e\u9012\u5f52\u9501\uff0c\u5219\u4f1a\u4ea7\u751f\u6b7b\u9501\u3002 \u4e92\u65a5\u9501\u9ed8\u8ba4\u5c5e\u6027\u662f\u975e\u9012\u5f52\u7684\uff0c","title":"\u4e92\u65a5\u9501\uff08Mutex\uff09"},{"location":"C%2B%2B/C%2B%2B11%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E9%94%81/#_1","text":"\u6761\u4ef6\u9501\u5c31\u662f\u6240\u8c13\u7684\u6761\u4ef6\u53d8\u91cf\uff0c\u67d0\u4e00\u4e2a\u7ebf\u7a0b\u56e0\u4e3a\u67d0\u4e2a\u6761\u4ef6\u4e3a\u6ee1\u8db3\u65f6\u53ef\u4ee5\u4f7f\u7528\u6761\u4ef6\u53d8\u91cf\u4f7f\u6539\u7a0b\u5e8f\u5904\u4e8e\u963b\u585e\u72b6\u6001\u3002\u4e00\u65e6\u6761\u4ef6\u6ee1\u8db3\u4ee5\u201c\u4fe1\u53f7\u91cf\u201d\u7684\u65b9\u5f0f\u5524\u9192\u4e00\u4e2a\u56e0\u4e3a\u8be5\u6761\u4ef6\u800c\u88ab\u963b\u585e\u7684\u7ebf\u7a0b\u3002\u6700\u4e3a\u5e38\u89c1\u5c31\u662f\u5728\u7ebf\u7a0b\u6c60\u4e2d\uff0c\u8d77\u521d\u6ca1\u6709\u4efb\u52a1\u65f6\u4efb\u52a1\u961f\u5217\u4e3a\u7a7a\uff0c\u6b64\u65f6\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u56e0\u4e3a\u201c\u4efb\u52a1\u961f\u5217\u4e3a\u7a7a\u201d\u8fd9\u4e2a\u6761\u4ef6\u5904\u4e8e\u963b\u585e\u72b6\u6001\u3002\u4e00\u65e6\u6709\u4efb\u52a1\u8fdb\u6765\uff0c\u5c31\u4f1a\u4ee5\u4fe1\u53f7\u91cf\u7684\u65b9\u5f0f\u5524\u9192\u4e00\u4e2a\u7ebf\u7a0b\u6765\u5904\u7406\u8fd9\u4e2a\u4efb\u52a1\u3002 \u5934\u6587\u4ef6\uff1a< condition_variable > \u7c7b\u578b\uff1astd::condition_variable\uff08\u53ea\u548cstd::mutex\u4e00\u8d77\u5de5\u4f5c\uff09 \u548c std::condition_variable_any\uff08\u7b26\u5408\u7c7b\u4f3c\u4e92\u65a5\u5143\u7684\u6700\u4f4e\u6807\u51c6\u7684\u4efb\u4f55\u4e1c\u897f\u4e00\u8d77\u5de5\u4f5c\uff09\u3002 //\u4f7f\u7528std::condition_variable\u7b49\u5f85\u6570\u636e std :: mutex mut ; std :: queue < data_chunk > data_queue ; std :: condition_variable data_cond ; void data_preparation_thread () { while ( more_data_to_prepare ()) { data_chunk const data = prepare_data (); std :: lock_guard < std :: mutex > lk ( mut ); data_queue . push ( data ); data_cond . notify_one (); } } void data_processing_thread () { while ( true ) { std :: unique_lock < std :: mutex > lk ( mut ); //\u8fd9\u91cc\u4f7f\u7528unique_lock\u662f\u4e3a\u4e86\u540e\u9762\u65b9\u4fbf\u89e3\u9501 data_cond . wait ( lk ,{[] return ! data_queue . empty ();}); data_chunk data = data_queue . front (); data_queue . pop (); lk . unlock (); process ( data ); if ( is_last_chunk ( data )) break ; } } 1\uff09wait()\u7684\u5b9e\u73b0\u63a5\u4e0b\u6765\u68c0\u67e5\u6761\u4ef6\uff0c\u5e76\u5728\u6ee1\u8db3\u65f6\u8fd4\u56de\u3002\u5982\u679c\u6761\u4ef6\u4e0d\u6ee1\u8db3\uff0cwait()\u89e3\u9501\u4e92\u65a5\u5143\uff0c\u5e76\u5c06\u8be5\u7ebf\u7a0b\u7f6e\u4e8e\u963b\u585e\u6216\u7b49\u5f85\u72b6\u6001\u3002\u5f53\u6765\u81ea\u6570\u636e\u51c6\u5907\u7ebf\u7a0b\u4e2d\u5bf9notify_one()\u7684\u8c03\u7528\u901a\u77e5\u6761\u4ef6\u53d8\u91cf\u65f6\uff0c\u7ebf\u7a0b\u4ece\u7761\u7720\u72b6\u6001\u4e2d\u82cf\u9192\uff08\u89e3\u9664\u5176\u963b\u585e\uff09\uff0c\u91cd\u65b0\u83b7\u5f97\u4e92\u65a5\u5143\u4e0a\u7684\u9501\uff0c\u5e76\u518d\u6b21\u68c0\u67e5\u6761\u4ef6\uff0c\u5982\u679c\u6761\u4ef6\u5df2\u7ecf\u6ee1\u8db3\uff0c\u5c31\u4ecewait()\u8fd4\u56de\u503c\uff0c\u4e92\u65a5\u5143\u4ecd\u88ab\u9501\u5b9a\u3002\u5982\u679c\u6761\u4ef6\u4e0d\u6ee1\u8db3\uff0c\u8be5\u7ebf\u7a0b\u89e3\u9501\u4e92\u65a5\u5143\uff0c\u5e76\u6062\u590d\u7b49\u5f85\u3002 2\uff09\u5982\u679c\u7b49\u5f85\u7ebf\u7a0b\u53ea\u6253\u7b97\u7b49\u5f85\u4e00\u6b21\uff0c\u90a3\u4e48\u5f53\u6761\u4ef6\u4e3atrue\u65f6\u5b83\u5c31\u4e0d\u4f1a\u518d\u7b49\u5f85\u8fd9\u4e2a\u6761\u4ef6\u53d8\u91cf\u4e86\uff0c\u6761\u4ef6\u53d8\u91cf\u672a\u5fc5\u662f\u540c\u6b65\u673a\u5236\u7684\u6700\u4f73\u9009\u62e9\u3002\u5982\u679c\u7b49\u5f85\u7684\u6761\u4ef6\u662f\u4e00\u4e2a\u7279\u5b9a\u6570\u636e\u5757\u7684\u53ef\u7528\u6027\u65f6\uff0c\u8fd9\u5c24\u5176\u6b63\u786e\u3002\u5728\u8fd9\u4e2a\u573a\u666f\u4e2d\uff0c\u4f7f\u7528\u671f\u503c\uff08future\uff09\u66f4\u5408\u9002\u3002\u4f7f\u7528future\u7b49\u5f85\u4e00\u6b21\u6027\u4e8b\u4ef6\u3002","title":"\u6761\u4ef6\u9501"},{"location":"C%2B%2B/C%2B%2B11%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E9%94%81/#_2","text":"\u524d\u9762\u7684\u4e24\u79cd\u9501\u662f\u6bd4\u8f83\u5e38\u89c1\u7684\u9501\uff0c\u4e5f\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\u3002\u4e0b\u9762\u901a\u8fc7\u6bd4\u8f83\u4e92\u65a5\u9501\u548c\u81ea\u65cb\u9501\u539f\u7406\u7684\u4e0d\u540c\uff0c\u8fd9\u5bf9\u4e8e\u771f\u6b63\u7406\u89e3\u81ea\u65cb\u9501\u6709\u5f88\u5927\u5e2e\u52a9\u3002 \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u4e24\u4e2a\u5904\u7406\u5668core1\u548ccore2\u8ba1\u7b97\u673a\uff0c\u73b0\u5728\u5728\u8fd9\u53f0\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u7684\u7a0b\u5e8f\u4e2d\u6709\u4e24\u4e2a\u7ebf\u7a0b\uff1aT1\u548cT2\u5206\u522b\u5728\u5904\u7406\u5668core1\u548ccore2\u4e0a\u8fd0\u884c\uff0c\u4e24\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u5171\u4eab\u7740\u4e00\u4e2a\u8d44\u6e90\u3002 \u9996\u5148\u6211\u4eec\u8bf4\u660e\u4e92\u65a5\u9501\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u4e92\u65a5\u9501\u662f\u662f\u4e00\u79cdsleep-waiting\u7684\u9501\u3002\u5047\u8bbe\u7ebf\u7a0bT1\u83b7\u53d6\u4e92\u65a5\u9501\u5e76\u4e14\u6b63\u5728core1\u4e0a\u8fd0\u884c\u65f6\uff0c\u6b64\u65f6\u7ebf\u7a0bT2\u4e5f\u60f3\u8981\u83b7\u53d6\u4e92\u65a5\u9501\uff08pthread_mutex_lock\uff09\uff0c\u4f46\u662f\u7531\u4e8eT1\u6b63\u5728\u4f7f\u7528\u4e92\u65a5\u9501\u4f7f\u5f97T2\u88ab\u963b\u585e\u3002\u5f53T2\u5904\u4e8e\u963b\u585e\u72b6\u6001\u65f6\uff0cT2\u88ab\u653e\u5165\u5230\u7b49\u5f85\u961f\u5217\u4e2d\u53bb\uff0c\u5904\u7406\u5668core2\u4f1a\u53bb\u5904\u7406\u5176\u4ed6\u4efb\u52a1\u800c\u4e0d\u5fc5\u4e00\u76f4\u7b49\u5f85\uff08\u5fd9\u7b49\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\u5904\u7406\u5668\u4e0d\u4f1a\u56e0\u4e3a\u7ebf\u7a0b\u963b\u585e\u800c\u7a7a\u95f2\u7740\uff0c\u5b83\u53bb\u5904\u7406\u5176\u4ed6\u4e8b\u52a1\u53bb\u4e86\u3002 \u800c\u81ea\u65cb\u9501\u5c31\u4e0d\u540c\u4e86\uff0c\u81ea\u65cb\u9501\u662f\u4e00\u79cdbusy-waiting\u7684\u9501\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679cT1\u6b63\u5728\u4f7f\u7528\u81ea\u65cb\u9501\uff0c\u800cT2\u4e5f\u53bb\u7533\u8bf7\u8fd9\u4e2a\u81ea\u65cb\u9501\uff0c\u6b64\u65f6T2\u80af\u5b9a\u5f97\u4e0d\u5230\u8fd9\u4e2a\u81ea\u65cb\u9501\u3002\u4e0e\u4e92\u65a5\u9501\u76f8\u53cd\u7684\u662f\uff0c\u6b64\u65f6\u8fd0\u884cT2\u7684\u5904\u7406\u5668core2\u4f1a\u4e00\u76f4\u4e0d\u65ad\u5730\u5faa\u73af\u68c0\u67e5\u9501\u662f\u5426\u53ef\u7528\uff08\u81ea\u65cb\u9501\u8bf7\u6c42\uff09\uff0c\u76f4\u5230\u83b7\u53d6\u5230\u8fd9\u4e2a\u81ea\u65cb\u9501\u4e3a\u6b62\u3002 \u4ece\u201c\u81ea\u65cb\u9501\u201d\u7684\u540d\u5b57\u4e5f\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u60f3\u8981\u83b7\u53d6\u4e00\u4e2a\u88ab\u4f7f\u7528\u7684\u81ea\u65cb\u9501\uff0c\u90a3\u4e48\u5b83\u4f1a\u4e00\u81f4\u5360\u7528CPU\u8bf7\u6c42\u8fd9\u4e2a\u81ea\u65cb\u9501\u4f7f\u5f97CPU\u4e0d\u80fd\u53bb\u505a\u5176\u4ed6\u7684\u4e8b\u60c5\uff0c\u76f4\u5230\u83b7\u53d6\u8fd9\u4e2a\u9501\u4e3a\u6b62\uff0c\u8fd9\u5c31\u662f\u201c\u81ea\u65cb\u201d\u7684\u542b\u4e49\u3002 \u5f53\u53d1\u751f\u963b\u585e\u65f6\uff0c\u4e92\u65a5\u9501\u53ef\u4ee5\u8ba9CPU\u53bb\u5904\u7406\u5176\u4ed6\u7684\u4efb\u52a1\uff1b\u800c\u81ea\u65cb\u9501\u8ba9CPU\u4e00\u76f4\u4e0d\u65ad\u5faa\u73af\u8bf7\u6c42\u83b7\u53d6\u8fd9\u4e2a\u9501\u3002\u901a\u8fc7\u4e24\u4e2a\u542b\u4e49\u7684\u5bf9\u6bd4\u53ef\u4ee5\u6211\u4eec\u77e5\u9053\u201c\u81ea\u65cb\u9501\u201d\u662f\u6bd4\u8f83\u8017\u8d39CPU\u7684\u3002 //\u4f7f\u7528std::atomic_flag\u7684\u81ea\u65cb\u9501\u4e92\u65a5\u5b9e\u73b0 class spinlock_mutex { std :: atomic_flag flag ; public : spinlock_mutex () : flag ( ATOMIC_FLAG_INIT ) {} void lock () { while ( flag . test_and_set ( std :: memory_order_acquire )); } void unlock () { flag . clear ( std :: memory_order_release ); } }","title":"\u81ea\u65cb\u9501"},{"location":"C%2B%2B/C%2B%2B11%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E9%94%81/#_3","text":"\u8bf4\u5230\u8bfb\u5199\u9501\u6211\u4eec\u53ef\u4ee5\u501f\u52a9\u4e8e\u201c\u8bfb\u8005-\u5199\u8005\u201d\u95ee\u9898\u8fdb\u884c\u7406\u89e3\u3002\u9996\u5148\u6211\u4eec\u7b80\u5355\u8bf4\u4e0b\u201c\u8bfb\u8005-\u5199\u8005\u201d\u95ee\u9898\u3002 \u8ba1\u7b97\u673a\u4e2d\u67d0\u4e9b\u6570\u636e\u88ab\u591a\u4e2a\u8fdb\u7a0b\u5171\u4eab\uff0c\u5bf9\u6570\u636e\u5e93\u7684\u64cd\u4f5c\u6709\u4e24\u79cd\uff1a\u4e00\u79cd\u662f\u8bfb\u64cd\u4f5c\uff0c\u5c31\u662f\u4ece\u6570\u636e\u5e93\u4e2d\u8bfb\u53d6\u6570\u636e\u4e0d\u4f1a\u4fee\u6539\u6570\u636e\u5e93\u4e2d\u5185\u5bb9\uff1b\u53e6\u4e00\u79cd\u5c31\u662f\u5199\u64cd\u4f5c\uff0c\u5199\u64cd\u4f5c\u4f1a\u4fee\u6539\u6570\u636e\u5e93\u4e2d\u5b58\u653e\u7684\u6570\u636e\u3002\u56e0\u6b64\u53ef\u4ee5\u5f97\u5230\u6211\u4eec\u5141\u8bb8\u5728\u6570\u636e\u5e93\u4e0a\u540c\u65f6\u6267\u884c\u591a\u4e2a\u201c\u8bfb\u201d\u64cd\u4f5c\uff0c\u4f46\u662f\u67d0\u4e00\u65f6\u523b\u53ea\u80fd\u5728\u6570\u636e\u5e93\u4e0a\u6709\u4e00\u4e2a\u201c\u5199\u201d\u64cd\u4f5c\u6765\u66f4\u65b0\u6570\u636e\u3002\u8fd9\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8bfb\u8005-\u5199\u8005\u6a21\u578b\u3002 \u5934\u6587\u4ef6\uff1aboost/thread/shared_mutex.cpp \u7c7b\u578b\uff1aboost::shared_lock \u7528\u6cd5\uff1a\u4f60\u53ef\u4ee5\u4f7f\u7528boost::shared_ mutex\u7684\u5b9e\u4f8b\u6765\u5b9e\u73b0\u540c\u6b65\uff0c\u800c\u4e0d\u662f\u4f7f\u7528std::mutex\u7684\u5b9e\u4f8b\u3002\u5bf9\u4e8e\u66f4\u65b0\u64cd\u4f5c\uff0cstd::lock_guard< boost::shared _mutex>\u548c std::unique _lock< boost::shared _mutex>\u53ef\u7528\u4e8e\u9501\u5b9a\uff0c\u4ee5\u53d6\u4ee3\u76f8\u5e94\u7684std::mutex\u7279\u5316\u3002\u8fd9\u786e\u4fdd\u4e86\u72ec\u5360\u8bbf\u95ee\uff0c\u5c31\u50cfstd::mutex\u90a3\u6837\u3002\u90a3\u4e9b\u4e0d\u9700\u8981\u66f4\u65b0\u6570\u636e\u7ed3\u6784\u7684\u7ebf\u7a0b\u80fd\u591f\u8f6c\u800c\u4f7f\u7528 boost::shared _lock< boost::shared _mutex>\u6765\u83b7\u5f97\u5171\u4eab\u8bbf\u95ee\u3002\u8fd9\u4e0estd::unique _lock\u7528\u8d77\u6765\u6b63\u662f\u76f8\u540c\u7684\uff0c\u9664\u4e86\u591a\u4e2a\u7ebf\u7a0b\u5728\u540c\u4e00\u65f6\u95f4\uff0c\u540c\u4e00boost::shared _mutex\u4e0a\u53ef\u80fd\u4f1a\u5177\u6709\u5171\u4eab\u9501\u3002\u552f\u4e00\u7684\u9650\u5236\u662f\uff0c\u5982\u679c\u4efb\u610f\u4e00\u4e2a\u7ebf\u7a0b\u62e5\u6709\u4e00\u4e2a\u5171\u4eab\u9501\uff0c\u8bd5\u56fe\u83b7\u53d6\u72ec\u5360\u9501\u7684\u7ebf\u7a0b\u4f1a\u88ab\u963b\u585e\uff0c\u77e5\u9053\u5176\u4ed6\u7ebf\u7a0b\u5168\u90fd\u64a4\u56de\u5b83\u4eec\u7684\u9501\u3002\u540c\u6837\u7684\uff0c\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u5177\u6709\u72ec\u5360\u9501\uff0c\u5176\u4ed6\u7ebf\u7a0b\u90fd\u4e0d\u80fd\u83b7\u53d6\u5171\u4eab\u9501\u6216\u72ec\u5360\u9501\uff0c\u76f4\u5230\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u64a4\u56de\u5b83\u7684\u9501\u3002","title":"\u8bfb\u5199\u9501"},{"location":"C%2B%2B/%E5%85%B3%E9%94%AE%E5%AD%97decltype/","text":"C++11\u65b0\u6807\u51c6\u5b66\u4e60\uff1adecltype\u5173\u952e\u5b57 \u00b6 1. decltype\u7684\u610f\u4e49 \u00b6 \u6709\u65f6\u6211\u4eec\u5e0c\u671b\u4ece\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u63a8\u65ad\u51fa\u8981\u5b9a\u4e49\u7684\u53d8\u91cf\u7c7b\u578b\uff0c\u4f46\u662f\u4e0d\u60f3\u7528\u8be5\u8868\u8fbe\u5f0f\u7684\u503c\u521d\u59cb\u5316\u53d8\u91cf\uff08\u521d\u59cb\u5316\u53ef\u4ee5\u7528 auto \uff09\u3002\u4e3a\u4e86\u6ee1\u8db3\u8fd9\u4e00\u9700\u6c42\uff0cC++11\u65b0\u6807\u51c6\u5f15\u5165\u4e86 decltype \u7c7b\u578b\u8bf4\u660e\u7b26\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u9009\u62e9\u5e76\u8fd4\u56de\u64cd\u4f5c\u6570\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u7f16\u8bd1\u5668\u5206\u6790\u8868\u8fbe\u5f0f\u5e76\u5f97\u5230\u5b83\u7684\u7c7b\u578b\uff0c\u5374\u4e0d\u5b9e\u9645\u8ba1\u7b97\u8868\u8fbe\u5f0f\u7684\u503c\u3002 2. decltype\u7528\u6cd5 \u00b6 (1) \u57fa\u672c\u7528\u6cd5 int getSize(); int main(void) { int tempA = 2; /*1.dclTempA\u4e3aint.*/ decltype(tempA) dclTempA; /*2.dclTempB\u4e3aint\uff0c\u5bf9\u4e8egetSize\u6839\u672c\u6ca1\u6709\u5b9a\u4e49\uff0c\u4f46\u662f\u7a0b\u5e8f\u4f9d\u65e7\u6b63\u5e38\uff0c\u56e0\u4e3adecltype\u53ea\u505a\u5206\u6790\uff0c\u5e76\u4e0d\u8c03\u7528getSize().*/ decltype(getSize()) dclTempB; return 0; } (2) \u4e0econst\u7ed3\u5408 double tempA = 3.0; const double ctempA = 5.0; const double ctempB = 6.0\uff1b const double *const cptrTempA = &ctempA; /*1.dclTempA\u63a8\u65ad\u4e3aconst double\uff08\u4fdd\u7559\u9876\u5c42const\uff0c\u6b64\u5904\u4e0eauto\u4e0d\u540c\uff09*/ decltype(ctempA) dclTempA = 4.1; /*2.dclTempA\u4e3aconst double\uff0c\u4e0d\u80fd\u5bf9\u5176\u8d4b\u503c\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ dclTempA = 5; /*3.dclTempB\u63a8\u65ad\u4e3aconst double * const*/ decltype(cptrTempA) dclTempB = &ctempA; /*4.\u8f93\u51fa\u4e3a4\uff0832\u4f4d\u8ba1\u7b97\u673a\uff09\u548c5*/ cout<<sizeof(dclTempB)<<\" \"<<*dclTempB<<endl; /*5.\u4fdd\u7559\u9876\u5c42const\uff0c\u4e0d\u80fd\u4fee\u6539\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ dclTempB = &ctempB; /*6.\u4fdd\u7559\u5e95\u5c42const\uff0c\u4e0d\u80fd\u4fee\u6539\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\u7684\u503c\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ *dclTempB = 7.0; (3) \u4e0e\u5f15\u7528\u7ed3\u5408 int tempA = 0, &refTempA = tempA; /*1.dclTempA\u4e3a\u5f15\u7528\uff0c\u7ed1\u5b9a\u5230tempA*/ decltype(refTempA) dclTempA = tempA; /*2.dclTempB\u4e3a\u5f15\u7528\uff0c\u5fc5\u987b\u7ed1\u5b9a\u5230\u53d8\u91cf\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ decltype(refTempA) dclTempB = 0; /*3.dclTempC\u4e3a\u5f15\u7528\uff0c\u5fc5\u987b\u521d\u59cb\u5316\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ decltype(refTempA) dclTempC; /*4.\u53cc\u5c42\u62ec\u53f7\u8868\u793a\u5f15\u7528\uff0cdclTempD\u4e3a\u5f15\u7528\uff0c\u7ed1\u5b9a\u5230tempA*/ decltype((tempA)) dclTempD = tempA; const int ctempA = 1, &crefTempA = ctempA; /*5.dclTempE\u4e3a\u5e38\u91cf\u5f15\u7528\uff0c\u53ef\u4ee5\u7ed1\u5b9a\u5230\u666e\u901a\u53d8\u91cftempA*/ decltype(crefTempA) dclTempE = tempA; /*6.dclTempF\u4e3a\u5e38\u91cf\u5f15\u7528\uff0c\u53ef\u4ee5\u7ed1\u5b9a\u5230\u5e38\u91cfctempA*/ decltype(crefTempA) dclTempF = ctempA; /*7.dclTempG\u4e3a\u5e38\u91cf\u5f15\u7528\uff0c\u7ed1\u5b9a\u5230\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf*/ decltype(crefTempA) dclTempG = 0; /*8.dclTempH\u4e3a\u5e38\u91cf\u5f15\u7528\uff0c\u5fc5\u987b\u521d\u59cb\u5316\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ decltype(crefTempA) dclTempH; /*9.\u53cc\u5c42\u62ec\u53f7\u8868\u793a\u5f15\u7528,dclTempI\u4e3a\u5e38\u91cf\u5f15\u7528\uff0c\u53ef\u4ee5\u7ed1\u5b9a\u5230\u666e\u901a\u53d8\u91cftempA*/ decltype((ctempA)) dclTempI = ctempA; (4) \u4e0e\u6307\u9488\u7ed3\u5408 int tempA = 2; int *ptrTempA = &tempA; /*1.\u5e38\u89c4\u4f7f\u7528dclTempA\u4e3a\u4e00\u4e2aint *\u7684\u6307\u9488*/ decltype(ptrTempA) dclTempA; /*2.\u9700\u8981\u7279\u522b\u6ce8\u610f\uff0c\u8868\u8fbe\u5f0f\u5185\u5bb9\u4e3a\u89e3\u5f15\u7528\u64cd\u4f5c\uff0cdclTempB\u4e3a\u4e00\u4e2a\u5f15\u7528\uff0c\u5f15\u7528\u5fc5\u987b\u521d\u59cb\u5316\uff0c\u6545\u7f16\u8bd1\u4e0d\u8fc7*/ decltype(*ptrTempA) dclTempB; 3. decltype\u603b\u7ed3 \u00b6 decltype\u548cauto\u90fd\u53ef\u4ee5\u7528\u6765\u63a8\u65ad\u7c7b\u578b\uff0c\u4f46\u662f\u4e8c\u8005\u6709\u51e0\u5904\u660e\u663e\u7684\u5dee\u5f02\uff1a auto\u5ffd\u7565\u9876\u5c42const\uff0cdecltype\u4fdd\u7559\u9876\u5c42const\uff1b \u5bf9\u5f15\u7528\u64cd\u4f5c\uff0cauto\u63a8\u65ad\u51fa\u539f\u6709\u7c7b\u578b\uff0cdecltype\u63a8\u65ad\u51fa\u5f15\u7528\uff1b \u5bf9\u89e3\u5f15\u7528\u64cd\u4f5c\uff0cauto\u63a8\u65ad\u51fa\u539f\u6709\u7c7b\u578b\uff0cdecltype\u63a8\u65ad\u51fa\u5f15\u7528\uff1b auto\u63a8\u65ad\u65f6\u4f1a\u5b9e\u9645\u6267\u884c\uff0cdecltype\u4e0d\u4f1a\u6267\u884c\uff0c\u53ea\u505a\u5206\u6790\u3002\u603b\u4e4b\u5728\u4f7f\u7528\u4e2d\u8fc7\u7a0b\u4e2d\u548cconst\u3001\u5f15\u7528\u548c\u6307\u9488\u7ed3\u5408\u65f6\u9700\u8981\u7279\u522b\u5c0f\u5fc3\u3002","title":"\u5173\u952e\u5b57decltype"},{"location":"C%2B%2B/%E5%85%B3%E9%94%AE%E5%AD%97decltype/#c11decltype","text":"","title":"C++11\u65b0\u6807\u51c6\u5b66\u4e60\uff1adecltype\u5173\u952e\u5b57"},{"location":"C%2B%2B/%E5%85%B3%E9%94%AE%E5%AD%97decltype/#1-decltype","text":"\u6709\u65f6\u6211\u4eec\u5e0c\u671b\u4ece\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u63a8\u65ad\u51fa\u8981\u5b9a\u4e49\u7684\u53d8\u91cf\u7c7b\u578b\uff0c\u4f46\u662f\u4e0d\u60f3\u7528\u8be5\u8868\u8fbe\u5f0f\u7684\u503c\u521d\u59cb\u5316\u53d8\u91cf\uff08\u521d\u59cb\u5316\u53ef\u4ee5\u7528 auto \uff09\u3002\u4e3a\u4e86\u6ee1\u8db3\u8fd9\u4e00\u9700\u6c42\uff0cC++11\u65b0\u6807\u51c6\u5f15\u5165\u4e86 decltype \u7c7b\u578b\u8bf4\u660e\u7b26\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u9009\u62e9\u5e76\u8fd4\u56de\u64cd\u4f5c\u6570\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u7f16\u8bd1\u5668\u5206\u6790\u8868\u8fbe\u5f0f\u5e76\u5f97\u5230\u5b83\u7684\u7c7b\u578b\uff0c\u5374\u4e0d\u5b9e\u9645\u8ba1\u7b97\u8868\u8fbe\u5f0f\u7684\u503c\u3002","title":"1. decltype\u7684\u610f\u4e49"},{"location":"C%2B%2B/%E5%85%B3%E9%94%AE%E5%AD%97decltype/#2-decltype","text":"(1) \u57fa\u672c\u7528\u6cd5 int getSize(); int main(void) { int tempA = 2; /*1.dclTempA\u4e3aint.*/ decltype(tempA) dclTempA; /*2.dclTempB\u4e3aint\uff0c\u5bf9\u4e8egetSize\u6839\u672c\u6ca1\u6709\u5b9a\u4e49\uff0c\u4f46\u662f\u7a0b\u5e8f\u4f9d\u65e7\u6b63\u5e38\uff0c\u56e0\u4e3adecltype\u53ea\u505a\u5206\u6790\uff0c\u5e76\u4e0d\u8c03\u7528getSize().*/ decltype(getSize()) dclTempB; return 0; } (2) \u4e0econst\u7ed3\u5408 double tempA = 3.0; const double ctempA = 5.0; const double ctempB = 6.0\uff1b const double *const cptrTempA = &ctempA; /*1.dclTempA\u63a8\u65ad\u4e3aconst double\uff08\u4fdd\u7559\u9876\u5c42const\uff0c\u6b64\u5904\u4e0eauto\u4e0d\u540c\uff09*/ decltype(ctempA) dclTempA = 4.1; /*2.dclTempA\u4e3aconst double\uff0c\u4e0d\u80fd\u5bf9\u5176\u8d4b\u503c\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ dclTempA = 5; /*3.dclTempB\u63a8\u65ad\u4e3aconst double * const*/ decltype(cptrTempA) dclTempB = &ctempA; /*4.\u8f93\u51fa\u4e3a4\uff0832\u4f4d\u8ba1\u7b97\u673a\uff09\u548c5*/ cout<<sizeof(dclTempB)<<\" \"<<*dclTempB<<endl; /*5.\u4fdd\u7559\u9876\u5c42const\uff0c\u4e0d\u80fd\u4fee\u6539\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ dclTempB = &ctempB; /*6.\u4fdd\u7559\u5e95\u5c42const\uff0c\u4e0d\u80fd\u4fee\u6539\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\u7684\u503c\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ *dclTempB = 7.0; (3) \u4e0e\u5f15\u7528\u7ed3\u5408 int tempA = 0, &refTempA = tempA; /*1.dclTempA\u4e3a\u5f15\u7528\uff0c\u7ed1\u5b9a\u5230tempA*/ decltype(refTempA) dclTempA = tempA; /*2.dclTempB\u4e3a\u5f15\u7528\uff0c\u5fc5\u987b\u7ed1\u5b9a\u5230\u53d8\u91cf\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ decltype(refTempA) dclTempB = 0; /*3.dclTempC\u4e3a\u5f15\u7528\uff0c\u5fc5\u987b\u521d\u59cb\u5316\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ decltype(refTempA) dclTempC; /*4.\u53cc\u5c42\u62ec\u53f7\u8868\u793a\u5f15\u7528\uff0cdclTempD\u4e3a\u5f15\u7528\uff0c\u7ed1\u5b9a\u5230tempA*/ decltype((tempA)) dclTempD = tempA; const int ctempA = 1, &crefTempA = ctempA; /*5.dclTempE\u4e3a\u5e38\u91cf\u5f15\u7528\uff0c\u53ef\u4ee5\u7ed1\u5b9a\u5230\u666e\u901a\u53d8\u91cftempA*/ decltype(crefTempA) dclTempE = tempA; /*6.dclTempF\u4e3a\u5e38\u91cf\u5f15\u7528\uff0c\u53ef\u4ee5\u7ed1\u5b9a\u5230\u5e38\u91cfctempA*/ decltype(crefTempA) dclTempF = ctempA; /*7.dclTempG\u4e3a\u5e38\u91cf\u5f15\u7528\uff0c\u7ed1\u5b9a\u5230\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf*/ decltype(crefTempA) dclTempG = 0; /*8.dclTempH\u4e3a\u5e38\u91cf\u5f15\u7528\uff0c\u5fc5\u987b\u521d\u59cb\u5316\uff0c\u7f16\u8bd1\u4e0d\u8fc7*/ decltype(crefTempA) dclTempH; /*9.\u53cc\u5c42\u62ec\u53f7\u8868\u793a\u5f15\u7528,dclTempI\u4e3a\u5e38\u91cf\u5f15\u7528\uff0c\u53ef\u4ee5\u7ed1\u5b9a\u5230\u666e\u901a\u53d8\u91cftempA*/ decltype((ctempA)) dclTempI = ctempA; (4) \u4e0e\u6307\u9488\u7ed3\u5408 int tempA = 2; int *ptrTempA = &tempA; /*1.\u5e38\u89c4\u4f7f\u7528dclTempA\u4e3a\u4e00\u4e2aint *\u7684\u6307\u9488*/ decltype(ptrTempA) dclTempA; /*2.\u9700\u8981\u7279\u522b\u6ce8\u610f\uff0c\u8868\u8fbe\u5f0f\u5185\u5bb9\u4e3a\u89e3\u5f15\u7528\u64cd\u4f5c\uff0cdclTempB\u4e3a\u4e00\u4e2a\u5f15\u7528\uff0c\u5f15\u7528\u5fc5\u987b\u521d\u59cb\u5316\uff0c\u6545\u7f16\u8bd1\u4e0d\u8fc7*/ decltype(*ptrTempA) dclTempB;","title":"2. decltype\u7528\u6cd5"},{"location":"C%2B%2B/%E5%85%B3%E9%94%AE%E5%AD%97decltype/#3-decltype","text":"decltype\u548cauto\u90fd\u53ef\u4ee5\u7528\u6765\u63a8\u65ad\u7c7b\u578b\uff0c\u4f46\u662f\u4e8c\u8005\u6709\u51e0\u5904\u660e\u663e\u7684\u5dee\u5f02\uff1a auto\u5ffd\u7565\u9876\u5c42const\uff0cdecltype\u4fdd\u7559\u9876\u5c42const\uff1b \u5bf9\u5f15\u7528\u64cd\u4f5c\uff0cauto\u63a8\u65ad\u51fa\u539f\u6709\u7c7b\u578b\uff0cdecltype\u63a8\u65ad\u51fa\u5f15\u7528\uff1b \u5bf9\u89e3\u5f15\u7528\u64cd\u4f5c\uff0cauto\u63a8\u65ad\u51fa\u539f\u6709\u7c7b\u578b\uff0cdecltype\u63a8\u65ad\u51fa\u5f15\u7528\uff1b auto\u63a8\u65ad\u65f6\u4f1a\u5b9e\u9645\u6267\u884c\uff0cdecltype\u4e0d\u4f1a\u6267\u884c\uff0c\u53ea\u505a\u5206\u6790\u3002\u603b\u4e4b\u5728\u4f7f\u7528\u4e2d\u8fc7\u7a0b\u4e2d\u548cconst\u3001\u5f15\u7528\u548c\u6307\u9488\u7ed3\u5408\u65f6\u9700\u8981\u7279\u522b\u5c0f\u5fc3\u3002","title":"3. decltype\u603b\u7ed3"},{"location":"C%2B%2B/%E5%85%B3%E9%94%AE%E5%AD%97volatile/","text":"[\u8f6c\u8f7d]\u5b98\u65b9\u89e3\u91ca\uff1a \u00b6 \u200b volatile \u4f5c\u4e3a\u6307\u4ee4\u5173\u952e\u5b57\uff0c\u786e\u4fdd\u672c\u6761\u6307\u4ee4\u4e0d\u4f1a\u56e0\u7f16\u8bd1\u5668\u7684\u4f18\u5316\u800c\u88ab\u7701\u7565\uff0c\u5373\u7cfb\u7edf\u6bcf\u6b21\u4ece\u53d8\u91cf\u6240\u5728\u5185\u5b58\u8bfb\u53d6\u6570\u636e\u800c\u4e0d\u662f\u4ece\u5bc4\u5b58\u5668\u8bfb\u53d6\u5907\u4efd\u3002 \u6613\u53d8\u6027 \u00b6 \u7f16\u8bd1\u5668\u5bf9volatile\u4fee\u9970\u7684\u53d8\u91cf\uff0c\u5f53\u8981\u8bfb\u53d6\u8fd9\u4e2a\u53d8\u91cf\u65f6\uff0c\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u4f1a\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\uff0c\u800c\u4e0d\u4f1a\u4ece\u5bc4\u5b58\u5668\u7f13\u5b58\u4e2d\u8bfb\u53d6\uff08\u56e0\u4e3a\u6bcf\u6b21\u90fd\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u4f53\u73b0\u51fa\u53d8\u91cf\u7684\u201c\u6613\u53d8\u201d\uff09 \u5bf9\u4e8e\u975evolatile\u53d8\u91cf \u5bf9 b = a + 1;\u8fd9\u6761\u8bed\u53e5\uff0c\u5bf9\u5e94\u7684\u6c47\u7f16\u6307\u4ee4\u662f\uff1alea ecx, [eax + 1]\u3002 \u7531\u4e8e\u53d8\u91cfa\uff0c\u5728\u524d\u4e00\u6761\u8bed\u53e5a = fn\u00a9\u6267\u884c\u65f6\uff0c\u88ab\u7f13\u5b58\u5728\u4e86\u5bc4\u5b58\u5668eax\u4e2d\uff0c\u56e0\u6b64b = a + 1\uff1b\u8bed\u53e5\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4ecd\u65e7\u5728\u5bc4\u5b58\u5668eax\u4e2d\u7684\u5185\u5bb9\uff0c\u6765\u8fdb\u884c\u8ba1\u7b97\uff0c\u5bf9\u5e94\u7684\u4e5f\u5c31\u662f\u6c47\u7f16\uff1a[eax + 1] \u5bf9\u4e8evolatile\u578b\u53d8\u91cf \u4e0e\u6d4b\u8bd5\u7528\u4f8b\u4e00\u552f\u4e00\u7684\u4e0d\u540c\u4e4b\u5904\uff0c\u662f\u53d8\u91cfa\u88ab\u8bbe\u7f6e\u4e3avolatile\u5c5e\u6027\uff0c\u4e00\u4e2a\u5c0f\u5c0f\u7684\u53d8\u5316\uff0c\u5e26\u6765\u7684\u662f\u6c47\u7f16\u4ee3\u7801\u4e0a\u5f88\u5927\u7684\u53d8\u5316\u3002a = fn\u00a9\u6267\u884c\u540e\uff0c\u5bc4\u5b58\u5668ecx\u4e2d\u7684a\uff0c\u88ab\u5199\u56de\u5185\u5b58\uff1amov dword ptr [esp+0Ch], ecx\u3002\u7136\u540e\uff0c\u5728\u6267\u884cb = a + 1\uff1b\u8bed\u53e5\u65f6\uff0c\u53d8\u91cfa\u6709\u91cd\u65b0\u88ab\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u51fa\u6765\uff1amov eax, dword ptr [esp + 0Ch]\uff0c\u800c\u4e0d\u518d\u76f4\u63a5\u4f7f\u7528\u5bc4\u5b58\u5668ecx\u4e2d\u7684\u5185\u5bb9 \u4e0d\u53ef\u4f18\u5316\u6027 \u00b6 \u7f16\u8bd1\u5668\u4e0d\u4f1a\u5bf9volatile\u4fee\u9970\u7684\u53d8\u91cf\u8fdb\u884c\u4efb\u4f55\u4f18\u5316 \u5bf9\u4e8e\u975evolatile\u53d8\u91cf \u5728\u8fd9\u4e2a\u7528\u4f8b\u4e2d\uff0c\u975evolatile\u53d8\u91cfa\uff0cb\uff0cc\u5168\u90e8\u88ab\u7f16\u8bd1\u5668\u4f18\u5316\u6389\u4e86 (optimize out)\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u901a\u8fc7\u5206\u6790\uff0c\u53d1\u89c9a\uff0cb\uff0cc\u4e09\u4e2a\u53d8\u91cf\u76f4\u63a5\u7528\u7acb\u5373\u6570\u66ff\u6362\uff0c\u4e0d\u5fc5\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u6700\u540e\u7684\u6c47\u7f16\u4ee3\u7801\u76f8\u5f53\u7b80\u4ecb\uff0c\u9ad8\u6548\u7387 \u5728\u8fd9\u4e2a\u7528\u4f8b\u4e2d\uff0c\u975evolatile\u53d8\u91cfa\uff0cb\uff0cc\u5168\u90e8\u88ab\u7f16\u8bd1\u5668\u4f18\u5316\u6389\u4e86 (optimize out)\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u901a\u8fc7\u5206\u6790\uff0c\u53d1\u89c9a\uff0cb\uff0cc\u4e09\u4e2a\u53d8\u91cf\u76f4\u63a5\u7528\u7acb\u5373\u6570\u66ff\u6362\uff0c\u4e0d\u5fc5\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u6700\u540e\u7684\u6c47\u7f16\u4ee3\u7801\u76f8\u5f53\u7b80\u4ecb\uff0c\u9ad8\u6548\u7387 \u5bf9\u4e8evolatile\u53d8\u91cf \u5728\u8fd9\u4e2a\u7528\u4f8b\u4e2d\uff0ca\u3001b\u3001c\u4e09\u4e2a\u53d8\u91cf\uff0c\u90fd\u662fvolatile\u53d8\u91cf\u3002\u5728\u6c47\u7f16\u8bed\u8a00\u4e2d\uff0c\u8fd9\u4e09\u4e2a\u53d8\u91cf\u5b58\u5230\u4e86\u5185\u5b58\u4e2d\uff0c\u5728\u4f7f\u7528a\u3001b\u3001c\u65f6\u9700\u8981\u5c06\u4e09\u4e2a\u53d8\u91cf\u4ece\u5185\u5b58\u8bfb\u5165\u5230\u5bc4\u5b58\u5668\u4e4b\u4e2d\uff0c\u7136\u540e\u518d\u8c03\u7528printf()\u51fd\u6570 \u987a\u5e8f\u6027 \u00b6 \u7a0b\u5e8f\u7684\u4e71\u5e8f\u4f18\u5316\uff1a\u4fdd\u8bc1\u4e00\u6bb5\u4ee3\u7801\u7684\u8f93\u51fa\u7ed3\u679c\u7684\u524d\u63d0\u4e0b\uff0c\u5c06\u5404\u6761\u4ee3\u7801\u7684\u5b9e\u9645\u6267\u884c\u987a\u5e8f\u8fdb\u884c\u4f18\u5316\u8c03\u6574 volatile\u53d8\u91cf\u4e0evolatile\u53d8\u91cf\u95f4\u4ee3\u7801\u7684\u987a\u5e8f\uff0c\u7f16\u8bd1\u5668\u4e0d\u4f1a\u8fdb\u884c\u4e71\u5e8f\u4f18\u5316\uff0c\u4f46\u662fvolatile\u53d8\u91cf\u4e0e\u975evolatile\u53d8\u91cf\u4ee3\u7801\u7684\u987a\u5e8f\uff0c\u7f16\u8bd1\u5668\u4e0d\u4fdd\u8bc1\u987a\u5e8f\uff0c\u53ef\u80fd\u4f1a\u8fdb\u884c\u4e71\u5e8f\u4f18\u5316","title":"\u5173\u952e\u5b57volatile"},{"location":"C%2B%2B/%E5%85%B3%E9%94%AE%E5%AD%97volatile/#_1","text":"\u200b volatile \u4f5c\u4e3a\u6307\u4ee4\u5173\u952e\u5b57\uff0c\u786e\u4fdd\u672c\u6761\u6307\u4ee4\u4e0d\u4f1a\u56e0\u7f16\u8bd1\u5668\u7684\u4f18\u5316\u800c\u88ab\u7701\u7565\uff0c\u5373\u7cfb\u7edf\u6bcf\u6b21\u4ece\u53d8\u91cf\u6240\u5728\u5185\u5b58\u8bfb\u53d6\u6570\u636e\u800c\u4e0d\u662f\u4ece\u5bc4\u5b58\u5668\u8bfb\u53d6\u5907\u4efd\u3002","title":"[\u8f6c\u8f7d]\u5b98\u65b9\u89e3\u91ca\uff1a"},{"location":"C%2B%2B/%E5%85%B3%E9%94%AE%E5%AD%97volatile/#_2","text":"\u7f16\u8bd1\u5668\u5bf9volatile\u4fee\u9970\u7684\u53d8\u91cf\uff0c\u5f53\u8981\u8bfb\u53d6\u8fd9\u4e2a\u53d8\u91cf\u65f6\uff0c\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u4f1a\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\uff0c\u800c\u4e0d\u4f1a\u4ece\u5bc4\u5b58\u5668\u7f13\u5b58\u4e2d\u8bfb\u53d6\uff08\u56e0\u4e3a\u6bcf\u6b21\u90fd\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u4f53\u73b0\u51fa\u53d8\u91cf\u7684\u201c\u6613\u53d8\u201d\uff09 \u5bf9\u4e8e\u975evolatile\u53d8\u91cf \u5bf9 b = a + 1;\u8fd9\u6761\u8bed\u53e5\uff0c\u5bf9\u5e94\u7684\u6c47\u7f16\u6307\u4ee4\u662f\uff1alea ecx, [eax + 1]\u3002 \u7531\u4e8e\u53d8\u91cfa\uff0c\u5728\u524d\u4e00\u6761\u8bed\u53e5a = fn\u00a9\u6267\u884c\u65f6\uff0c\u88ab\u7f13\u5b58\u5728\u4e86\u5bc4\u5b58\u5668eax\u4e2d\uff0c\u56e0\u6b64b = a + 1\uff1b\u8bed\u53e5\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4ecd\u65e7\u5728\u5bc4\u5b58\u5668eax\u4e2d\u7684\u5185\u5bb9\uff0c\u6765\u8fdb\u884c\u8ba1\u7b97\uff0c\u5bf9\u5e94\u7684\u4e5f\u5c31\u662f\u6c47\u7f16\uff1a[eax + 1] \u5bf9\u4e8evolatile\u578b\u53d8\u91cf \u4e0e\u6d4b\u8bd5\u7528\u4f8b\u4e00\u552f\u4e00\u7684\u4e0d\u540c\u4e4b\u5904\uff0c\u662f\u53d8\u91cfa\u88ab\u8bbe\u7f6e\u4e3avolatile\u5c5e\u6027\uff0c\u4e00\u4e2a\u5c0f\u5c0f\u7684\u53d8\u5316\uff0c\u5e26\u6765\u7684\u662f\u6c47\u7f16\u4ee3\u7801\u4e0a\u5f88\u5927\u7684\u53d8\u5316\u3002a = fn\u00a9\u6267\u884c\u540e\uff0c\u5bc4\u5b58\u5668ecx\u4e2d\u7684a\uff0c\u88ab\u5199\u56de\u5185\u5b58\uff1amov dword ptr [esp+0Ch], ecx\u3002\u7136\u540e\uff0c\u5728\u6267\u884cb = a + 1\uff1b\u8bed\u53e5\u65f6\uff0c\u53d8\u91cfa\u6709\u91cd\u65b0\u88ab\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u51fa\u6765\uff1amov eax, dword ptr [esp + 0Ch]\uff0c\u800c\u4e0d\u518d\u76f4\u63a5\u4f7f\u7528\u5bc4\u5b58\u5668ecx\u4e2d\u7684\u5185\u5bb9","title":"\u6613\u53d8\u6027"},{"location":"C%2B%2B/%E5%85%B3%E9%94%AE%E5%AD%97volatile/#_3","text":"\u7f16\u8bd1\u5668\u4e0d\u4f1a\u5bf9volatile\u4fee\u9970\u7684\u53d8\u91cf\u8fdb\u884c\u4efb\u4f55\u4f18\u5316 \u5bf9\u4e8e\u975evolatile\u53d8\u91cf \u5728\u8fd9\u4e2a\u7528\u4f8b\u4e2d\uff0c\u975evolatile\u53d8\u91cfa\uff0cb\uff0cc\u5168\u90e8\u88ab\u7f16\u8bd1\u5668\u4f18\u5316\u6389\u4e86 (optimize out)\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u901a\u8fc7\u5206\u6790\uff0c\u53d1\u89c9a\uff0cb\uff0cc\u4e09\u4e2a\u53d8\u91cf\u76f4\u63a5\u7528\u7acb\u5373\u6570\u66ff\u6362\uff0c\u4e0d\u5fc5\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u6700\u540e\u7684\u6c47\u7f16\u4ee3\u7801\u76f8\u5f53\u7b80\u4ecb\uff0c\u9ad8\u6548\u7387 \u5728\u8fd9\u4e2a\u7528\u4f8b\u4e2d\uff0c\u975evolatile\u53d8\u91cfa\uff0cb\uff0cc\u5168\u90e8\u88ab\u7f16\u8bd1\u5668\u4f18\u5316\u6389\u4e86 (optimize out)\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u901a\u8fc7\u5206\u6790\uff0c\u53d1\u89c9a\uff0cb\uff0cc\u4e09\u4e2a\u53d8\u91cf\u76f4\u63a5\u7528\u7acb\u5373\u6570\u66ff\u6362\uff0c\u4e0d\u5fc5\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u6700\u540e\u7684\u6c47\u7f16\u4ee3\u7801\u76f8\u5f53\u7b80\u4ecb\uff0c\u9ad8\u6548\u7387 \u5bf9\u4e8evolatile\u53d8\u91cf \u5728\u8fd9\u4e2a\u7528\u4f8b\u4e2d\uff0ca\u3001b\u3001c\u4e09\u4e2a\u53d8\u91cf\uff0c\u90fd\u662fvolatile\u53d8\u91cf\u3002\u5728\u6c47\u7f16\u8bed\u8a00\u4e2d\uff0c\u8fd9\u4e09\u4e2a\u53d8\u91cf\u5b58\u5230\u4e86\u5185\u5b58\u4e2d\uff0c\u5728\u4f7f\u7528a\u3001b\u3001c\u65f6\u9700\u8981\u5c06\u4e09\u4e2a\u53d8\u91cf\u4ece\u5185\u5b58\u8bfb\u5165\u5230\u5bc4\u5b58\u5668\u4e4b\u4e2d\uff0c\u7136\u540e\u518d\u8c03\u7528printf()\u51fd\u6570","title":"\u4e0d\u53ef\u4f18\u5316\u6027"},{"location":"C%2B%2B/%E5%85%B3%E9%94%AE%E5%AD%97volatile/#_4","text":"\u7a0b\u5e8f\u7684\u4e71\u5e8f\u4f18\u5316\uff1a\u4fdd\u8bc1\u4e00\u6bb5\u4ee3\u7801\u7684\u8f93\u51fa\u7ed3\u679c\u7684\u524d\u63d0\u4e0b\uff0c\u5c06\u5404\u6761\u4ee3\u7801\u7684\u5b9e\u9645\u6267\u884c\u987a\u5e8f\u8fdb\u884c\u4f18\u5316\u8c03\u6574 volatile\u53d8\u91cf\u4e0evolatile\u53d8\u91cf\u95f4\u4ee3\u7801\u7684\u987a\u5e8f\uff0c\u7f16\u8bd1\u5668\u4e0d\u4f1a\u8fdb\u884c\u4e71\u5e8f\u4f18\u5316\uff0c\u4f46\u662fvolatile\u53d8\u91cf\u4e0e\u975evolatile\u53d8\u91cf\u4ee3\u7801\u7684\u987a\u5e8f\uff0c\u7f16\u8bd1\u5668\u4e0d\u4fdd\u8bc1\u987a\u5e8f\uff0c\u53ef\u80fd\u4f1a\u8fdb\u884c\u4e71\u5e8f\u4f18\u5316","title":"\u987a\u5e8f\u6027"},{"location":"DataStructure/AVL%E6%A0%91/","text":"\u4ee3\u7801\uff1a \u00b6 #include <iostream> #include <algorithm> using namespace std ; struct AVLNode { int data ; int height ; AVLNode * left ; AVLNode * right ; AVLNode () : data ( 0 ), height ( 0 ), left ( nullptr ), right ( nullptr ) {}; AVLNode ( int d , int h = 0 , AVLNode * l = nullptr , AVLNode * r = nullptr ) : data ( d ), height ( h ), left ( l ), right ( r ) {}; }; class AVLTree { public : AVLTree () : root ( nullptr ) {} ~ AVLTree () { destroy ( root ); } int Height () { return height ( root ); } bool Insert ( int value ) { return insert ( root , value ); } void PrintBinTree () { PrintBinTree ( root ); } bool Remove ( int value ) { return remove ( root , value ); } private : //\u6c42\u53d6\u9ad8\u5ea6 int height ( AVLNode * cur ) { if ( ! cur ) return 0 ; int i = height ( cur -> left ); int j = height ( cur -> right ); return i > j ? i + 1 : j + 1 ; } //\u5728\u53f3\u5b50\u6811\u63d2\u5165\u53f3\u5b69\u5b50\u5bfc\u81f4AVL\u5931\u8861\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u5355\u5de6\u65cb\u8c03\u6574 AVLNode * LeftRotation ( AVLNode * cur ) { AVLNode * tmp = cur -> right ; cur -> right = tmp -> left ; tmp -> left = cur ; cur -> height = max ( height ( cur -> left ), height ( cur -> right )) + 1 ; tmp -> height = max ( height ( tmp -> left ), height ( tmp -> right )) + 1 ; return tmp ; } //\u5728\u5de6\u5b50\u6811\u4e0a\u63d2\u5165\u5de6\u5b69\u5b50\u5bfc\u81f4AVL\u6811\u5931\u8861\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u5355\u53f3\u65cb\u8c03\u6574 AVLNode * RightRotation ( AVLNode * cur ) { AVLNode * tmp = cur -> left ; cur -> left = tmp -> right ; tmp -> right = cur ; cur -> height = max ( height ( cur -> left ), height ( cur -> right )) + 1 ; tmp -> height = max ( height ( tmp -> left ), height ( tmp -> right )) + 1 ; return tmp ; } //\u5728\u53f3\u5b50\u6811\u4e0a\u63d2\u5165\u5de6\u5b69\u5b50\u5bfc\u81f4AVL\u6811\u5931\u8861,\u6b64\u65f6\u6211\u4eec\u9700\u8981\u8fdb\u884c\u5148\u53f3\u65cb\u540e\u5de6\u65cb\u7684\u8c03\u6574 AVLNode * RightLeftRotation ( AVLNode * cur ) { cur -> right = RightRotation ( cur -> right ); return LeftRotation ( cur ); } //\u5728\u5de6\u5b50\u6811\u4e0a\u63d2\u5165\u53f3\u5b69\u5b50\u5bfc\u81f4AVL\u6811\u5931\u8861,\u6b64\u65f6\u6211\u4eec\u9700\u8981\u8fdb\u884c\u5148\u5de6\u65cb\u540e\u53f3\u65cb\u7684\u8c03\u6574 AVLNode * LeftRightRotation ( AVLNode * cur ) { cur -> left = LeftRotation ( cur -> left ); return LeftRotation ( cur ); } AVLNode * insert ( AVLNode *& cur , int value ) { if ( ! cur ) cur = new AVLNode ( value ); else if ( value > cur -> data ) { cur -> right = insert ( cur -> right , value ); if ( height ( cur -> right ) - height ( cur -> left ) == 2 ) { if ( value > cur -> right -> data ) cur = LeftRotation ( cur ); else if ( value < cur -> right -> data ) cur = RightLeftRotation ( cur ); } } else if ( value < cur -> data ) { cur -> left = insert ( cur -> left , value ); if ( height ( cur -> left ) - height ( cur -> right ) == 2 ) { if ( value < cur -> left -> data ) cur = RightRotation ( cur ); else if ( value > cur -> left -> data ) cur = LeftRightRotation ( cur ); } } cur -> height = max ( height ( cur -> left ), height ( cur -> right )); return cur ; } AVLNode * remove ( AVLNode * cur , int value ) { if ( ! cur ) return nullptr ; if ( value == cur -> data ) { if ( cur -> left && cur -> right ) { if ( height ( cur -> left ) > height ( cur -> right )) { AVLNode * tmp = maximum ( cur -> left ); cur -> data = tmp -> data ; cur -> left = remove ( cur -> left , tmp -> data ); } else { AVLNode * tmp = minimum ( cur -> right ); cur -> data = tmp -> data ; cur -> right = remove ( cur -> right , tmp -> data ); } } else { AVLNode * tmp = cur ; if ( cur -> left ) cur = cur -> left ; else if ( cur -> right ) cur = cur -> right ; delete tmp ; return nullptr ; } } else if ( value > cur -> data ) { cur -> right = remove ( cur -> right , value ); if ( height ( cur -> left ) - height ( cur -> right ) == 2 ) { if ( height ( cur -> left -> right ) > height ( cur -> left -> left )) cur = LeftRightRotation ( cur ); else cur = RightRotation ( cur ); } } else if ( value < cur -> data ) { cur -> left = remove ( cur -> left , value ); if ( height ( cur -> right ) - height ( cur -> left ) == 2 ) { if ( height ( cur -> right -> left ) > height ( cur -> right -> right )) cur = RightLeftRotation ( cur ); else cur = LeftRotation ( cur ); } } return cur ; } AVLNode * maximum ( AVLNode * cur ) { if ( ! cur ) return nullptr ; while ( cur -> right ) { cur = cur -> right ; } return cur ; } AVLNode * minimum ( AVLNode * cur ) { if ( ! cur ) return nullptr ; while ( cur -> left ) { cur = cur -> left ; } return cur ; } AVLNode * search ( AVLNode * cur , int value ) { if ( ! cur ) return nullptr ; if ( cur -> data == value ) return cur ; else if ( value > cur -> data ) return search ( cur -> right , value ); else search ( cur -> left , value ); } void destroy ( AVLNode * cur ) { if ( cur ) { destroy ( cur -> left ); destroy ( cur -> right ); delete cur ; cur = nullptr ; } } void PrintBinTree ( AVLNode * BT ) { if ( BT != NULL ) //\u6811\u4e3a\u7a7a\u65f6\u7ed3\u675f\u9012\u5f52 { cout << BT -> data ; if ( BT -> left != NULL || BT -> right != NULL ) { cout << '(' ; if ( BT -> left != NULL ) { PrintBinTree ( BT -> left ); } cout << ',' ; if ( BT -> right != NULL ) { PrintBinTree ( BT -> right ); } cout << ')' ; } } } AVLNode * root ; }; int main () { AVLTree t ; for ( int i = 0 ; i < 10 ; i ++ ) { t . Insert ( i ); } cout << \"\u6811\u9ad8\uff1a\" << t . Height () << endl ; t . PrintBinTree (); t . Remove ( 5 ); cout << endl ; t . PrintBinTree (); cout << endl ; }","title":"AVL\u6811"},{"location":"DataStructure/AVL%E6%A0%91/#_1","text":"#include <iostream> #include <algorithm> using namespace std ; struct AVLNode { int data ; int height ; AVLNode * left ; AVLNode * right ; AVLNode () : data ( 0 ), height ( 0 ), left ( nullptr ), right ( nullptr ) {}; AVLNode ( int d , int h = 0 , AVLNode * l = nullptr , AVLNode * r = nullptr ) : data ( d ), height ( h ), left ( l ), right ( r ) {}; }; class AVLTree { public : AVLTree () : root ( nullptr ) {} ~ AVLTree () { destroy ( root ); } int Height () { return height ( root ); } bool Insert ( int value ) { return insert ( root , value ); } void PrintBinTree () { PrintBinTree ( root ); } bool Remove ( int value ) { return remove ( root , value ); } private : //\u6c42\u53d6\u9ad8\u5ea6 int height ( AVLNode * cur ) { if ( ! cur ) return 0 ; int i = height ( cur -> left ); int j = height ( cur -> right ); return i > j ? i + 1 : j + 1 ; } //\u5728\u53f3\u5b50\u6811\u63d2\u5165\u53f3\u5b69\u5b50\u5bfc\u81f4AVL\u5931\u8861\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u5355\u5de6\u65cb\u8c03\u6574 AVLNode * LeftRotation ( AVLNode * cur ) { AVLNode * tmp = cur -> right ; cur -> right = tmp -> left ; tmp -> left = cur ; cur -> height = max ( height ( cur -> left ), height ( cur -> right )) + 1 ; tmp -> height = max ( height ( tmp -> left ), height ( tmp -> right )) + 1 ; return tmp ; } //\u5728\u5de6\u5b50\u6811\u4e0a\u63d2\u5165\u5de6\u5b69\u5b50\u5bfc\u81f4AVL\u6811\u5931\u8861\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u5355\u53f3\u65cb\u8c03\u6574 AVLNode * RightRotation ( AVLNode * cur ) { AVLNode * tmp = cur -> left ; cur -> left = tmp -> right ; tmp -> right = cur ; cur -> height = max ( height ( cur -> left ), height ( cur -> right )) + 1 ; tmp -> height = max ( height ( tmp -> left ), height ( tmp -> right )) + 1 ; return tmp ; } //\u5728\u53f3\u5b50\u6811\u4e0a\u63d2\u5165\u5de6\u5b69\u5b50\u5bfc\u81f4AVL\u6811\u5931\u8861,\u6b64\u65f6\u6211\u4eec\u9700\u8981\u8fdb\u884c\u5148\u53f3\u65cb\u540e\u5de6\u65cb\u7684\u8c03\u6574 AVLNode * RightLeftRotation ( AVLNode * cur ) { cur -> right = RightRotation ( cur -> right ); return LeftRotation ( cur ); } //\u5728\u5de6\u5b50\u6811\u4e0a\u63d2\u5165\u53f3\u5b69\u5b50\u5bfc\u81f4AVL\u6811\u5931\u8861,\u6b64\u65f6\u6211\u4eec\u9700\u8981\u8fdb\u884c\u5148\u5de6\u65cb\u540e\u53f3\u65cb\u7684\u8c03\u6574 AVLNode * LeftRightRotation ( AVLNode * cur ) { cur -> left = LeftRotation ( cur -> left ); return LeftRotation ( cur ); } AVLNode * insert ( AVLNode *& cur , int value ) { if ( ! cur ) cur = new AVLNode ( value ); else if ( value > cur -> data ) { cur -> right = insert ( cur -> right , value ); if ( height ( cur -> right ) - height ( cur -> left ) == 2 ) { if ( value > cur -> right -> data ) cur = LeftRotation ( cur ); else if ( value < cur -> right -> data ) cur = RightLeftRotation ( cur ); } } else if ( value < cur -> data ) { cur -> left = insert ( cur -> left , value ); if ( height ( cur -> left ) - height ( cur -> right ) == 2 ) { if ( value < cur -> left -> data ) cur = RightRotation ( cur ); else if ( value > cur -> left -> data ) cur = LeftRightRotation ( cur ); } } cur -> height = max ( height ( cur -> left ), height ( cur -> right )); return cur ; } AVLNode * remove ( AVLNode * cur , int value ) { if ( ! cur ) return nullptr ; if ( value == cur -> data ) { if ( cur -> left && cur -> right ) { if ( height ( cur -> left ) > height ( cur -> right )) { AVLNode * tmp = maximum ( cur -> left ); cur -> data = tmp -> data ; cur -> left = remove ( cur -> left , tmp -> data ); } else { AVLNode * tmp = minimum ( cur -> right ); cur -> data = tmp -> data ; cur -> right = remove ( cur -> right , tmp -> data ); } } else { AVLNode * tmp = cur ; if ( cur -> left ) cur = cur -> left ; else if ( cur -> right ) cur = cur -> right ; delete tmp ; return nullptr ; } } else if ( value > cur -> data ) { cur -> right = remove ( cur -> right , value ); if ( height ( cur -> left ) - height ( cur -> right ) == 2 ) { if ( height ( cur -> left -> right ) > height ( cur -> left -> left )) cur = LeftRightRotation ( cur ); else cur = RightRotation ( cur ); } } else if ( value < cur -> data ) { cur -> left = remove ( cur -> left , value ); if ( height ( cur -> right ) - height ( cur -> left ) == 2 ) { if ( height ( cur -> right -> left ) > height ( cur -> right -> right )) cur = RightLeftRotation ( cur ); else cur = LeftRotation ( cur ); } } return cur ; } AVLNode * maximum ( AVLNode * cur ) { if ( ! cur ) return nullptr ; while ( cur -> right ) { cur = cur -> right ; } return cur ; } AVLNode * minimum ( AVLNode * cur ) { if ( ! cur ) return nullptr ; while ( cur -> left ) { cur = cur -> left ; } return cur ; } AVLNode * search ( AVLNode * cur , int value ) { if ( ! cur ) return nullptr ; if ( cur -> data == value ) return cur ; else if ( value > cur -> data ) return search ( cur -> right , value ); else search ( cur -> left , value ); } void destroy ( AVLNode * cur ) { if ( cur ) { destroy ( cur -> left ); destroy ( cur -> right ); delete cur ; cur = nullptr ; } } void PrintBinTree ( AVLNode * BT ) { if ( BT != NULL ) //\u6811\u4e3a\u7a7a\u65f6\u7ed3\u675f\u9012\u5f52 { cout << BT -> data ; if ( BT -> left != NULL || BT -> right != NULL ) { cout << '(' ; if ( BT -> left != NULL ) { PrintBinTree ( BT -> left ); } cout << ',' ; if ( BT -> right != NULL ) { PrintBinTree ( BT -> right ); } cout << ')' ; } } } AVLNode * root ; }; int main () { AVLTree t ; for ( int i = 0 ; i < 10 ; i ++ ) { t . Insert ( i ); } cout << \"\u6811\u9ad8\uff1a\" << t . Height () << endl ; t . PrintBinTree (); t . Remove ( 5 ); cout << endl ; t . PrintBinTree (); cout << endl ; }","title":"\u4ee3\u7801\uff1a"},{"location":"DesignPattern/0-%E5%88%86%E7%B1%BB/","text":"\u5206\u7c7b \u00b6","title":"0-\u5206\u7c7b"},{"location":"DesignPattern/0-%E5%88%86%E7%B1%BB/#_1","text":"","title":"\u5206\u7c7b"},{"location":"DesignPattern/1-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/","text":"\u7b56\u7565\u6a21\u5f0f \u00b6 \u5b9a\u4e49\uff1a \u00b6 \u200b \u5b83\u5b9a\u4e49\u4e86\u7b97\u6cd5\u5bb6\u65cf\uff0c\u5206\u522b\u5c01\u88c5\u8d77\u6765\uff0c\u8ba9\u5b83\u4eec\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u66ff\u6362\uff0c\u6b64\u6a21\u5f0f\u8ba9\u7b97\u6cd5\u7684\u53d8\u5316\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5230\u4f7f\u7528\u7b97\u6cd5\u7684\u5ba2\u6237\u3002 \u9002\u7528\u573a\u666f\uff1a \u00b6 \u200b \u200b \u7b56\u7565\u6a21\u5f0f\u5c31\u662f\u7528\u6765\u5c01\u88c5\u7b97\u6cd5\u7684\uff0c\u4f46\u5728\u5b9e\u8df5\u4e2d\uff0c\u53ef\u4ee5\u7528\u5b83\u5c01\u88c5\u51e0\u4e4e\u4efb\u4f55\u7c7b\u578b\u7684\u89c4\u5219\uff0c\u53ea\u8981\u5728\u5206\u6790\u8fc7\u7a0b\u4e2d\u542c\u5230\u9700\u8981\u5728\u4e0d\u540c\u65f6\u95f4\u5e94\u7528\u4e0d\u540c\u7684\u4e1a\u52a1\u89c4\u5219\uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u9002\u7528\u7b56\u7565\u6a21\u5f0f\u5904\u7406\u8fd9\u79cd\u53d8\u5316\u7684\u53ef\u80fd\u6027\uff01 \u4ee3\u7801 \u00b6 #include<iostream> #include<memory> using namespace std; class Strategy { public: virtual void AlgorithmInterface() {}; }; class ConcreteStrategyA :public Strategy { public: virtual void AlgorithmInterface() override { cout << \"\u7b97\u6cd5A\u7684\u5b9e\u73b0\" << endl; } }; class ConcreteStrategyB :public Strategy { public: virtual void AlgorithmInterface() override { cout << \"\u7b97\u6cd5B\u7684\u5b9e\u73b0\" << endl; } }; class ConcreteStrategyC :public Strategy { public: virtual void AlgorithmInterface() override { cout << \"\u7b97\u6cd5C\u7684\u5b9e\u73b0\" << endl; } }; class Context { public: Context(const shared_ptr<Strategy> &tmp) { strategy = tmp; } void ContextInterface() { strategy->AlgorithmInterface(); } private: shared_ptr<Strategy> strategy; }; int main() { Context *context; context = new Context(shared_ptr<ConcreteStrategyA> (new ConcreteStrategyA())); context->ContextInterface(); delete context; context = new Context(shared_ptr<ConcreteStrategyB>(new ConcreteStrategyB())); context->ContextInterface(); delete context; context = new Context(shared_ptr<ConcreteStrategyC>(new ConcreteStrategyC())); context->ContextInterface(); delete context; return 0; }","title":"1-\u7b56\u7565\u6a21\u5f0f"},{"location":"DesignPattern/1-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u7b56\u7565\u6a21\u5f0f"},{"location":"DesignPattern/1-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/#_2","text":"\u200b \u5b83\u5b9a\u4e49\u4e86\u7b97\u6cd5\u5bb6\u65cf\uff0c\u5206\u522b\u5c01\u88c5\u8d77\u6765\uff0c\u8ba9\u5b83\u4eec\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u66ff\u6362\uff0c\u6b64\u6a21\u5f0f\u8ba9\u7b97\u6cd5\u7684\u53d8\u5316\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5230\u4f7f\u7528\u7b97\u6cd5\u7684\u5ba2\u6237\u3002","title":"\u5b9a\u4e49\uff1a"},{"location":"DesignPattern/1-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/#_3","text":"\u200b \u200b \u7b56\u7565\u6a21\u5f0f\u5c31\u662f\u7528\u6765\u5c01\u88c5\u7b97\u6cd5\u7684\uff0c\u4f46\u5728\u5b9e\u8df5\u4e2d\uff0c\u53ef\u4ee5\u7528\u5b83\u5c01\u88c5\u51e0\u4e4e\u4efb\u4f55\u7c7b\u578b\u7684\u89c4\u5219\uff0c\u53ea\u8981\u5728\u5206\u6790\u8fc7\u7a0b\u4e2d\u542c\u5230\u9700\u8981\u5728\u4e0d\u540c\u65f6\u95f4\u5e94\u7528\u4e0d\u540c\u7684\u4e1a\u52a1\u89c4\u5219\uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u9002\u7528\u7b56\u7565\u6a21\u5f0f\u5904\u7406\u8fd9\u79cd\u53d8\u5316\u7684\u53ef\u80fd\u6027\uff01","title":"\u9002\u7528\u573a\u666f\uff1a"},{"location":"DesignPattern/1-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/#_4","text":"#include<iostream> #include<memory> using namespace std; class Strategy { public: virtual void AlgorithmInterface() {}; }; class ConcreteStrategyA :public Strategy { public: virtual void AlgorithmInterface() override { cout << \"\u7b97\u6cd5A\u7684\u5b9e\u73b0\" << endl; } }; class ConcreteStrategyB :public Strategy { public: virtual void AlgorithmInterface() override { cout << \"\u7b97\u6cd5B\u7684\u5b9e\u73b0\" << endl; } }; class ConcreteStrategyC :public Strategy { public: virtual void AlgorithmInterface() override { cout << \"\u7b97\u6cd5C\u7684\u5b9e\u73b0\" << endl; } }; class Context { public: Context(const shared_ptr<Strategy> &tmp) { strategy = tmp; } void ContextInterface() { strategy->AlgorithmInterface(); } private: shared_ptr<Strategy> strategy; }; int main() { Context *context; context = new Context(shared_ptr<ConcreteStrategyA> (new ConcreteStrategyA())); context->ContextInterface(); delete context; context = new Context(shared_ptr<ConcreteStrategyB>(new ConcreteStrategyB())); context->ContextInterface(); delete context; context = new Context(shared_ptr<ConcreteStrategyC>(new ConcreteStrategyC())); context->ContextInterface(); delete context; return 0; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/10-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/","text":"\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u63d0\u4f9b\u4e00\u4e2a\u521b\u5efa\u4e00\u7cfb\u5217\u76f8\u5173\u6216\u76f8\u4e92\u4f9d\u8d56\u5bf9\u8c61\u7684\u63a5\u53e3\uff0c\u800c\u65e0\u9700\u5236\u5b9a\u5b83\u4eec\u5177\u4f53\u7684\u7c7b \u4f18\u7f3a\u70b9 \u00b6 \u4f18\u70b9\uff1a 1\uff09 \u6613\u4e8e\u4ea4\u6362\u4ea7\u54c1\u7cfb\u5217\uff0c\u7531\u4e8e\u5177\u4f53\u5de5\u5382\u7c7b\uff0c\u5728\u4e00\u4e2a\u5e94\u7528\u4e2d\u53ea\u9700\u8981\u518d\u521d\u59cb\u5316\u7684\u65f6\u5019\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd9\u5c31\u4f7f\u5f97\u6539\u53d8\u4e00\u4e2a\u5e94\u7528\u7684\u5177\u4f53\u5de5\u5382\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\uff0c\u5b83\u53ea\u9700\u8981\u6539\u53d8\u5177\u4f53\u5de5\u5382\u5373\u53ef\u4f7f\u7528\u4e0d\u540c\u7684\u4ea7\u54c1\u914d\u7f6e 2\uff09\u5b83\u8ba9\u5177\u4f53\u7684\u521b\u5efa\u5b9e\u4f8b\u8fc7\u7a0b\u4e0e\u5ba2\u6237\u7aef\u5206\u79bb\uff0c\u5ba2\u6237\u7aef\u662f\u901a\u8fc7\u5b83\u4eec\u7684 \u62bd\u8c61\u63a5\u53e3\u64cd\u7eb5\u5b9e\u4f8b\uff0c\u4ea7\u54c1\u7684\u5177\u4f53\u7c7b\u540d\u4e5f\u88ab\u5177\u4f53\u5de5\u5382\u7684\u5b9e\u73b0\u5206\u79bb\uff0c\u4e0d\u4f1a\u5728\u5ba2\u6237\u4ee3\u7801\u4e2d \u7f3a\u70b9\uff1a \u4e0d\u6613\u6269\u5c55\uff0c\u6dfb\u52a0\u9700\u6c42\u65f6\uff0c\u9700\u8981\u5927\u6279\u91cf\u7684\u6539\u52a8\u3002","title":"10-\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f"},{"location":"DesignPattern/10-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f"},{"location":"DesignPattern/10-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/#_2","text":"\u63d0\u4f9b\u4e00\u4e2a\u521b\u5efa\u4e00\u7cfb\u5217\u76f8\u5173\u6216\u76f8\u4e92\u4f9d\u8d56\u5bf9\u8c61\u7684\u63a5\u53e3\uff0c\u800c\u65e0\u9700\u5236\u5b9a\u5b83\u4eec\u5177\u4f53\u7684\u7c7b","title":"\u5b9a\u4e49"},{"location":"DesignPattern/10-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/#_3","text":"\u4f18\u70b9\uff1a 1\uff09 \u6613\u4e8e\u4ea4\u6362\u4ea7\u54c1\u7cfb\u5217\uff0c\u7531\u4e8e\u5177\u4f53\u5de5\u5382\u7c7b\uff0c\u5728\u4e00\u4e2a\u5e94\u7528\u4e2d\u53ea\u9700\u8981\u518d\u521d\u59cb\u5316\u7684\u65f6\u5019\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd9\u5c31\u4f7f\u5f97\u6539\u53d8\u4e00\u4e2a\u5e94\u7528\u7684\u5177\u4f53\u5de5\u5382\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\uff0c\u5b83\u53ea\u9700\u8981\u6539\u53d8\u5177\u4f53\u5de5\u5382\u5373\u53ef\u4f7f\u7528\u4e0d\u540c\u7684\u4ea7\u54c1\u914d\u7f6e 2\uff09\u5b83\u8ba9\u5177\u4f53\u7684\u521b\u5efa\u5b9e\u4f8b\u8fc7\u7a0b\u4e0e\u5ba2\u6237\u7aef\u5206\u79bb\uff0c\u5ba2\u6237\u7aef\u662f\u901a\u8fc7\u5b83\u4eec\u7684 \u62bd\u8c61\u63a5\u53e3\u64cd\u7eb5\u5b9e\u4f8b\uff0c\u4ea7\u54c1\u7684\u5177\u4f53\u7c7b\u540d\u4e5f\u88ab\u5177\u4f53\u5de5\u5382\u7684\u5b9e\u73b0\u5206\u79bb\uff0c\u4e0d\u4f1a\u5728\u5ba2\u6237\u4ee3\u7801\u4e2d \u7f3a\u70b9\uff1a \u4e0d\u6613\u6269\u5c55\uff0c\u6dfb\u52a0\u9700\u6c42\u65f6\uff0c\u9700\u8981\u5927\u6279\u91cf\u7684\u6539\u52a8\u3002","title":"\u4f18\u7f3a\u70b9"},{"location":"DesignPattern/11-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/","text":"\u72b6\u6001\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u5f53\u4e00\u4e2a\u5bf9\u8c61\u7684\u5185\u5728\u72b6\u6001\u6539\u53d8\u65f6\u5141\u8bb8\u6539\u53d8\u5176\u884c\u4e3a\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u770b\u8d77\u6765\u50cf\u662f\u6539\u53d8\u4e86\u5176\u7c7b \u4f18\u70b9 \u00b6 \u5c06\u7279\u5b9a\u7684\u72b6\u6001\u76f8\u5173\u884c\u4e3a\u90fd\u653e\u5165\u4e00\u4e2a\u5bf9\u8c61\u4e2d\uff0c\u7531\u4e8e\u6240\u6709\u4e0e\u72b6\u6001\u76f8\u5173\u7684\u4ee3\u7801\u90fd\u5b58\u5728\u4e8e\u67d0\u4e2aConcreteState\u4e2d\uff0c\u6240\u6709\u901a\u8fc7\u5b9a\u4e49\u65b0\u7684\u5b50\u7c7b\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u589e\u52a0\u65b0\u7684\u72b6\u6001\u548c\u8f6c\u6362\u3002 \u9002\u5e94\u573a\u666f \u00b6 \u5f53\u4e00\u4e2a\u5bf9\u8c61\u7684\u884c\u4e3a\u53d6\u51b3\u4e8e\u5b83\u7684\u72b6\u6001\u5e76\u4e14\u5b83\u5fc5\u987b\u65f6\u523b\u6839\u636e\u72b6\u6001\u6539\u53d8\u5b83\u7684\u884c\u4e3a\u65f6\uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u72b6\u6001\u6a21\u5f0f","title":"11-\u72b6\u6001\u6a21\u5f0f"},{"location":"DesignPattern/11-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u72b6\u6001\u6a21\u5f0f"},{"location":"DesignPattern/11-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/#_2","text":"\u5f53\u4e00\u4e2a\u5bf9\u8c61\u7684\u5185\u5728\u72b6\u6001\u6539\u53d8\u65f6\u5141\u8bb8\u6539\u53d8\u5176\u884c\u4e3a\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u770b\u8d77\u6765\u50cf\u662f\u6539\u53d8\u4e86\u5176\u7c7b","title":"\u5b9a\u4e49"},{"location":"DesignPattern/11-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/#_3","text":"\u5c06\u7279\u5b9a\u7684\u72b6\u6001\u76f8\u5173\u884c\u4e3a\u90fd\u653e\u5165\u4e00\u4e2a\u5bf9\u8c61\u4e2d\uff0c\u7531\u4e8e\u6240\u6709\u4e0e\u72b6\u6001\u76f8\u5173\u7684\u4ee3\u7801\u90fd\u5b58\u5728\u4e8e\u67d0\u4e2aConcreteState\u4e2d\uff0c\u6240\u6709\u901a\u8fc7\u5b9a\u4e49\u65b0\u7684\u5b50\u7c7b\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u589e\u52a0\u65b0\u7684\u72b6\u6001\u548c\u8f6c\u6362\u3002","title":"\u4f18\u70b9"},{"location":"DesignPattern/11-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/#_4","text":"\u5f53\u4e00\u4e2a\u5bf9\u8c61\u7684\u884c\u4e3a\u53d6\u51b3\u4e8e\u5b83\u7684\u72b6\u6001\u5e76\u4e14\u5b83\u5fc5\u987b\u65f6\u523b\u6839\u636e\u72b6\u6001\u6539\u53d8\u5b83\u7684\u884c\u4e3a\u65f6\uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u72b6\u6001\u6a21\u5f0f","title":"\u9002\u5e94\u573a\u666f"},{"location":"DesignPattern/12-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/","text":"\u9002\u914d\u5668\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u5c06\u4e00\u4e2a\u7c7b\u7684\u63a5\u53e3\u8f6c\u6362\u6210\u5ba2\u6237\u5e0c\u671b\u7684\u53e6\u5916\u4e00\u4e2a\u63a5\u53e3\u3002Adapter\u6a21\u5f0f\u4f7f\u5f97\u539f\u672c\u7531\u4e8e\u63a5\u53e3\u4e0d\u517c\u5bb9\u800c\u4e0d\u80fd\u4e00\u8d77\u5de5\u4f5c\u7684\u90a3\u4e9b\u7c7b\u53ef\u4ee5\u4e00\u8d77\u5de5\u4f5c\u3002 \u9002\u7528\u573a\u666f \u00b6 \u4f7f\u7528\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u7c7b\uff0c\u4f46\u5982\u679c\u5b83\u7684\u63a5\u53e3\uff0c\u4e5f\u5c31\u662f\u5b83\u7684\u65b9\u6cd5\u548c\u4f60\u7684\u8981\u6c42\u4e0d\u76f8\u540c\u65f6\uff0c\u5c31\u5e94\u8be5\u8003\u8651\u7528\u9002\u914d\u5668\u6a21\u5f0f \u4ee3\u7801 \u00b6 #include <iostream> using namespace std ; class Target { public : virtual void Request () { cout << \"\u666e\u901a\u8bf7\u6c42\" << endl ; } }; class Adaptee { public : void SpecificRequest () { cout << \"\u7279\u6b8a\u8bf7\u6c42\" << endl ; } }; class Adapter : public Target { private : Adaptee * adaptee ; public : Adapter () { adaptee = new Adaptee (); } ~ Adapter () { delete adaptee ; } void Request () override { adaptee -> SpecificRequest (); } }; int main () { Target * t = new Adapter (); t -> Request (); delete t ; return 0 ; }","title":"12-\u9002\u914d\u5668\u6a21\u5f0f"},{"location":"DesignPattern/12-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u9002\u914d\u5668\u6a21\u5f0f"},{"location":"DesignPattern/12-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/#_2","text":"\u5c06\u4e00\u4e2a\u7c7b\u7684\u63a5\u53e3\u8f6c\u6362\u6210\u5ba2\u6237\u5e0c\u671b\u7684\u53e6\u5916\u4e00\u4e2a\u63a5\u53e3\u3002Adapter\u6a21\u5f0f\u4f7f\u5f97\u539f\u672c\u7531\u4e8e\u63a5\u53e3\u4e0d\u517c\u5bb9\u800c\u4e0d\u80fd\u4e00\u8d77\u5de5\u4f5c\u7684\u90a3\u4e9b\u7c7b\u53ef\u4ee5\u4e00\u8d77\u5de5\u4f5c\u3002","title":"\u5b9a\u4e49"},{"location":"DesignPattern/12-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/#_3","text":"\u4f7f\u7528\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u7c7b\uff0c\u4f46\u5982\u679c\u5b83\u7684\u63a5\u53e3\uff0c\u4e5f\u5c31\u662f\u5b83\u7684\u65b9\u6cd5\u548c\u4f60\u7684\u8981\u6c42\u4e0d\u76f8\u540c\u65f6\uff0c\u5c31\u5e94\u8be5\u8003\u8651\u7528\u9002\u914d\u5668\u6a21\u5f0f","title":"\u9002\u7528\u573a\u666f"},{"location":"DesignPattern/12-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/#_4","text":"#include <iostream> using namespace std ; class Target { public : virtual void Request () { cout << \"\u666e\u901a\u8bf7\u6c42\" << endl ; } }; class Adaptee { public : void SpecificRequest () { cout << \"\u7279\u6b8a\u8bf7\u6c42\" << endl ; } }; class Adapter : public Target { private : Adaptee * adaptee ; public : Adapter () { adaptee = new Adaptee (); } ~ Adapter () { delete adaptee ; } void Request () override { adaptee -> SpecificRequest (); } }; int main () { Target * t = new Adapter (); t -> Request (); delete t ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/13-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/","text":"\u5907\u5fd8\u5f55\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u5728\u4e0d\u7834\u574f\u5c01\u88c5\u6027\u7684\u524d\u63d0\u4e0b\uff0c\u8865\u83b7\u4e00\u4e2a\u5bf9\u8c61\u7684\u5185\u90e8\u72b6\u6001\uff0c\u5e76\u5728\u8be5\u5bf9\u8c61\u4e4b\u5916\u4fdd\u5b58\u8fd9\u4e2a\u72b6\u6001\u3002\u8fd9\u6837\u4ee5\u540e\u5c31\u53ef\u5c06\u8be5\u5bf9\u8c61\u6062\u590d\u5230\u539f\u5148\u4fdd\u5b58\u7684\u72b6\u6001\u3002 \u4ee3\u7801 \u00b6 #include <iostream> #include <string> using namespace std ; class Memento { private : string state ; public : Memento ( string state ) : state ( state ) { } string getState () { return state ; } }; class Originator { private : string state ; public : void setState ( string state ) { this -> state = state ; } string getState () { return state ; } Memento * createMemento () { return new Memento ( state ); } void setMemento ( Memento * mem ) { state = mem -> getState (); } void show () { cout << \"state = \" << state << endl ; } }; class CareTaker { private : Memento * mem ; public : void setMemento ( Memento * val ) { mem = val ; } Memento * getMemento () { return mem ; } }; int main () { Originator * ori = new Originator (); ori -> setState ( \"On\" ); ori -> show (); CareTaker * c = new CareTaker (); c -> setMemento ( ori -> createMemento ()); ori -> setState ( \"off\" ); ori -> show (); ori -> setMemento ( c -> getMemento ()); ori -> show (); return 0 ; }","title":"13-\u5907\u5fd8\u5f55\u6a21\u5f0f"},{"location":"DesignPattern/13-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u5907\u5fd8\u5f55\u6a21\u5f0f"},{"location":"DesignPattern/13-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/#_2","text":"\u5728\u4e0d\u7834\u574f\u5c01\u88c5\u6027\u7684\u524d\u63d0\u4e0b\uff0c\u8865\u83b7\u4e00\u4e2a\u5bf9\u8c61\u7684\u5185\u90e8\u72b6\u6001\uff0c\u5e76\u5728\u8be5\u5bf9\u8c61\u4e4b\u5916\u4fdd\u5b58\u8fd9\u4e2a\u72b6\u6001\u3002\u8fd9\u6837\u4ee5\u540e\u5c31\u53ef\u5c06\u8be5\u5bf9\u8c61\u6062\u590d\u5230\u539f\u5148\u4fdd\u5b58\u7684\u72b6\u6001\u3002","title":"\u5b9a\u4e49"},{"location":"DesignPattern/13-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/#_3","text":"#include <iostream> #include <string> using namespace std ; class Memento { private : string state ; public : Memento ( string state ) : state ( state ) { } string getState () { return state ; } }; class Originator { private : string state ; public : void setState ( string state ) { this -> state = state ; } string getState () { return state ; } Memento * createMemento () { return new Memento ( state ); } void setMemento ( Memento * mem ) { state = mem -> getState (); } void show () { cout << \"state = \" << state << endl ; } }; class CareTaker { private : Memento * mem ; public : void setMemento ( Memento * val ) { mem = val ; } Memento * getMemento () { return mem ; } }; int main () { Originator * ori = new Originator (); ori -> setState ( \"On\" ); ori -> show (); CareTaker * c = new CareTaker (); c -> setMemento ( ori -> createMemento ()); ori -> setState ( \"off\" ); ori -> show (); ori -> setMemento ( c -> getMemento ()); ori -> show (); return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/14-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/","text":"\u7ec4\u5408\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u5c06\u5bf9\u8c61\u7ec4\u5408\u6210\u6811\u5f62\u7ed3\u6784\u4ee5\u8868\u793a \u2019 \u90e8\u5206-\u6574\u4f53 '\u7684\u5c42\u6b21\u7ed3\u6784\u3002\u7ec4\u5408\u6a21\u5f0f\u4f7f\u5f97\u7528\u6237\u5bf9\u5355\u4e2a\u5bf9\u8c61\u548c\u7ec4\u5408\u5bf9\u8c61\u7684\u4f7f\u7528\u5177\u6709\u4e00\u81f4\u6027\u3002 \u4f18\u7f3a\u70b9 \u00b6 \u900f\u660e\u65b9\u5f0f\uff1a \u200b \u5728Component\u4e2d\u58f0\u660e\u6240\u6709\u7528\u6765\u7ba1\u7406\u5b50\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u5176\u4e2d\u5305\u62ecadd\uff0cremove\u7b49\u3002\u8fd9\u6837\u5b9e\u73b0Component\u63a5\u53e3\u7684\u6240\u6709\u5b50\u7c7b\u90fd\u5177\u5907\u4e86\u76f8\u540c\u7684\u884c\u4e3a\u63a5\u53e3\uff0c\u597d\u5904\u662f\u53f6\u8282\u70b9\u548c\u679d\u8282\u70b9\u5bf9\u4e8e\u5916\u754c\u6ca1\u6709\u533a\u522b\uff0c\u7f3a\u70b9\u662f\u53f6\u5b50\u672c\u8eab\u4e0d\u5177\u5907\u67d0\u4e9b\u65b9\u6cd5\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u5b9e\u73b0\u5b83\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002 \u5b89\u5168\u65b9\u5f0f\uff1a \u200b \u5728Component\u4e2d\u4e0d\u58f0\u660e\u6240\u6709\u7528\u6765\u7ba1\u7406\u5b50\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u800c\u662f\u8f6c\u79fb\u5230Composite\u4e2d\u3002\u597d\u5904\u662f\u7701\u7565\u4e86Leaf\u7684\u5b9e\u73b0\u3002\u7f3a\u70b9\u662f\u7531\u4e8e\u4e0d\u591f\u900f\u660e\uff0c\u6240\u4ee5\u6811\u53f6\u548c\u6811\u679d\u7c7b\u5c06\u4e0d\u5177\u6709\u76f8\u540c\u7684\u63a5\u53e3\uff0c\u5ba2\u6237\u7aef\u7684\u8c03\u7528\u9700\u8981\u505a\u76f8\u5e94\u7684\u5224\u65ad\uff0c\u5e26\u4e86\u4e0d\u53d8\u3002 \u4f7f\u7528\u573a\u666f \u00b6 \u200b \u5728\u9700\u6c42\u4e2d\u662f\u4f53\u73b0\u90e8\u5206\u548c\u6574\u4f53\u5c42\u6b21\u7684\u7ed3\u6784\u65f6\uff0c\u4ee5\u53ca\u4f60\u5e0c\u671b\u7528\u6237\u53ef\u4ee5\u5ffd\u7565\u7ec4\u5408\u5bf9\u8c61\u4e0e\u5355\u4e2a\u5bf9\u8c61\u7684\u4e0d\u540c\uff0c\u7edf\u4e00\u5730\u4f7f\u7528\u7ec4\u5408\u7ed3\u6784\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u65f6\uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u7ec4\u5408\u6a21\u5f0f\u3002 \u4ee3\u7801 \u00b6 #include <iostream> #include <string> #include <list> using namespace std ; class Component { protected : string name ; public : Component ( string value ) { name = value ; } virtual ~ Component (){} virtual void add ( Component * c ) {} virtual void remove ( Component * c ) {} virtual void display ( int depth ){} }; class Leaf : public Component { public : Leaf ( string value ) : Component ( value ){} void add ( Component * c ) override { cout << \"Cannot add to a leaf\" << endl ; } void remove ( Component * c ) override { cout << \"Cannot remove from a leaf\" << endl ; } void display ( int depth ) { cout << string ( depth , '-' ) << \" \" << name << endl ; } }; class Composite : public Component { public : Composite ( string value ) : Component ( value ) {} ~ Composite () { while ( ! children . empty ()) { Component * c = children . back (); children . pop_back (); delete c ; } } void add ( Component * c ) override { children . push_back ( c ); } void remove ( Component * c ) override { children . remove ( c ); } void display ( int depth ) { cout << string ( depth , '-' ) << \" \" << name << endl ; for ( auto child : children ) { child -> display ( depth + 2 ); } } private : list < Component *> children ; }; int main () { Composite * root = new Composite ( \"root\" ); root -> add ( new Leaf ( \"Leaf A\" )); root -> add ( new Leaf ( \"Leaf B\" )); Composite * comp = new Composite ( \"Composite X\" ); comp -> add ( new Leaf ( \"Leaf XA\" )); comp -> add ( new Leaf ( \"Leaf XB\" )); root -> add ( comp ); Composite * comp2 = new Composite ( \"Composite XY\" ); comp2 -> add ( new Leaf ( \"Leaf XYA\" )); comp2 -> add ( new Leaf ( \"Leaf XYB\" )); comp -> add ( comp2 ); root -> add ( new Leaf ( \"Leaf C\" )); Leaf * f = new Leaf ( \"Leaf D\" ); root -> add ( f ); root -> remove ( f ); root -> display ( 1 ); return 0 ; }","title":"14-\u7ec4\u5408\u6a21\u5f0f"},{"location":"DesignPattern/14-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u7ec4\u5408\u6a21\u5f0f"},{"location":"DesignPattern/14-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/#_2","text":"\u5c06\u5bf9\u8c61\u7ec4\u5408\u6210\u6811\u5f62\u7ed3\u6784\u4ee5\u8868\u793a \u2019 \u90e8\u5206-\u6574\u4f53 '\u7684\u5c42\u6b21\u7ed3\u6784\u3002\u7ec4\u5408\u6a21\u5f0f\u4f7f\u5f97\u7528\u6237\u5bf9\u5355\u4e2a\u5bf9\u8c61\u548c\u7ec4\u5408\u5bf9\u8c61\u7684\u4f7f\u7528\u5177\u6709\u4e00\u81f4\u6027\u3002","title":"\u5b9a\u4e49"},{"location":"DesignPattern/14-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/#_3","text":"\u900f\u660e\u65b9\u5f0f\uff1a \u200b \u5728Component\u4e2d\u58f0\u660e\u6240\u6709\u7528\u6765\u7ba1\u7406\u5b50\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u5176\u4e2d\u5305\u62ecadd\uff0cremove\u7b49\u3002\u8fd9\u6837\u5b9e\u73b0Component\u63a5\u53e3\u7684\u6240\u6709\u5b50\u7c7b\u90fd\u5177\u5907\u4e86\u76f8\u540c\u7684\u884c\u4e3a\u63a5\u53e3\uff0c\u597d\u5904\u662f\u53f6\u8282\u70b9\u548c\u679d\u8282\u70b9\u5bf9\u4e8e\u5916\u754c\u6ca1\u6709\u533a\u522b\uff0c\u7f3a\u70b9\u662f\u53f6\u5b50\u672c\u8eab\u4e0d\u5177\u5907\u67d0\u4e9b\u65b9\u6cd5\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u5b9e\u73b0\u5b83\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002 \u5b89\u5168\u65b9\u5f0f\uff1a \u200b \u5728Component\u4e2d\u4e0d\u58f0\u660e\u6240\u6709\u7528\u6765\u7ba1\u7406\u5b50\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u800c\u662f\u8f6c\u79fb\u5230Composite\u4e2d\u3002\u597d\u5904\u662f\u7701\u7565\u4e86Leaf\u7684\u5b9e\u73b0\u3002\u7f3a\u70b9\u662f\u7531\u4e8e\u4e0d\u591f\u900f\u660e\uff0c\u6240\u4ee5\u6811\u53f6\u548c\u6811\u679d\u7c7b\u5c06\u4e0d\u5177\u6709\u76f8\u540c\u7684\u63a5\u53e3\uff0c\u5ba2\u6237\u7aef\u7684\u8c03\u7528\u9700\u8981\u505a\u76f8\u5e94\u7684\u5224\u65ad\uff0c\u5e26\u4e86\u4e0d\u53d8\u3002","title":"\u4f18\u7f3a\u70b9"},{"location":"DesignPattern/14-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/#_4","text":"\u200b \u5728\u9700\u6c42\u4e2d\u662f\u4f53\u73b0\u90e8\u5206\u548c\u6574\u4f53\u5c42\u6b21\u7684\u7ed3\u6784\u65f6\uff0c\u4ee5\u53ca\u4f60\u5e0c\u671b\u7528\u6237\u53ef\u4ee5\u5ffd\u7565\u7ec4\u5408\u5bf9\u8c61\u4e0e\u5355\u4e2a\u5bf9\u8c61\u7684\u4e0d\u540c\uff0c\u7edf\u4e00\u5730\u4f7f\u7528\u7ec4\u5408\u7ed3\u6784\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u65f6\uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u7ec4\u5408\u6a21\u5f0f\u3002","title":"\u4f7f\u7528\u573a\u666f"},{"location":"DesignPattern/14-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/#_5","text":"#include <iostream> #include <string> #include <list> using namespace std ; class Component { protected : string name ; public : Component ( string value ) { name = value ; } virtual ~ Component (){} virtual void add ( Component * c ) {} virtual void remove ( Component * c ) {} virtual void display ( int depth ){} }; class Leaf : public Component { public : Leaf ( string value ) : Component ( value ){} void add ( Component * c ) override { cout << \"Cannot add to a leaf\" << endl ; } void remove ( Component * c ) override { cout << \"Cannot remove from a leaf\" << endl ; } void display ( int depth ) { cout << string ( depth , '-' ) << \" \" << name << endl ; } }; class Composite : public Component { public : Composite ( string value ) : Component ( value ) {} ~ Composite () { while ( ! children . empty ()) { Component * c = children . back (); children . pop_back (); delete c ; } } void add ( Component * c ) override { children . push_back ( c ); } void remove ( Component * c ) override { children . remove ( c ); } void display ( int depth ) { cout << string ( depth , '-' ) << \" \" << name << endl ; for ( auto child : children ) { child -> display ( depth + 2 ); } } private : list < Component *> children ; }; int main () { Composite * root = new Composite ( \"root\" ); root -> add ( new Leaf ( \"Leaf A\" )); root -> add ( new Leaf ( \"Leaf B\" )); Composite * comp = new Composite ( \"Composite X\" ); comp -> add ( new Leaf ( \"Leaf XA\" )); comp -> add ( new Leaf ( \"Leaf XB\" )); root -> add ( comp ); Composite * comp2 = new Composite ( \"Composite XY\" ); comp2 -> add ( new Leaf ( \"Leaf XYA\" )); comp2 -> add ( new Leaf ( \"Leaf XYB\" )); comp -> add ( comp2 ); root -> add ( new Leaf ( \"Leaf C\" )); Leaf * f = new Leaf ( \"Leaf D\" ); root -> add ( f ); root -> remove ( f ); root -> display ( 1 ); return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/15-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/","text":"\u8fed\u4ee3\u5668\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u63d0\u4f9b\u4e00\u79cd\u65b9\u6cd5\u987a\u5e8f\u8bbf\u95ee\u4e00\u4e2a\u805a\u5408\u5bf9\u8c61\u4e2d\u7684\u5404\u4e2a\u5143\u7d20\uff0c\u800c\u53c8\u4e0d\u66b4\u9732\u8be5\u5bf9\u8c61\u7684\u5185\u90e8\u8868\u793a \u6211\u89c9\u5f97C++ \u7684\u8fed\u4ee3\u5668\u66f4\u4f18\u79c0 \u5c31\u4e0d\u5199\u4e86","title":"15-\u8fed\u4ee3\u5668\u6a21\u5f0f"},{"location":"DesignPattern/15-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u8fed\u4ee3\u5668\u6a21\u5f0f"},{"location":"DesignPattern/15-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/#_2","text":"\u63d0\u4f9b\u4e00\u79cd\u65b9\u6cd5\u987a\u5e8f\u8bbf\u95ee\u4e00\u4e2a\u805a\u5408\u5bf9\u8c61\u4e2d\u7684\u5404\u4e2a\u5143\u7d20\uff0c\u800c\u53c8\u4e0d\u66b4\u9732\u8be5\u5bf9\u8c61\u7684\u5185\u90e8\u8868\u793a \u6211\u89c9\u5f97C++ \u7684\u8fed\u4ee3\u5668\u66f4\u4f18\u79c0 \u5c31\u4e0d\u5199\u4e86","title":"\u5b9a\u4e49"},{"location":"DesignPattern/16-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/","text":"\u5355\u4f8b\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u4fdd\u8bc1\u4e00\u4e2a\u7c7b\u4ec5\u6709\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u63d0\u4f9b\u4e00\u4e2a\u8bbf\u95ee\u5b83\u7684\u5168\u5c40\u8bbf\u95ee\u70b9 \u5b9e\u73b0\u6b65\u9aa4\uff1a 1\uff09\u6784\u9020\u51fd\u6570\u79c1\u6709\u5316 2\uff09\u63d0\u4f9b\u4e00\u4e2a\u5168\u5c40\u7684\u9759\u6001\u65b9\u6cd5\uff08\u5168\u5c40\u8bbf\u95ee\u70b9\uff09 3\uff09\u5728\u7c7b\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u9759\u6001\u6307\u9488\uff0c\u6307\u5411\u672c\u7c7b\u7684\u53d8\u91cf\u7684\u9759\u6001\u53d8\u91cf\u6307\u9488 \u61d2\u6c49\u5f0f \u00b6 #include <iostream> using namespace std ; #define NULL 0 // \u5355\u4f8b\u6a21\u5f0f---\u61d2\u6c49\u5f0f class singelTon { private : singelTon () { cout << \"\u6784\u9020\u51fd\u6570\" << endl ; } static singelTon * sgl_ptr ; public : static singelTon * get_instance (){ if ( sgl_ptr == NULL ) { sgl_ptr = new singelTon (); } return sgl_ptr ; } static void free_instance () { delete sgl_ptr ; sgl_ptr = NULL ; cout << \"\u5bf9\u8c61\u91ca\u653e\u6210\u529f\uff01\" << endl ; } }; singelTon * singelTon :: sgl_ptr = NULL ; void main () { singelTon * ptr1 = singelTon :: get_instance (); singelTon * ptr2 = singelTon :: get_instance (); if ( ptr1 == ptr2 ) { cout << \"\u540c\u4e00\u4e2a\u5bf9\u8c61\uff01\" << endl ; } else { cout << \"\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff01\" << endl ; } singelTon :: free_instance (); system ( \"pause\" ); } \u997f\u6c49\u5f0f \u00b6 #include <iostream> using namespace std ; #define NULL 0 // \u5355\u4f8b\u6a21\u5f0f---\u997f\u6c49\u5f0f class singelTon { private : singelTon () { cout << \"\u6784\u9020\u51fd\u6570\" << endl ; } static singelTon * sgl_ptr ; public : static singelTon * get_instance (){ return sgl_ptr ; } static void free_instance () { delete sgl_ptr ; sgl_ptr = NULL ; cout << \"\u5bf9\u8c61\u91ca\u653e\u6210\u529f\uff01\" << endl ; } }; singelTon * singelTon :: sgl_ptr = new singelTon (); void main () { singelTon * ptr1 = singelTon :: get_instance (); singelTon * ptr2 = singelTon :: get_instance (); if ( ptr1 == ptr2 ) { cout << \"\u540c\u4e00\u4e2a\u5bf9\u8c61\uff01\" << endl ; } else { cout << \"\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff01\" << endl ; } singelTon :: free_instance (); system ( \"pause\" ); } \u61d2\u6c49\u5f0f-\u591a\u7ebf\u7a0b\u4e0d\u540c\u6b65\u7684\u95ee\u9898\uff1a\u8fd0\u7528\u4e8c\u6b21\u68c0\u67e5+\u4e34\u754c\u533a\u4e0a\u9501 \u00b6 static CCriticalsection cs ; //\u4e34\u754c\u533a class singelTon { private : singelTon () { cout << \"\u6784\u9020\u51fd\u6570\" << endl ; } static singelTon * sgl_ptr ; public : static singelTon * get_instance () { if ( sgl_ptr == NULL ) { cs . Lock (); if ( sgl_ptr == NULL ) { sgl_ptr = new singelTon (); } cs . Unlock (); } return sgl_ptr ; } static void free_instance () { delete sgl_ptr ; sgl_ptr = NULL ; cout << \"\u5bf9\u8c61\u91ca\u653e\u6210\u529f\uff01\" << endl ; } }; singelTon * singelTon :: sgl_ptr = NULL ;","title":"16-\u5355\u4f8b\u6a21\u5f0f"},{"location":"DesignPattern/16-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u5355\u4f8b\u6a21\u5f0f"},{"location":"DesignPattern/16-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/#_2","text":"\u4fdd\u8bc1\u4e00\u4e2a\u7c7b\u4ec5\u6709\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u63d0\u4f9b\u4e00\u4e2a\u8bbf\u95ee\u5b83\u7684\u5168\u5c40\u8bbf\u95ee\u70b9 \u5b9e\u73b0\u6b65\u9aa4\uff1a 1\uff09\u6784\u9020\u51fd\u6570\u79c1\u6709\u5316 2\uff09\u63d0\u4f9b\u4e00\u4e2a\u5168\u5c40\u7684\u9759\u6001\u65b9\u6cd5\uff08\u5168\u5c40\u8bbf\u95ee\u70b9\uff09 3\uff09\u5728\u7c7b\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u9759\u6001\u6307\u9488\uff0c\u6307\u5411\u672c\u7c7b\u7684\u53d8\u91cf\u7684\u9759\u6001\u53d8\u91cf\u6307\u9488","title":"\u5b9a\u4e49"},{"location":"DesignPattern/16-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/#_3","text":"#include <iostream> using namespace std ; #define NULL 0 // \u5355\u4f8b\u6a21\u5f0f---\u61d2\u6c49\u5f0f class singelTon { private : singelTon () { cout << \"\u6784\u9020\u51fd\u6570\" << endl ; } static singelTon * sgl_ptr ; public : static singelTon * get_instance (){ if ( sgl_ptr == NULL ) { sgl_ptr = new singelTon (); } return sgl_ptr ; } static void free_instance () { delete sgl_ptr ; sgl_ptr = NULL ; cout << \"\u5bf9\u8c61\u91ca\u653e\u6210\u529f\uff01\" << endl ; } }; singelTon * singelTon :: sgl_ptr = NULL ; void main () { singelTon * ptr1 = singelTon :: get_instance (); singelTon * ptr2 = singelTon :: get_instance (); if ( ptr1 == ptr2 ) { cout << \"\u540c\u4e00\u4e2a\u5bf9\u8c61\uff01\" << endl ; } else { cout << \"\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff01\" << endl ; } singelTon :: free_instance (); system ( \"pause\" ); }","title":"\u61d2\u6c49\u5f0f"},{"location":"DesignPattern/16-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/#_4","text":"#include <iostream> using namespace std ; #define NULL 0 // \u5355\u4f8b\u6a21\u5f0f---\u997f\u6c49\u5f0f class singelTon { private : singelTon () { cout << \"\u6784\u9020\u51fd\u6570\" << endl ; } static singelTon * sgl_ptr ; public : static singelTon * get_instance (){ return sgl_ptr ; } static void free_instance () { delete sgl_ptr ; sgl_ptr = NULL ; cout << \"\u5bf9\u8c61\u91ca\u653e\u6210\u529f\uff01\" << endl ; } }; singelTon * singelTon :: sgl_ptr = new singelTon (); void main () { singelTon * ptr1 = singelTon :: get_instance (); singelTon * ptr2 = singelTon :: get_instance (); if ( ptr1 == ptr2 ) { cout << \"\u540c\u4e00\u4e2a\u5bf9\u8c61\uff01\" << endl ; } else { cout << \"\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff01\" << endl ; } singelTon :: free_instance (); system ( \"pause\" ); }","title":"\u997f\u6c49\u5f0f"},{"location":"DesignPattern/16-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/#-","text":"static CCriticalsection cs ; //\u4e34\u754c\u533a class singelTon { private : singelTon () { cout << \"\u6784\u9020\u51fd\u6570\" << endl ; } static singelTon * sgl_ptr ; public : static singelTon * get_instance () { if ( sgl_ptr == NULL ) { cs . Lock (); if ( sgl_ptr == NULL ) { sgl_ptr = new singelTon (); } cs . Unlock (); } return sgl_ptr ; } static void free_instance () { delete sgl_ptr ; sgl_ptr = NULL ; cout << \"\u5bf9\u8c61\u91ca\u653e\u6210\u529f\uff01\" << endl ; } }; singelTon * singelTon :: sgl_ptr = NULL ;","title":"\u61d2\u6c49\u5f0f-\u591a\u7ebf\u7a0b\u4e0d\u540c\u6b65\u7684\u95ee\u9898\uff1a\u8fd0\u7528\u4e8c\u6b21\u68c0\u67e5+\u4e34\u754c\u533a\u4e0a\u9501"},{"location":"DesignPattern/17-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/","text":"\u6865\u63a5\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u5c06\u62bd\u8c61\u90e8\u5206\u4e0e\u5b83\u7684\u5b9e\u73b0\u90e8\u5206\u5206\u79bb\uff0c\u4f7f\u5b83\u4eec\u90fd\u53ef\u4ee5\u72ec\u7acb\u5730\u53d8\u5316 \u4ee3\u7801 \u00b6 #include <iostream> using namespace std ; class Implementor { public : virtual void Operation () = 0 ; }; class ConcreteImplementorA : public Implementor { public : void Operation () override { cout << \"\u5177\u4f53\u5b9e\u73b0A\u7684\u65b9\u6cd5\u6267\u884c\" << endl ; } }; class ConcreteImplementorB : public Implementor { public : void Operation () override { cout << \"\u5177\u4f53\u5b9e\u73b0B\u7684\u65b9\u6cd5\u6267\u884c\" << endl ; } }; class Abstraction { public : virtual ~ Abstraction () { if ( imp ) delete imp ; } void setImplementor ( Implementor * tmp ) { if ( imp ) delete imp ; imp = tmp ; } virtual void Operation () { imp -> Operation (); } protected : Implementor * imp ; }; class RefinedAbstraction : public Abstraction { public : void Operation () override { imp -> Operation (); } }; int main () { Abstraction * abs = new RefinedAbstraction (); abs -> setImplementor ( new ConcreteImplementorA ()); abs -> Operation (); abs -> setImplementor ( new ConcreteImplementorB ()); abs -> Operation (); return 0 ; }","title":"17-\u6865\u63a5\u6a21\u5f0f"},{"location":"DesignPattern/17-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u6865\u63a5\u6a21\u5f0f"},{"location":"DesignPattern/17-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/#_2","text":"\u5c06\u62bd\u8c61\u90e8\u5206\u4e0e\u5b83\u7684\u5b9e\u73b0\u90e8\u5206\u5206\u79bb\uff0c\u4f7f\u5b83\u4eec\u90fd\u53ef\u4ee5\u72ec\u7acb\u5730\u53d8\u5316","title":"\u5b9a\u4e49"},{"location":"DesignPattern/17-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/#_3","text":"#include <iostream> using namespace std ; class Implementor { public : virtual void Operation () = 0 ; }; class ConcreteImplementorA : public Implementor { public : void Operation () override { cout << \"\u5177\u4f53\u5b9e\u73b0A\u7684\u65b9\u6cd5\u6267\u884c\" << endl ; } }; class ConcreteImplementorB : public Implementor { public : void Operation () override { cout << \"\u5177\u4f53\u5b9e\u73b0B\u7684\u65b9\u6cd5\u6267\u884c\" << endl ; } }; class Abstraction { public : virtual ~ Abstraction () { if ( imp ) delete imp ; } void setImplementor ( Implementor * tmp ) { if ( imp ) delete imp ; imp = tmp ; } virtual void Operation () { imp -> Operation (); } protected : Implementor * imp ; }; class RefinedAbstraction : public Abstraction { public : void Operation () override { imp -> Operation (); } }; int main () { Abstraction * abs = new RefinedAbstraction (); abs -> setImplementor ( new ConcreteImplementorA ()); abs -> Operation (); abs -> setImplementor ( new ConcreteImplementorB ()); abs -> Operation (); return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/18-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/","text":"\u547d\u4ee4\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u5c06\u4e00\u4e2a\u8bf7\u6c42\u5c01\u88c5\u4e3a\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4ece\u800c\u4f7f\u4f60\u53ef\u7528\u4e0d\u540c\u7684\u8bf7\u6c42\u5bf9\u5ba2\u6237\u8fdb\u884c\u53c2\u6570\u5316\uff1b\u5bf9\u8bf7\u6c42\u6392\u961f\u6216\u8005\u8bb0\u5f55\u8bf7\u6c42\u65e5\u5fd7\uff0c\u4ee5\u53ca\u652f\u6301\u53ef\u64a4\u9500\u7684\u64cd\u4f5c\u3002 \u4f18\u70b9 \u00b6 \u4e00\uff09\u5bb9\u6613\u8bbe\u8ba1\u4e00\u4e2a\u547d\u4ee4\u961f\u5217 \u4e8c\uff09\u5bb9\u6613\u5c06\u547d\u4ee4\u8bb0\u5165\u65e5\u5fd7 \u4e09\uff09\u5141\u8bb8\u63a5\u53d7\u8bf7\u6c42\u7684\u4e00\u65b9\u51b3\u5b9a\u662f\u5426\u8981\u5426\u51b3\u8bf7\u6c42 \u56db\uff09\u5bb9\u6613\u5b9e\u73b0\u5bf9\u8bf7\u6c42\u7684\u64a4\u9500\u548c\u91cd\u505a \u4e94\uff09\u7531\u4e8e\u52a0\u7d27\u65b0\u7684\u5177\u4f53\u547d\u4ee4\u7c7b\u4e0d\u5f71\u54cd\u5176\u4ed6\u7c7b\uff0c\u56e0\u6b64\u589e\u52a0\u65b0\u7684\u5177\u4f53\u547d\u4ee4\u7c7b\u5f88\u5bb9\u6613 \u516d\uff09\u628a\u8bf7\u6c42\u4e00\u4e2a\u64cd\u4f5c\u7684\u5bf9\u8c61\u4e0e\u77e5\u9053\u600e\u4e48\u6267\u884c\u4e00\u4e2a\u64cd\u4f5c\u7684\u5bf9\u8c61\u5206\u5272\u5f00 \u4ee3\u7801 \u00b6 #include <iostream> using namespace std ; class Receiver { public : void action () { cout << \"\u6267\u884c\u8bf7\u6c42\" << endl ; } }; class Command { protected : Receiver * receiver ; public : Command ( Receiver * tmp ) : receiver ( tmp ){} virtual void execute () {}; }; class ConcreteCommand : public Command { public : ConcreteCommand ( Receiver * tmp ) : Command ( tmp ){} void execute () override { receiver -> action (); } }; class Invoker { private : Command * command ; public : void setCommand ( Command * tmp ) { command = tmp ; } void executeCommand () { command -> execute (); } }; int main () { Receiver * r = new Receiver (); Command * c = new ConcreteCommand ( r ); Invoker * i = new Invoker (); i -> setCommand ( c ); i -> executeCommand (); delete i ; delete c ; delete r ; return 0 ; }","title":"18-\u547d\u4ee4\u6a21\u5f0f"},{"location":"DesignPattern/18-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u547d\u4ee4\u6a21\u5f0f"},{"location":"DesignPattern/18-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/#_2","text":"\u5c06\u4e00\u4e2a\u8bf7\u6c42\u5c01\u88c5\u4e3a\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4ece\u800c\u4f7f\u4f60\u53ef\u7528\u4e0d\u540c\u7684\u8bf7\u6c42\u5bf9\u5ba2\u6237\u8fdb\u884c\u53c2\u6570\u5316\uff1b\u5bf9\u8bf7\u6c42\u6392\u961f\u6216\u8005\u8bb0\u5f55\u8bf7\u6c42\u65e5\u5fd7\uff0c\u4ee5\u53ca\u652f\u6301\u53ef\u64a4\u9500\u7684\u64cd\u4f5c\u3002","title":"\u5b9a\u4e49"},{"location":"DesignPattern/18-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/#_3","text":"\u4e00\uff09\u5bb9\u6613\u8bbe\u8ba1\u4e00\u4e2a\u547d\u4ee4\u961f\u5217 \u4e8c\uff09\u5bb9\u6613\u5c06\u547d\u4ee4\u8bb0\u5165\u65e5\u5fd7 \u4e09\uff09\u5141\u8bb8\u63a5\u53d7\u8bf7\u6c42\u7684\u4e00\u65b9\u51b3\u5b9a\u662f\u5426\u8981\u5426\u51b3\u8bf7\u6c42 \u56db\uff09\u5bb9\u6613\u5b9e\u73b0\u5bf9\u8bf7\u6c42\u7684\u64a4\u9500\u548c\u91cd\u505a \u4e94\uff09\u7531\u4e8e\u52a0\u7d27\u65b0\u7684\u5177\u4f53\u547d\u4ee4\u7c7b\u4e0d\u5f71\u54cd\u5176\u4ed6\u7c7b\uff0c\u56e0\u6b64\u589e\u52a0\u65b0\u7684\u5177\u4f53\u547d\u4ee4\u7c7b\u5f88\u5bb9\u6613 \u516d\uff09\u628a\u8bf7\u6c42\u4e00\u4e2a\u64cd\u4f5c\u7684\u5bf9\u8c61\u4e0e\u77e5\u9053\u600e\u4e48\u6267\u884c\u4e00\u4e2a\u64cd\u4f5c\u7684\u5bf9\u8c61\u5206\u5272\u5f00","title":"\u4f18\u70b9"},{"location":"DesignPattern/18-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/#_4","text":"#include <iostream> using namespace std ; class Receiver { public : void action () { cout << \"\u6267\u884c\u8bf7\u6c42\" << endl ; } }; class Command { protected : Receiver * receiver ; public : Command ( Receiver * tmp ) : receiver ( tmp ){} virtual void execute () {}; }; class ConcreteCommand : public Command { public : ConcreteCommand ( Receiver * tmp ) : Command ( tmp ){} void execute () override { receiver -> action (); } }; class Invoker { private : Command * command ; public : void setCommand ( Command * tmp ) { command = tmp ; } void executeCommand () { command -> execute (); } }; int main () { Receiver * r = new Receiver (); Command * c = new ConcreteCommand ( r ); Invoker * i = new Invoker (); i -> setCommand ( c ); i -> executeCommand (); delete i ; delete c ; delete r ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/19-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/","text":"\u804c\u8d23\u94fe\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u4f7f\u591a\u4e2a\u5bf9\u8c61\u90fd\u6709\u673a\u4f1a\u5904\u7406\u8bf7\u6c42\uff0c\u4ece\u800c\u907f\u514d\u8bf7\u6c42\u7684\u53d1\u9001\u8005\u548c\u63a5\u53d7\u8005\u4e4b\u95f4\u7684\u8026\u5408\u5173\u7cfb\u3002\u5c06\u8fd9\u4e2a\u5bf9\u8c61\u8fde\u6210\u4e00\u6761\u94fe\uff0c\u5e76\u6cbf\u7740\u8fd9\u6761\u94fe\u4f20\u9012\u8be5\u8bf7\u6c42\uff0c\u76f4\u5230\u6709\u4e00\u4e2a\u5bf9\u8c61\u5904\u7406\u5b83\u4e3a\u6b62\u3002 \u4ee3\u7801 \u00b6 #include <iostream> #include <typeinfo> using namespace std ; class Handler { protected : Handler * successor ; public : void SetSuccessor ( Handler * successor ) { this -> successor = successor ; } virtual void HandleRequest ( int request ){} }; class ConcreteHandler1 : public Handler { public : void HandleRequest ( int request ) override { if ( request >= 0 && request < 10 ) { cout << typeid ( * this ). name () << \" \" << request << endl ; } else if ( successor != nullptr ) { successor -> HandleRequest ( request ); } } }; class ConcreteHandler2 : public Handler { public : void HandleRequest ( int request ) override { if ( request >= 10 && request < 20 ) { cout << typeid ( * this ). name () << \" \" << request << endl ; } else if ( successor != nullptr ) { successor -> HandleRequest ( request ); } } }; class ConcreteHandler3 : public Handler { public : void HandleRequest ( int request ) override { if ( request >= 20 && request < 30 ) { cout << typeid ( * this ). name () << \" \" << request << endl ; } else if ( successor != nullptr ) { successor -> HandleRequest ( request ); } } }; int main () { Handler * h1 = new ConcreteHandler1 (); Handler * h2 = new ConcreteHandler2 (); Handler * h3 = new ConcreteHandler3 (); h1 -> SetSuccessor ( h2 ); h2 -> SetSuccessor ( h3 ); int request [] = { 2 , 5 , 14 , 22 , 18 , 3 , 27 , 20 }; for ( auto x : request ) { h1 -> HandleRequest ( x ); } delete h3 ; delete h2 ; delete h1 ; return 0 ; }","title":"19-\u804c\u8d23\u94fe\u6a21\u5f0f"},{"location":"DesignPattern/19-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u804c\u8d23\u94fe\u6a21\u5f0f"},{"location":"DesignPattern/19-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/#_2","text":"\u4f7f\u591a\u4e2a\u5bf9\u8c61\u90fd\u6709\u673a\u4f1a\u5904\u7406\u8bf7\u6c42\uff0c\u4ece\u800c\u907f\u514d\u8bf7\u6c42\u7684\u53d1\u9001\u8005\u548c\u63a5\u53d7\u8005\u4e4b\u95f4\u7684\u8026\u5408\u5173\u7cfb\u3002\u5c06\u8fd9\u4e2a\u5bf9\u8c61\u8fde\u6210\u4e00\u6761\u94fe\uff0c\u5e76\u6cbf\u7740\u8fd9\u6761\u94fe\u4f20\u9012\u8be5\u8bf7\u6c42\uff0c\u76f4\u5230\u6709\u4e00\u4e2a\u5bf9\u8c61\u5904\u7406\u5b83\u4e3a\u6b62\u3002","title":"\u5b9a\u4e49"},{"location":"DesignPattern/19-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/#_3","text":"#include <iostream> #include <typeinfo> using namespace std ; class Handler { protected : Handler * successor ; public : void SetSuccessor ( Handler * successor ) { this -> successor = successor ; } virtual void HandleRequest ( int request ){} }; class ConcreteHandler1 : public Handler { public : void HandleRequest ( int request ) override { if ( request >= 0 && request < 10 ) { cout << typeid ( * this ). name () << \" \" << request << endl ; } else if ( successor != nullptr ) { successor -> HandleRequest ( request ); } } }; class ConcreteHandler2 : public Handler { public : void HandleRequest ( int request ) override { if ( request >= 10 && request < 20 ) { cout << typeid ( * this ). name () << \" \" << request << endl ; } else if ( successor != nullptr ) { successor -> HandleRequest ( request ); } } }; class ConcreteHandler3 : public Handler { public : void HandleRequest ( int request ) override { if ( request >= 20 && request < 30 ) { cout << typeid ( * this ). name () << \" \" << request << endl ; } else if ( successor != nullptr ) { successor -> HandleRequest ( request ); } } }; int main () { Handler * h1 = new ConcreteHandler1 (); Handler * h2 = new ConcreteHandler2 (); Handler * h3 = new ConcreteHandler3 (); h1 -> SetSuccessor ( h2 ); h2 -> SetSuccessor ( h3 ); int request [] = { 2 , 5 , 14 , 22 , 18 , 3 , 27 , 20 }; for ( auto x : request ) { h1 -> HandleRequest ( x ); } delete h3 ; delete h2 ; delete h1 ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/2-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/","text":"\u88c5\u9970\u6a21\u5f0f \u00b6 \u5b9a\u4e49\uff1a \u00b6 \u52a8\u6001\u5730\u7ed9\u4e00\u4e2a\u5bf9\u8c61\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7684\u804c\u8d23\uff0c\u5c31\u589e\u52a0\u529f\u80fd\u6765\u8bf4\uff0c\u88c5\u9970\u6a21\u5f0f\u6bd4\u751f\u6210\u5b50\u7c7b\u66f4\u52a0\u7075\u6d3b\u3002 \u4f18\u70b9\uff1a \u00b6 \u628a\u7c7b\u4e2d\u7684\u88c5\u9970\u529f\u80fd\u4ece\u7c7b\u4e2d\u642c\u79fb\u53bb\u9664\uff0c\u8fd9\u6837\u53ef\u4ee5\u7b80\u5316\u539f\u6709\u7684\u7c7b\u3002 \u4ee3\u7801\uff1a \u00b6 #include<iostream> using namespace std; class Component { public: virtual void operation() {} }; class ConcreteComponent :public Component { public: void operation() override { cout << \"\u5177\u4f53\u5bf9\u8c61\u7684\u64cd\u4f5c\" << endl; } }; class Decorator : public Component { public: void setComponent(Component *component) { this->component = component; } void operation() override { if (component) component->operation(); } protected: Component *component; }; class ConcreteDecoratorA : public Decorator { public: void operation() override { __super::operation(); addedState = \"New State\"; cout << \"\u5177\u4f53\u88c5\u9970\u5bf9\u8c61A\u7684\u64cd\u4f5c\" << endl; } private: string addedState; }; class ConcreteDecoratorB : public Decorator { public: void operation() override { __super::operation(); addedBehavior(); cout << \"\u5177\u4f53\u88c5\u9970\u5bf9\u8c61B\u7684\u64cd\u4f5c\" << endl; } private: void addedBehavior() { cout << \"\u8fd9\u662fB \u72ec\u6709\u7684\u51fd\u6570\" << endl; } }; int main() { ConcreteComponent *c = new ConcreteComponent(); ConcreteDecoratorA *d1 = new ConcreteDecoratorA(); ConcreteDecoratorB *d2 = new ConcreteDecoratorB(); d1->setComponent(c); d2->setComponent(d1); d2->operation(); delete d2; delete d1; delete c; return 0; }","title":"2-\u88c5\u9970\u6a21\u5f0f"},{"location":"DesignPattern/2-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u88c5\u9970\u6a21\u5f0f"},{"location":"DesignPattern/2-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/#_2","text":"\u52a8\u6001\u5730\u7ed9\u4e00\u4e2a\u5bf9\u8c61\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7684\u804c\u8d23\uff0c\u5c31\u589e\u52a0\u529f\u80fd\u6765\u8bf4\uff0c\u88c5\u9970\u6a21\u5f0f\u6bd4\u751f\u6210\u5b50\u7c7b\u66f4\u52a0\u7075\u6d3b\u3002","title":"\u5b9a\u4e49\uff1a"},{"location":"DesignPattern/2-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/#_3","text":"\u628a\u7c7b\u4e2d\u7684\u88c5\u9970\u529f\u80fd\u4ece\u7c7b\u4e2d\u642c\u79fb\u53bb\u9664\uff0c\u8fd9\u6837\u53ef\u4ee5\u7b80\u5316\u539f\u6709\u7684\u7c7b\u3002","title":"\u4f18\u70b9\uff1a"},{"location":"DesignPattern/2-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/#_4","text":"#include<iostream> using namespace std; class Component { public: virtual void operation() {} }; class ConcreteComponent :public Component { public: void operation() override { cout << \"\u5177\u4f53\u5bf9\u8c61\u7684\u64cd\u4f5c\" << endl; } }; class Decorator : public Component { public: void setComponent(Component *component) { this->component = component; } void operation() override { if (component) component->operation(); } protected: Component *component; }; class ConcreteDecoratorA : public Decorator { public: void operation() override { __super::operation(); addedState = \"New State\"; cout << \"\u5177\u4f53\u88c5\u9970\u5bf9\u8c61A\u7684\u64cd\u4f5c\" << endl; } private: string addedState; }; class ConcreteDecoratorB : public Decorator { public: void operation() override { __super::operation(); addedBehavior(); cout << \"\u5177\u4f53\u88c5\u9970\u5bf9\u8c61B\u7684\u64cd\u4f5c\" << endl; } private: void addedBehavior() { cout << \"\u8fd9\u662fB \u72ec\u6709\u7684\u51fd\u6570\" << endl; } }; int main() { ConcreteComponent *c = new ConcreteComponent(); ConcreteDecoratorA *d1 = new ConcreteDecoratorA(); ConcreteDecoratorB *d2 = new ConcreteDecoratorB(); d1->setComponent(c); d2->setComponent(d1); d2->operation(); delete d2; delete d1; delete c; return 0; }","title":"\u4ee3\u7801\uff1a"},{"location":"DesignPattern/20-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/","text":"\u4e2d\u4ecb\u8005\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u7528\u4e00\u4e2a\u4e2d\u4ecb\u5bf9\u8c61\u6765\u5c01\u88c5\u4e00\u7cfb\u5217\u7684\u5bf9\u8c61\u4ea4\u4e92\u3002\u4e2d\u4ecb\u8005\u4f7f\u5404\u5bf9\u8c61\u4e0d\u9700\u8981\u663e\u793a\u5730\u76f8\u4e92\u5f15\u7528\uff0c\u4ece\u800c\u4f7f\u5176\u8026\u5408\u677e\u6563\uff0c\u800c\u4e14\u53ef\u4ee5\u72ec\u7acb\u5730\u6539\u53d8\u5b83\u4eec\u4e4b\u95f4\u7684\u4ea4\u4e92\u3002 \u4f18\u7f3a\u70b9 \u00b6 \u51cf\u5c11\u4e86\u5404\u4e2aColleague\u7684\u8026\u5408\uff0c\u4f7f\u5f97\u53ef\u4ee5\u72ec\u7acb\u5730\u6539\u53d8\u548c\u590d\u7528\u5404\u4e2aColleague \u548cMediator. \u7531\u4e8eConcreteMediator\u63a7\u5236\u96c6\u4e2d\u5316\uff0c\u4e8e\u662f\u5c31\u628a\u4ea4\u4e92\u7684\u590d\u6742\u6027\u53d8\u4e3a\u4e86\u4e2d\u4ecb\u8005\u7684\u590d\u6742\u6027\uff0c\u8fd9\u5c31\u4f7f\u5f97\u4e2d\u4ecb\u8005\u53d8\u5f97\u6bd4\u4efb\u4f55\u4e00\u4e2aConcreteColleague\u90fd\u590d\u6742 \u4ee3\u7801 \u00b6 #include <iostream> #include <string> using namespace std ; class Colleague ; class Mediator { public : virtual void Send ( string message , Colleague * col ) = 0 ; }; class Colleague { protected : Mediator * mediator ; public : Colleague ( Mediator * m ) { mediator = m ; } }; class ConcreteColleague1 : public Colleague { public : ConcreteColleague1 ( Mediator * m ) : Colleague ( m ){} void Send ( string message ) { mediator -> Send ( message , this ); } void Notify ( string message ) { cout << \"\u540c\u4e8b1 \u5f97\u5230\u6d88\u606f \" << message << endl ; } }; class ConcreteColleague2 : public Colleague { public : ConcreteColleague2 ( Mediator * m ) : Colleague ( m ) {} void Send ( string message ) { mediator -> Send ( message , this ); } void Notify ( string message ) { cout << \"\u540c\u4e8b2 \u5f97\u5230\u6d88\u606f \" << message << endl ; } }; class ConcreteMediator : public Mediator { private : ConcreteColleague1 * colleage1 ; ConcreteColleague2 * colleage2 ; public : void setConcreteColleague1 ( ConcreteColleague1 * val ) { colleage1 = val ; } void setConcreteColleague2 ( ConcreteColleague2 * val ) { colleage2 = val ; } void Send ( string message , Colleague * col ) override { if ( col == colleage1 ) colleage2 -> Notify ( message ); else colleage1 -> Notify ( message ); } }; int main () { ConcreteMediator * m = new ConcreteMediator (); ConcreteColleague1 * c1 = new ConcreteColleague1 ( m ); ConcreteColleague2 * c2 = new ConcreteColleague2 ( m ); m -> setConcreteColleague1 ( c1 ); m -> setConcreteColleague2 ( c2 ); c1 -> Send ( \"\u5403\u8fc7\u996d\u4e86\u5417\" ); c2 -> Send ( \"\u6ca1\u6709\u5462\uff0c\u4f60\u6253\u7b97\u8bf7\u5ba2\uff1f\" ); delete c2 ; delete c1 ; delete m ; return 0 ; }","title":"20-\u4e2d\u4ecb\u8005\u6a21\u5f0f"},{"location":"DesignPattern/20-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u4e2d\u4ecb\u8005\u6a21\u5f0f"},{"location":"DesignPattern/20-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/#_2","text":"\u7528\u4e00\u4e2a\u4e2d\u4ecb\u5bf9\u8c61\u6765\u5c01\u88c5\u4e00\u7cfb\u5217\u7684\u5bf9\u8c61\u4ea4\u4e92\u3002\u4e2d\u4ecb\u8005\u4f7f\u5404\u5bf9\u8c61\u4e0d\u9700\u8981\u663e\u793a\u5730\u76f8\u4e92\u5f15\u7528\uff0c\u4ece\u800c\u4f7f\u5176\u8026\u5408\u677e\u6563\uff0c\u800c\u4e14\u53ef\u4ee5\u72ec\u7acb\u5730\u6539\u53d8\u5b83\u4eec\u4e4b\u95f4\u7684\u4ea4\u4e92\u3002","title":"\u5b9a\u4e49"},{"location":"DesignPattern/20-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/#_3","text":"\u51cf\u5c11\u4e86\u5404\u4e2aColleague\u7684\u8026\u5408\uff0c\u4f7f\u5f97\u53ef\u4ee5\u72ec\u7acb\u5730\u6539\u53d8\u548c\u590d\u7528\u5404\u4e2aColleague \u548cMediator. \u7531\u4e8eConcreteMediator\u63a7\u5236\u96c6\u4e2d\u5316\uff0c\u4e8e\u662f\u5c31\u628a\u4ea4\u4e92\u7684\u590d\u6742\u6027\u53d8\u4e3a\u4e86\u4e2d\u4ecb\u8005\u7684\u590d\u6742\u6027\uff0c\u8fd9\u5c31\u4f7f\u5f97\u4e2d\u4ecb\u8005\u53d8\u5f97\u6bd4\u4efb\u4f55\u4e00\u4e2aConcreteColleague\u90fd\u590d\u6742","title":"\u4f18\u7f3a\u70b9"},{"location":"DesignPattern/20-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/#_4","text":"#include <iostream> #include <string> using namespace std ; class Colleague ; class Mediator { public : virtual void Send ( string message , Colleague * col ) = 0 ; }; class Colleague { protected : Mediator * mediator ; public : Colleague ( Mediator * m ) { mediator = m ; } }; class ConcreteColleague1 : public Colleague { public : ConcreteColleague1 ( Mediator * m ) : Colleague ( m ){} void Send ( string message ) { mediator -> Send ( message , this ); } void Notify ( string message ) { cout << \"\u540c\u4e8b1 \u5f97\u5230\u6d88\u606f \" << message << endl ; } }; class ConcreteColleague2 : public Colleague { public : ConcreteColleague2 ( Mediator * m ) : Colleague ( m ) {} void Send ( string message ) { mediator -> Send ( message , this ); } void Notify ( string message ) { cout << \"\u540c\u4e8b2 \u5f97\u5230\u6d88\u606f \" << message << endl ; } }; class ConcreteMediator : public Mediator { private : ConcreteColleague1 * colleage1 ; ConcreteColleague2 * colleage2 ; public : void setConcreteColleague1 ( ConcreteColleague1 * val ) { colleage1 = val ; } void setConcreteColleague2 ( ConcreteColleague2 * val ) { colleage2 = val ; } void Send ( string message , Colleague * col ) override { if ( col == colleage1 ) colleage2 -> Notify ( message ); else colleage1 -> Notify ( message ); } }; int main () { ConcreteMediator * m = new ConcreteMediator (); ConcreteColleague1 * c1 = new ConcreteColleague1 ( m ); ConcreteColleague2 * c2 = new ConcreteColleague2 ( m ); m -> setConcreteColleague1 ( c1 ); m -> setConcreteColleague2 ( c2 ); c1 -> Send ( \"\u5403\u8fc7\u996d\u4e86\u5417\" ); c2 -> Send ( \"\u6ca1\u6709\u5462\uff0c\u4f60\u6253\u7b97\u8bf7\u5ba2\uff1f\" ); delete c2 ; delete c1 ; delete m ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/21-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/","text":"\u4eab\u5143\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u8fd0\u7528\u5171\u4eab\u6280\u672f\u6709\u6548\u5730\u652f\u6301\u5927\u91cf\u7ec6\u7c92\u5ea6\u7684\u5bf9\u8c61 \u9002\u7528\u573a\u666f \u00b6 \u5982\u679c \u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u4e86\u5927\u91cf\u7684\u5bf9\u8c61\uff0c\u800c\u5927\u91cf\u7684\u8fd9\u4e9b\u5bf9\u8c61\u9020\u6210\u4e86\u5f88\u5927\u7684\u5b58\u50a8\u5f00\u9500\u65f6\u5c31\u5e94\u8be5\u8003\u8651\u4f7f\u7528\uff0c\u8fd8\u6709\u5c31\u662f\u5bf9\u8c61\u7684\u5927\u591a\u6570\u72b6\u6001\u53ef\u4ee5\u662f\u5916\u90e8\u72b6\u6001\uff0c\u5982\u679c\u5220\u9664\u5bf9\u8c61\u7684\u5916\u90e8\u72b6\u6001\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u76f8\u5bf9\u8f83\u5c11\u7684\u5171\u4eab\u5bf9\u8c61\u53d6\u4ee3\u591a\u7ec4\u5bf9\u8c61\uff0c\u6b64\u65f6\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4eab\u5143\u6a21\u5f0f\u3002 \u4ee3\u7801 \u00b6 #include <iostream> #include <string> #include <map> using namespace std ; class Flyweight { public : virtual void Operation ( int extrinsicstate ) = 0 ; }; class ConcreteFlyweight : public Flyweight { public : void Operation ( int extrinsicstate ) override { cout << \"\u5177\u4f53Flyweight:\" << extrinsicstate << endl ; } }; class UnsharedConcreteFlyweight : public Flyweight { public : void Operation ( int extrinsicstate ) override { cout << \"\u4e0d\u5171\u4eab\u7684\u5177\u4f53Flyweight:\" << extrinsicstate << endl ; } }; class FlyweightFactory { public : FlyweightFactory () { data . insert ( make_pair ( \"X\" , new ConcreteFlyweight ())); data . insert ( make_pair ( \"Y\" , new ConcreteFlyweight ())); data . insert ( make_pair ( \"Z\" , new ConcreteFlyweight ())); } ~ FlyweightFactory () { delete data [ \"X\" ]; delete data [ \"Y\" ]; delete data [ \"Z\" ]; } Flyweight * getFlyweight ( string key ) { return data [ key ]; } private : map < string , Flyweight *> data ; }; int main () { int extrinsicstate = 22 ; FlyweightFactory * f = new FlyweightFactory (); Flyweight * fx = f -> getFlyweight ( \"X\" ); fx -> Operation ( -- extrinsicstate ); Flyweight * fy = f -> getFlyweight ( \"Y\" ); fy -> Operation ( -- extrinsicstate ); Flyweight * fz = f -> getFlyweight ( \"Z\" ); fz -> Operation ( -- extrinsicstate ); UnsharedConcreteFlyweight * uf = new UnsharedConcreteFlyweight (); uf -> Operation ( -- extrinsicstate ); delete uf ; delete f ; return 0 ; }","title":"21-\u4eab\u5143\u6a21\u5f0f"},{"location":"DesignPattern/21-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u4eab\u5143\u6a21\u5f0f"},{"location":"DesignPattern/21-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/#_2","text":"\u8fd0\u7528\u5171\u4eab\u6280\u672f\u6709\u6548\u5730\u652f\u6301\u5927\u91cf\u7ec6\u7c92\u5ea6\u7684\u5bf9\u8c61","title":"\u5b9a\u4e49"},{"location":"DesignPattern/21-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/#_3","text":"\u5982\u679c \u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u4e86\u5927\u91cf\u7684\u5bf9\u8c61\uff0c\u800c\u5927\u91cf\u7684\u8fd9\u4e9b\u5bf9\u8c61\u9020\u6210\u4e86\u5f88\u5927\u7684\u5b58\u50a8\u5f00\u9500\u65f6\u5c31\u5e94\u8be5\u8003\u8651\u4f7f\u7528\uff0c\u8fd8\u6709\u5c31\u662f\u5bf9\u8c61\u7684\u5927\u591a\u6570\u72b6\u6001\u53ef\u4ee5\u662f\u5916\u90e8\u72b6\u6001\uff0c\u5982\u679c\u5220\u9664\u5bf9\u8c61\u7684\u5916\u90e8\u72b6\u6001\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u76f8\u5bf9\u8f83\u5c11\u7684\u5171\u4eab\u5bf9\u8c61\u53d6\u4ee3\u591a\u7ec4\u5bf9\u8c61\uff0c\u6b64\u65f6\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4eab\u5143\u6a21\u5f0f\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"DesignPattern/21-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/#_4","text":"#include <iostream> #include <string> #include <map> using namespace std ; class Flyweight { public : virtual void Operation ( int extrinsicstate ) = 0 ; }; class ConcreteFlyweight : public Flyweight { public : void Operation ( int extrinsicstate ) override { cout << \"\u5177\u4f53Flyweight:\" << extrinsicstate << endl ; } }; class UnsharedConcreteFlyweight : public Flyweight { public : void Operation ( int extrinsicstate ) override { cout << \"\u4e0d\u5171\u4eab\u7684\u5177\u4f53Flyweight:\" << extrinsicstate << endl ; } }; class FlyweightFactory { public : FlyweightFactory () { data . insert ( make_pair ( \"X\" , new ConcreteFlyweight ())); data . insert ( make_pair ( \"Y\" , new ConcreteFlyweight ())); data . insert ( make_pair ( \"Z\" , new ConcreteFlyweight ())); } ~ FlyweightFactory () { delete data [ \"X\" ]; delete data [ \"Y\" ]; delete data [ \"Z\" ]; } Flyweight * getFlyweight ( string key ) { return data [ key ]; } private : map < string , Flyweight *> data ; }; int main () { int extrinsicstate = 22 ; FlyweightFactory * f = new FlyweightFactory (); Flyweight * fx = f -> getFlyweight ( \"X\" ); fx -> Operation ( -- extrinsicstate ); Flyweight * fy = f -> getFlyweight ( \"Y\" ); fy -> Operation ( -- extrinsicstate ); Flyweight * fz = f -> getFlyweight ( \"Z\" ); fz -> Operation ( -- extrinsicstate ); UnsharedConcreteFlyweight * uf = new UnsharedConcreteFlyweight (); uf -> Operation ( -- extrinsicstate ); delete uf ; delete f ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/22-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/","text":"\u89e3\u91ca\u5668\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u8bed\u8a00\uff0c\u5b9a\u4e49\u5b83\u7684\u6587\u6cd5\u7684\u4e00\u79cd\u8868\u793a\uff0c\u5e76\u5b9a\u4e49\u4e00\u4e2a\u89e3\u91ca\u5668\uff0c\u8fd9\u4e2a\u89e3\u91ca\u5668\u4f7f\u7528\u8be5\u8868\u793a\u6765\u89e3\u91ca\u8bed\u8a00\u4e2d\u7684\u53e5\u5b50\u3002 \u4ee3\u7801 \u00b6 #include <iostream> #include <string> #include <list> using namespace std ; class Context { private : string input ; string output ; }; class AbstractExpression { public : virtual void Interpret ( Context * context ) = 0 ; }; class TerminalExpression : public AbstractExpression { public : void Interpret ( Context * context ) override { cout << \"\u7ec8\u65ad\u89e3\u91ca\u5668\" << endl ; } }; class NoterminalExpression : public AbstractExpression { public : void Interpret ( Context * context ) override { cout << \"\u975e\u7ec8\u65ad\u89e3\u91ca\u5668\" << endl ; } }; int main () { Context * c = new Context (); list < AbstractExpression *> l ; l . push_back ( new TerminalExpression ()); l . push_back ( new NoterminalExpression ()); l . push_back ( new TerminalExpression ()); l . push_back ( new TerminalExpression ()); for ( auto x : l ) { x -> Interpret ( c ); } return 0 ; }","title":"22-\u89e3\u91ca\u5668\u6a21\u5f0f"},{"location":"DesignPattern/22-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u89e3\u91ca\u5668\u6a21\u5f0f"},{"location":"DesignPattern/22-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u8bed\u8a00\uff0c\u5b9a\u4e49\u5b83\u7684\u6587\u6cd5\u7684\u4e00\u79cd\u8868\u793a\uff0c\u5e76\u5b9a\u4e49\u4e00\u4e2a\u89e3\u91ca\u5668\uff0c\u8fd9\u4e2a\u89e3\u91ca\u5668\u4f7f\u7528\u8be5\u8868\u793a\u6765\u89e3\u91ca\u8bed\u8a00\u4e2d\u7684\u53e5\u5b50\u3002","title":"\u5b9a\u4e49"},{"location":"DesignPattern/22-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/#_3","text":"#include <iostream> #include <string> #include <list> using namespace std ; class Context { private : string input ; string output ; }; class AbstractExpression { public : virtual void Interpret ( Context * context ) = 0 ; }; class TerminalExpression : public AbstractExpression { public : void Interpret ( Context * context ) override { cout << \"\u7ec8\u65ad\u89e3\u91ca\u5668\" << endl ; } }; class NoterminalExpression : public AbstractExpression { public : void Interpret ( Context * context ) override { cout << \"\u975e\u7ec8\u65ad\u89e3\u91ca\u5668\" << endl ; } }; int main () { Context * c = new Context (); list < AbstractExpression *> l ; l . push_back ( new TerminalExpression ()); l . push_back ( new NoterminalExpression ()); l . push_back ( new TerminalExpression ()); l . push_back ( new TerminalExpression ()); for ( auto x : l ) { x -> Interpret ( c ); } return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/23-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/","text":"\u8bbf\u95ee\u8005\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u8868\u793a\u4e00\u4e2a\u4f5c\u7528\u4e8e\u67d0\u5bf9\u8c61\u7ed3\u6784\u4e2d\u7684\u5404\u5143\u7d20\u7684\u64cd\u4f5c\u3002\u5b83\u4f7f\u4f60\u53ef\u4ee5\u5728\u4e0d\u6539\u53d8\u5143\u7d20\u7684\u7c7b\u7684\u524d\u63d0\u4e0b\u5b9a\u4e49\u4f5c\u7528\u4e8e\u8fd9\u4e9b\u5143\u7d20\u7684\u65b0\u64cd\u4f5c\u3002 \u4f18\u7f3a\u70b9 \u00b6 \u76ee\u7684\u662f\u628a\u5904\u7406\u4ece\u6570\u636e\u7ed3\u6784\u5206\u79bb\u51fa\u6765 \u4f18\u70b9\u5c31\u662f\u589e\u52a0\u65b0\u7684\u64cd\u4f5c\u6bd4\u8f83\u5bb9\u6613\uff0c\u56e0\u4e3a\u589e\u52a0\u65b0\u7684\u64cd\u4f5c\u610f\u5473\u7740\u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u8bbf\u95ee\u8005\u3002\u8bbf\u95ee\u8005\u6a21\u5f0f\u5c06\u6709\u5173\u7684\u884c\u4e3a\u96c6\u4e2d\u5230\u4e00\u4e2a\u8bbf\u95ee\u8005\u5bf9\u8c61\u4e2d\u3002 \u7f3a\u70b9\u662f \u589e\u52a0\u65b0\u7684\u6570\u636e\u7ed3\u6784\u53d8\u5f97\u56f0\u96be\u4e86 \u4ee3\u7801 \u00b6 #include <iostream> #include <typeinfo> #include <list> using namespace std ; class ConcreteElementA ; class ConcreteElementB ; class Visitor { public : virtual void VisitConcreteElmentA ( ConcreteElementA * a ) = 0 ; virtual void VisitConcreteElmentB ( ConcreteElementB * b ) = 0 ; }; class Element { public : virtual void Accept ( Visitor * visitor ) = 0 ; }; class ConcreteElementA : public Element { public : void Accept ( Visitor * visitor ) override { visitor -> VisitConcreteElmentA ( this ); } }; class ConcreteElementB : public Element { public : void Accept ( Visitor * visitor ) override { visitor -> VisitConcreteElmentB ( this ); } }; class ConcreteVisitor : public Visitor { public : void VisitConcreteElmentA ( ConcreteElementA * a ) override { cout << typeid ( a ). name () << \" \" << typeid ( this ). name () << endl ; } void VisitConcreteElmentB ( ConcreteElementB * a ) override { cout << typeid ( a ). name () << \" \" << typeid ( this ). name () << endl ; } }; class ObjectStructure { private : list < Element *> data ; public : void attach ( Element * e ) { data . push_back ( e ); } void detach ( Element * e ) { data . remove ( e ); } void accept ( Visitor * v ) { for ( auto e : data ) { e -> Accept ( v ); } } }; int main () { ObjectStructure * o = new ObjectStructure (); ConcreteElementA * c1 = new ConcreteElementA (); ConcreteElementB * c2 = new ConcreteElementB (); o -> attach ( c1 ); o -> attach ( c2 ); ConcreteVisitor * v1 = new ConcreteVisitor (); c1 -> Accept ( v1 ); c2 -> Accept ( v1 ); delete v1 ; delete c1 ; delete c2 ; delete o ; return 0 ; }","title":"23-\u8bbf\u95ee\u8005\u6a21\u5f0f"},{"location":"DesignPattern/23-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u8bbf\u95ee\u8005\u6a21\u5f0f"},{"location":"DesignPattern/23-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/#_2","text":"\u8868\u793a\u4e00\u4e2a\u4f5c\u7528\u4e8e\u67d0\u5bf9\u8c61\u7ed3\u6784\u4e2d\u7684\u5404\u5143\u7d20\u7684\u64cd\u4f5c\u3002\u5b83\u4f7f\u4f60\u53ef\u4ee5\u5728\u4e0d\u6539\u53d8\u5143\u7d20\u7684\u7c7b\u7684\u524d\u63d0\u4e0b\u5b9a\u4e49\u4f5c\u7528\u4e8e\u8fd9\u4e9b\u5143\u7d20\u7684\u65b0\u64cd\u4f5c\u3002","title":"\u5b9a\u4e49"},{"location":"DesignPattern/23-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/#_3","text":"\u76ee\u7684\u662f\u628a\u5904\u7406\u4ece\u6570\u636e\u7ed3\u6784\u5206\u79bb\u51fa\u6765 \u4f18\u70b9\u5c31\u662f\u589e\u52a0\u65b0\u7684\u64cd\u4f5c\u6bd4\u8f83\u5bb9\u6613\uff0c\u56e0\u4e3a\u589e\u52a0\u65b0\u7684\u64cd\u4f5c\u610f\u5473\u7740\u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u8bbf\u95ee\u8005\u3002\u8bbf\u95ee\u8005\u6a21\u5f0f\u5c06\u6709\u5173\u7684\u884c\u4e3a\u96c6\u4e2d\u5230\u4e00\u4e2a\u8bbf\u95ee\u8005\u5bf9\u8c61\u4e2d\u3002 \u7f3a\u70b9\u662f \u589e\u52a0\u65b0\u7684\u6570\u636e\u7ed3\u6784\u53d8\u5f97\u56f0\u96be\u4e86","title":"\u4f18\u7f3a\u70b9"},{"location":"DesignPattern/23-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/#_4","text":"#include <iostream> #include <typeinfo> #include <list> using namespace std ; class ConcreteElementA ; class ConcreteElementB ; class Visitor { public : virtual void VisitConcreteElmentA ( ConcreteElementA * a ) = 0 ; virtual void VisitConcreteElmentB ( ConcreteElementB * b ) = 0 ; }; class Element { public : virtual void Accept ( Visitor * visitor ) = 0 ; }; class ConcreteElementA : public Element { public : void Accept ( Visitor * visitor ) override { visitor -> VisitConcreteElmentA ( this ); } }; class ConcreteElementB : public Element { public : void Accept ( Visitor * visitor ) override { visitor -> VisitConcreteElmentB ( this ); } }; class ConcreteVisitor : public Visitor { public : void VisitConcreteElmentA ( ConcreteElementA * a ) override { cout << typeid ( a ). name () << \" \" << typeid ( this ). name () << endl ; } void VisitConcreteElmentB ( ConcreteElementB * a ) override { cout << typeid ( a ). name () << \" \" << typeid ( this ). name () << endl ; } }; class ObjectStructure { private : list < Element *> data ; public : void attach ( Element * e ) { data . push_back ( e ); } void detach ( Element * e ) { data . remove ( e ); } void accept ( Visitor * v ) { for ( auto e : data ) { e -> Accept ( v ); } } }; int main () { ObjectStructure * o = new ObjectStructure (); ConcreteElementA * c1 = new ConcreteElementA (); ConcreteElementB * c2 = new ConcreteElementB (); o -> attach ( c1 ); o -> attach ( c2 ); ConcreteVisitor * v1 = new ConcreteVisitor (); c1 -> Accept ( v1 ); c2 -> Accept ( v1 ); delete v1 ; delete c1 ; delete c2 ; delete o ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/3-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/","text":"\u4ee3\u7406\u6a21\u5f0f \u00b6 \u5b9a\u4e49\uff1a \u00b6 \u4e3a\u5176\u4ed6\u5bf9\u8c61\u63d0\u4f9b\u4e00\u79cd\u4ee3\u7406\u4ee5\u63a7\u5236\u5bf9\u8fd9\u4e2a\u5bf9\u8c61\u7684\u8bbf\u95ee** \u4f7f\u7528\u573a\u666f\uff1a \u00b6 \u4e00\uff09\u8fdc\u7a0b\u4ee3\u7406\uff1a \u4e3a\u4e00\u4e2a\u5bf9\u8c61\u5728\u4e0d\u540c\u7684\u5730\u5740\u7a7a\u95f4\u63d0\u4f9b\u5c40\u90e8\u4ee3\u8868\u3002 \u4e8c\uff09\u865a\u62df\u4ee3\u7406\uff1a \u6839\u636e\u9700\u8981\u521b\u5efa\u5f00\u9500\u5f88\u5927\u7684\u5bf9\u8c61\uff0c\u901a\u8fc7\u5b83\u6765\u5b58\u653e\u5b9e\u4f8b\u5316\u9700\u8981\u5f88\u957f\u65f6\u95f4\u7684\u771f\u5b9e\u5bf9\u8c61\u3002 \u4e09\uff09\u5b89\u5168\u4ee3\u7406\uff1a \u7528\u6765\u63a7\u5236\u771f\u5b9e\u5bf9\u8c61\u8bbf\u95ee\u65f6\u7684\u6743\u9650\u3002 **\u56db\uff09\u667a\u80fd\u6307\u5f15\uff1a**\u8c03\u7528\u771f\u5b9e\u7684\u5bf9\u8c61\u65f6\uff0c\u4ee3\u7406\u5904\u7406\u53e6\u5916\u4e00\u4e9b\u4e8b\u3002 \u4ee3\u7801\uff1a \u00b6 #include<iostream> using namespace std; class Subject { public: virtual void request(){} }; class RealSubject : public Subject { public: void request() override { cout << \"\u771f\u5b9e\u7684\u8bf7\u6c42\uff01\" << endl; } }; class Proxy :public Subject { public: ~Proxy() { delete realSubject; } void request() override { if (!realSubject) { realSubject = new RealSubject(); } realSubject->request(); } private: RealSubject *realSubject; }; int main() { Proxy *proxy = new Proxy(); proxy->request(); return 0; }","title":"3-\u4ee3\u7406\u6a21\u5f0f"},{"location":"DesignPattern/3-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u4ee3\u7406\u6a21\u5f0f"},{"location":"DesignPattern/3-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/#_2","text":"\u4e3a\u5176\u4ed6\u5bf9\u8c61\u63d0\u4f9b\u4e00\u79cd\u4ee3\u7406\u4ee5\u63a7\u5236\u5bf9\u8fd9\u4e2a\u5bf9\u8c61\u7684\u8bbf\u95ee**","title":"\u5b9a\u4e49\uff1a"},{"location":"DesignPattern/3-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/#_3","text":"\u4e00\uff09\u8fdc\u7a0b\u4ee3\u7406\uff1a \u4e3a\u4e00\u4e2a\u5bf9\u8c61\u5728\u4e0d\u540c\u7684\u5730\u5740\u7a7a\u95f4\u63d0\u4f9b\u5c40\u90e8\u4ee3\u8868\u3002 \u4e8c\uff09\u865a\u62df\u4ee3\u7406\uff1a \u6839\u636e\u9700\u8981\u521b\u5efa\u5f00\u9500\u5f88\u5927\u7684\u5bf9\u8c61\uff0c\u901a\u8fc7\u5b83\u6765\u5b58\u653e\u5b9e\u4f8b\u5316\u9700\u8981\u5f88\u957f\u65f6\u95f4\u7684\u771f\u5b9e\u5bf9\u8c61\u3002 \u4e09\uff09\u5b89\u5168\u4ee3\u7406\uff1a \u7528\u6765\u63a7\u5236\u771f\u5b9e\u5bf9\u8c61\u8bbf\u95ee\u65f6\u7684\u6743\u9650\u3002 **\u56db\uff09\u667a\u80fd\u6307\u5f15\uff1a**\u8c03\u7528\u771f\u5b9e\u7684\u5bf9\u8c61\u65f6\uff0c\u4ee3\u7406\u5904\u7406\u53e6\u5916\u4e00\u4e9b\u4e8b\u3002","title":"\u4f7f\u7528\u573a\u666f\uff1a"},{"location":"DesignPattern/3-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/#_4","text":"#include<iostream> using namespace std; class Subject { public: virtual void request(){} }; class RealSubject : public Subject { public: void request() override { cout << \"\u771f\u5b9e\u7684\u8bf7\u6c42\uff01\" << endl; } }; class Proxy :public Subject { public: ~Proxy() { delete realSubject; } void request() override { if (!realSubject) { realSubject = new RealSubject(); } realSubject->request(); } private: RealSubject *realSubject; }; int main() { Proxy *proxy = new Proxy(); proxy->request(); return 0; }","title":"\u4ee3\u7801\uff1a"},{"location":"DesignPattern/4-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/","text":"\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f \u00b6 \u5b9a\u4e49\uff1a \u00b6 \u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u5bf9\u8c61\u7684\u63a5\u53e3\uff0c\u8ba9\u5b50\u7c7b\u51b3\u5b9a\u5b9e\u4f8b\u5316\u54ea\u4e00\u4e2a\u7c7b\u3002\u5de5\u5382\u65b9\u6cd5\u4f7f\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u5316\u5ef6\u8fdf\u5230\u5176\u5b50\u7c7b\u3002* \u4ee3\u7801\uff1a \u00b6 #include <iostream> using namespace std ; class Product { public : Product () {} }; class ConcreteProductA : public Product { public : ConcreteProductA () { cout << \"ConcreteProductA\" << endl ; } }; class ConcreteProductB : public Product { public : ConcreteProductB () { cout << \"ConcreteProductB\" << endl ; } }; class Creator { public : virtual Product * create () { return nullptr ; } }; class ConcreteCreatorA : public Creator { public : Product * create () override { return new ConcreteProductA (); } }; class ConcreteCreatorB : public Creator { public : Product * create () override { return new ConcreteProductB (); } }; int main () { ConcreteCreatorA * factoryA = new ConcreteCreatorA (); Product * product = factoryA -> create (); delete product ; ConcreteCreatorB * factoryB = new ConcreteCreatorB (); product = factoryB -> create (); delete product ; delete factoryA ; delete factoryB ; return 0 ; }","title":"4-\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f"},{"location":"DesignPattern/4-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f"},{"location":"DesignPattern/4-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/#_2","text":"\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u5bf9\u8c61\u7684\u63a5\u53e3\uff0c\u8ba9\u5b50\u7c7b\u51b3\u5b9a\u5b9e\u4f8b\u5316\u54ea\u4e00\u4e2a\u7c7b\u3002\u5de5\u5382\u65b9\u6cd5\u4f7f\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u5316\u5ef6\u8fdf\u5230\u5176\u5b50\u7c7b\u3002*","title":"\u5b9a\u4e49\uff1a"},{"location":"DesignPattern/4-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/#_3","text":"#include <iostream> using namespace std ; class Product { public : Product () {} }; class ConcreteProductA : public Product { public : ConcreteProductA () { cout << \"ConcreteProductA\" << endl ; } }; class ConcreteProductB : public Product { public : ConcreteProductB () { cout << \"ConcreteProductB\" << endl ; } }; class Creator { public : virtual Product * create () { return nullptr ; } }; class ConcreteCreatorA : public Creator { public : Product * create () override { return new ConcreteProductA (); } }; class ConcreteCreatorB : public Creator { public : Product * create () override { return new ConcreteProductB (); } }; int main () { ConcreteCreatorA * factoryA = new ConcreteCreatorA (); Product * product = factoryA -> create (); delete product ; ConcreteCreatorB * factoryB = new ConcreteCreatorB (); product = factoryB -> create (); delete product ; delete factoryA ; delete factoryB ; return 0 ; }","title":"\u4ee3\u7801\uff1a"},{"location":"DesignPattern/5-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/","text":"\u539f\u578b\u6a21\u5f0f \u00b6 \u5b9a\u4e49\uff1a \u00b6 \u7528\u539f\u578b\u5b9e\u4f8b\u5236\u5b9a\u521b\u5efa\u5bf9\u8c61\u7684\u79cd\u7c7b\uff0c\u5e76\u4e14\u901a\u8fc7\u62f7\u8d1d\u8fd9\u4e9b\u539f\u578b\u521b\u5efa\u65b0\u7684\u5bf9\u8c61\u3002 \u4ee3\u7801\uff1a \u00b6 #include <iostream> #include <string> using namespace std ; class Prototype { public : Prototype (){} virtual ~ Prototype (){} virtual Prototype * clone () { return nullptr ; } string getID () { return id ; } protected : string id ; }; class Student : public Prototype { public : Student ( string id ) { this -> id = id ; }; Prototype * clone () override { return new Student ( * this ); } string getID () { return id ; } private : Student ( const Student & tmp ) { this -> id = tmp . id ; } }; int main () { Prototype * stu = new Student ( \"1994\" ); Prototype * tmp = stu -> clone (); cout << tmp -> getID () << endl ; delete tmp ; return 0 ; }","title":"5-\u539f\u578b\u6a21\u5f0f"},{"location":"DesignPattern/5-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u539f\u578b\u6a21\u5f0f"},{"location":"DesignPattern/5-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/#_2","text":"\u7528\u539f\u578b\u5b9e\u4f8b\u5236\u5b9a\u521b\u5efa\u5bf9\u8c61\u7684\u79cd\u7c7b\uff0c\u5e76\u4e14\u901a\u8fc7\u62f7\u8d1d\u8fd9\u4e9b\u539f\u578b\u521b\u5efa\u65b0\u7684\u5bf9\u8c61\u3002","title":"\u5b9a\u4e49\uff1a"},{"location":"DesignPattern/5-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/#_3","text":"#include <iostream> #include <string> using namespace std ; class Prototype { public : Prototype (){} virtual ~ Prototype (){} virtual Prototype * clone () { return nullptr ; } string getID () { return id ; } protected : string id ; }; class Student : public Prototype { public : Student ( string id ) { this -> id = id ; }; Prototype * clone () override { return new Student ( * this ); } string getID () { return id ; } private : Student ( const Student & tmp ) { this -> id = tmp . id ; } }; int main () { Prototype * stu = new Student ( \"1994\" ); Prototype * tmp = stu -> clone (); cout << tmp -> getID () << endl ; delete tmp ; return 0 ; }","title":"\u4ee3\u7801\uff1a"},{"location":"DesignPattern/6-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/","text":"\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u5b9a\u4e49\u4e00\u4e2a\u64cd\u4f5c\u4e2d\u7684\u7b97\u6cd5\u9aa8\u67b6\uff0c\u800c\u5c06\u4e00\u4e9b\u6b65\u9aa4\u5ef6\u8fdf\u5230\u5b50\u7c7b\u4e2d\u3002\u6a21\u677f\u65b9\u6cd5\u4f7f\u5f97\u5b50\u7c7b\u53ef\u4ee5\u4e0d\u6539\u53d8\u7b97\u6cd5\u7684\u7ed3\u6784\u5373\u53ef\u91cd\u5b9a\u4e49\u8be5\u7b97\u6cd5\u7684\u67d0\u4e9b\u7279\u5b9a\u6b65\u9aa4 \u4ee3\u7801 \u00b6 #include <iostream> using namespace std ; class AbstractClass { public : void templateMethod () { primitiveOperation1 (); primitiveOperation2 (); } protected : virtual void primitiveOperation1 () {}; virtual void primitiveOperation2 () {}; }; class ConcreteClassA : public AbstractClass { protected : void primitiveOperation1 () override { cout << \"\u5177\u4f53\u7c7bA\u65b9\u6cd51\u5b9e\u73b0\" << endl ; } void primitiveOperation2 () override { cout << \"\u5177\u4f53\u7c7bA\u65b9\u6cd52\u5b9e\u73b0\" << endl ; } }; class ConcreteClassB : public AbstractClass { protected : void primitiveOperation1 () override { cout << \"\u5177\u4f53\u7c7bB\u65b9\u6cd51\u5b9e\u73b0\" << endl ; } void primitiveOperation2 () override { cout << \"\u5177\u4f53\u7c7bB\u65b9\u6cd52\u5b9e\u73b0\" << endl ; } }; int main () { AbstractClass * c = new ConcreteClassA (); c -> templateMethod (); delete c ; c = new ConcreteClassB (); c -> templateMethod (); delete c ; return 0 ; }","title":"6-\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f"},{"location":"DesignPattern/6-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f"},{"location":"DesignPattern/6-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/#_2","text":"\u5b9a\u4e49\u4e00\u4e2a\u64cd\u4f5c\u4e2d\u7684\u7b97\u6cd5\u9aa8\u67b6\uff0c\u800c\u5c06\u4e00\u4e9b\u6b65\u9aa4\u5ef6\u8fdf\u5230\u5b50\u7c7b\u4e2d\u3002\u6a21\u677f\u65b9\u6cd5\u4f7f\u5f97\u5b50\u7c7b\u53ef\u4ee5\u4e0d\u6539\u53d8\u7b97\u6cd5\u7684\u7ed3\u6784\u5373\u53ef\u91cd\u5b9a\u4e49\u8be5\u7b97\u6cd5\u7684\u67d0\u4e9b\u7279\u5b9a\u6b65\u9aa4","title":"\u5b9a\u4e49"},{"location":"DesignPattern/6-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/#_3","text":"#include <iostream> using namespace std ; class AbstractClass { public : void templateMethod () { primitiveOperation1 (); primitiveOperation2 (); } protected : virtual void primitiveOperation1 () {}; virtual void primitiveOperation2 () {}; }; class ConcreteClassA : public AbstractClass { protected : void primitiveOperation1 () override { cout << \"\u5177\u4f53\u7c7bA\u65b9\u6cd51\u5b9e\u73b0\" << endl ; } void primitiveOperation2 () override { cout << \"\u5177\u4f53\u7c7bA\u65b9\u6cd52\u5b9e\u73b0\" << endl ; } }; class ConcreteClassB : public AbstractClass { protected : void primitiveOperation1 () override { cout << \"\u5177\u4f53\u7c7bB\u65b9\u6cd51\u5b9e\u73b0\" << endl ; } void primitiveOperation2 () override { cout << \"\u5177\u4f53\u7c7bB\u65b9\u6cd52\u5b9e\u73b0\" << endl ; } }; int main () { AbstractClass * c = new ConcreteClassA (); c -> templateMethod (); delete c ; c = new ConcreteClassB (); c -> templateMethod (); delete c ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/7-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/","text":"\u5916\u89c2\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u4e3a\u5b50\u7cfb\u7edf\u4e2d\u7684\u4e00\u7ec4\u63a5\u53e3\u63d0\u4f9b\u4e00\u4e2a\u4e00\u81f4\u7684\u754c\u9762\uff0c\u6b64\u6a21\u5f0f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u9ad8\u5c42\u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u4f7f\u5f97\u8fd9\u4e00\u5b50\u7cfb\u7edf\u66f4\u52a0\u5bb9\u6613\u4f7f\u7528 \u4ee3\u7801 \u00b6 #include <iostream> using namespace std ; class SubSystemOne { public : void MethodOne () { cout << \"\u5b50\u7cfb\u7edf\u65b9\u6cd5\u4e00\" << endl ; } }; class SubSystemTwo { public : void MethodTwo () { cout << \"\u5b50\u7cfb\u7edf\u65b9\u6cd5\u4e8c\" << endl ; } }; class SubSystemThree { public : void MethodThree () { cout << \"\u5b50\u7cfb\u7edf\u65b9\u6cd5\u4e09\" << endl ; } }; class SubSystemFour { public : void MethodFour () { cout << \"\u5b50\u7cfb\u7edf\u65b9\u6cd5\u56db\" << endl ; } }; class Facade { private : SubSystemOne * one ; SubSystemTwo * two ; SubSystemThree * three ; SubSystemFour * four ; public : Facade () { one = new SubSystemOne (); two = new SubSystemTwo (); three = new SubSystemThree (); four = new SubSystemFour (); } ~ Facade () { delete one ; delete two ; delete three ; delete four ; } void MethodA () { cout << \"\u65b9\u6cd5\u7ec4A\uff08\uff09-----\" << endl ; one -> MethodOne (); two -> MethodTwo (); four -> MethodFour (); } void MethodB () { cout << \"\u65b9\u6cd5\u7ec4B\uff08\uff09-----\" << endl ; two -> MethodTwo (); three -> MethodThree (); } }; int main () { Facade * fa = new Facade (); fa -> MethodA (); fa -> MethodB (); return 0 ; }","title":"7-\u5916\u89c2\u6a21\u5f0f"},{"location":"DesignPattern/7-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u5916\u89c2\u6a21\u5f0f"},{"location":"DesignPattern/7-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/#_2","text":"\u4e3a\u5b50\u7cfb\u7edf\u4e2d\u7684\u4e00\u7ec4\u63a5\u53e3\u63d0\u4f9b\u4e00\u4e2a\u4e00\u81f4\u7684\u754c\u9762\uff0c\u6b64\u6a21\u5f0f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u9ad8\u5c42\u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u4f7f\u5f97\u8fd9\u4e00\u5b50\u7cfb\u7edf\u66f4\u52a0\u5bb9\u6613\u4f7f\u7528","title":"\u5b9a\u4e49"},{"location":"DesignPattern/7-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/#_3","text":"#include <iostream> using namespace std ; class SubSystemOne { public : void MethodOne () { cout << \"\u5b50\u7cfb\u7edf\u65b9\u6cd5\u4e00\" << endl ; } }; class SubSystemTwo { public : void MethodTwo () { cout << \"\u5b50\u7cfb\u7edf\u65b9\u6cd5\u4e8c\" << endl ; } }; class SubSystemThree { public : void MethodThree () { cout << \"\u5b50\u7cfb\u7edf\u65b9\u6cd5\u4e09\" << endl ; } }; class SubSystemFour { public : void MethodFour () { cout << \"\u5b50\u7cfb\u7edf\u65b9\u6cd5\u56db\" << endl ; } }; class Facade { private : SubSystemOne * one ; SubSystemTwo * two ; SubSystemThree * three ; SubSystemFour * four ; public : Facade () { one = new SubSystemOne (); two = new SubSystemTwo (); three = new SubSystemThree (); four = new SubSystemFour (); } ~ Facade () { delete one ; delete two ; delete three ; delete four ; } void MethodA () { cout << \"\u65b9\u6cd5\u7ec4A\uff08\uff09-----\" << endl ; one -> MethodOne (); two -> MethodTwo (); four -> MethodFour (); } void MethodB () { cout << \"\u65b9\u6cd5\u7ec4B\uff08\uff09-----\" << endl ; two -> MethodTwo (); three -> MethodThree (); } }; int main () { Facade * fa = new Facade (); fa -> MethodA (); fa -> MethodB (); return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/8-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/","text":"\u5efa\u9020\u8005\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u5c06\u4e00\u4e2a\u590d\u6742\u5bf9\u8c61\u7684\u6784\u5efa\u4e0e\u5b83\u7684\u8868\u793a\u5206\u79bb\uff0c\u4f7f\u5f97\u540c\u6837\u7684\u6784\u5efa\u8fc7\u7a0b\u53ef\u4ee5\u521b\u5efa\u4e0d\u540c\u7684\u8868\u793a \u4f18\u70b9 \u00b6 \u4f7f\u5f97\u5efa\u9020\u4ee3\u7801\u4e0e\u8868\u793a\u4ee3\u7801\u5206\u79bb\uff0c\u7531\u4e8e\u5efa\u9020\u8005\u9690\u85cf\u4e86\u8be5\u4ea7\u54c1\u662f\u5982\u4f55\u7ec4\u88c5\u7684\uff0c\u6240\u4ee5\u82e5\u9700\u8981\u6539\u53d8\u4e00\u4e2a\u4ea7\u54c1\u7684\u5185\u90e8\u8868\u793a\uff0c\u53ea\u9700\u8981\u518d\u5b9a\u4e49\u4e00\u4e2a\u5177\u4f53\u7684\u5efa\u9020\u8005\u5c31\u53ef\u4ee5\u4e86 \u4ee3\u7801 \u00b6 #include <iostream> #include <list> #include <string> using namespace std ; class Product { private : list < string > parts ; public : void add ( string part ) { parts . push_back ( part ); } void show () { cout << \"\u4ea7\u54c1\u521b\u5efa------\" << endl ; for ( const string & str : parts ) { cout << str << endl ; } } }; class Builder { public : virtual void BuilderPartA () = 0 ; virtual void BuilderPartB () = 0 ; virtual Product * getResult () = 0 ; }; class ConcreteBuilder1 : public Builder { private : Product * product ; public : ConcreteBuilder1 () { product = new Product (); } ~ ConcreteBuilder1 () { delete product ; } void BuilderPartA () override { product -> add ( \"\u90e8\u4ef6A\" ); } void BuilderPartB () override { product -> add ( \"\u90e8\u4ef6B\" ); } Product * getResult () override { return product ; } }; class ConcreteBuilder2 : public Builder { private : Product * product ; public : ConcreteBuilder2 () { product = new Product (); } ~ ConcreteBuilder2 () { delete product ; } void BuilderPartA () override { product -> add ( \"\u90e8\u4ef6X\" ); } void BuilderPartB () override { product -> add ( \"\u90e8\u4ef6Y\" ); } Product * getResult () override { return product ; } }; class Director { public : void Construct ( Builder * builder ) { builder -> BuilderPartA (); builder -> BuilderPartB (); } }; int main () { Director * director = new Director (); Builder * b1 = new ConcreteBuilder1 (); Builder * b2 = new ConcreteBuilder2 (); director -> Construct ( b1 ); Product * p1 = b1 -> getResult (); p1 -> show (); director -> Construct ( b2 ); Product * p2 = b2 -> getResult (); p2 -> show (); return 0 ; }","title":"8-\u5efa\u9020\u8005\u6a21\u5f0f"},{"location":"DesignPattern/8-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u5efa\u9020\u8005\u6a21\u5f0f"},{"location":"DesignPattern/8-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/#_2","text":"\u5c06\u4e00\u4e2a\u590d\u6742\u5bf9\u8c61\u7684\u6784\u5efa\u4e0e\u5b83\u7684\u8868\u793a\u5206\u79bb\uff0c\u4f7f\u5f97\u540c\u6837\u7684\u6784\u5efa\u8fc7\u7a0b\u53ef\u4ee5\u521b\u5efa\u4e0d\u540c\u7684\u8868\u793a","title":"\u5b9a\u4e49"},{"location":"DesignPattern/8-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/#_3","text":"\u4f7f\u5f97\u5efa\u9020\u4ee3\u7801\u4e0e\u8868\u793a\u4ee3\u7801\u5206\u79bb\uff0c\u7531\u4e8e\u5efa\u9020\u8005\u9690\u85cf\u4e86\u8be5\u4ea7\u54c1\u662f\u5982\u4f55\u7ec4\u88c5\u7684\uff0c\u6240\u4ee5\u82e5\u9700\u8981\u6539\u53d8\u4e00\u4e2a\u4ea7\u54c1\u7684\u5185\u90e8\u8868\u793a\uff0c\u53ea\u9700\u8981\u518d\u5b9a\u4e49\u4e00\u4e2a\u5177\u4f53\u7684\u5efa\u9020\u8005\u5c31\u53ef\u4ee5\u4e86","title":"\u4f18\u70b9"},{"location":"DesignPattern/8-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/#_4","text":"#include <iostream> #include <list> #include <string> using namespace std ; class Product { private : list < string > parts ; public : void add ( string part ) { parts . push_back ( part ); } void show () { cout << \"\u4ea7\u54c1\u521b\u5efa------\" << endl ; for ( const string & str : parts ) { cout << str << endl ; } } }; class Builder { public : virtual void BuilderPartA () = 0 ; virtual void BuilderPartB () = 0 ; virtual Product * getResult () = 0 ; }; class ConcreteBuilder1 : public Builder { private : Product * product ; public : ConcreteBuilder1 () { product = new Product (); } ~ ConcreteBuilder1 () { delete product ; } void BuilderPartA () override { product -> add ( \"\u90e8\u4ef6A\" ); } void BuilderPartB () override { product -> add ( \"\u90e8\u4ef6B\" ); } Product * getResult () override { return product ; } }; class ConcreteBuilder2 : public Builder { private : Product * product ; public : ConcreteBuilder2 () { product = new Product (); } ~ ConcreteBuilder2 () { delete product ; } void BuilderPartA () override { product -> add ( \"\u90e8\u4ef6X\" ); } void BuilderPartB () override { product -> add ( \"\u90e8\u4ef6Y\" ); } Product * getResult () override { return product ; } }; class Director { public : void Construct ( Builder * builder ) { builder -> BuilderPartA (); builder -> BuilderPartB (); } }; int main () { Director * director = new Director (); Builder * b1 = new ConcreteBuilder1 (); Builder * b2 = new ConcreteBuilder2 (); director -> Construct ( b1 ); Product * p1 = b1 -> getResult (); p1 -> show (); director -> Construct ( b2 ); Product * p2 = b2 -> getResult (); p2 -> show (); return 0 ; }","title":"\u4ee3\u7801"},{"location":"DesignPattern/9-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/","text":"\u89c2\u5bdf\u8005\u6a21\u5f0f \u00b6 \u5b9a\u4e49 \u00b6 \u5b9a\u4e49\u4e86\u4e00\u79cd\u4e00\u5bf9\u591a\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u8ba9\u591a\u4e2a\u89c2\u5bdf\u8005\u5bf9\u8c61\u540c\u65f6\u76d1\u542c\u67d0\u4e00\u4e2a\u4e3b\u4f53\u5bf9\u8c61\u3002\u8fd9\u4e2a\u4e3b\u9898\u5bf9\u8c61\u5728\u72b6\u6001\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u4f1a\u901a\u77e5\u6240\u6709\u89c2\u5bdf\u8005\u5bf9\u8c61\uff0c\u4f7f\u5b83\u4eec\u80fd\u591f\u81ea\u52a8\u66f4\u65b0\u81ea\u5df1 \u4ee3\u7801 \u00b6 #include <iostream> #include <list> #include <string> using namespace std ; class Observer { public : virtual void Update () = 0 ; }; class Subject { private : list < Observer *> observers ; public : virtual ~ Subject () { for ( auto x : observers ) { delete x ; } observers . clear (); } void attach ( Observer * observer ) { observers . push_back ( observer ); } void Detach ( Observer * observer ) { observers . remove ( observer ); } void Notify () { for ( auto ob : observers ) { ob -> Update (); } } }; class ConcreteSubject : public Subject { private : string subjectState ; public : void setState ( string value ) { this -> subjectState = value ; } string getState () { return subjectState ; } }; class ConcreteObserver : public Observer { private : string name ; string observerState ; ConcreteSubject * subject ; public : ConcreteObserver ( ConcreteSubject * subject , string name ) { this -> name = name ; this -> subject = subject ; } void Update () override { observerState = subject -> getState (); cout << \"\u89c2\u5bdf\u8005 \" << name << \" \u7684\u65b0\u72b6\u6001\u662f \" << observerState << endl ; } ConcreteSubject * getSubject () { return subject ; } void setSubject ( ConcreteSubject * sub ) { subject = sub ; } }; int main () { ConcreteSubject * s = new ConcreteSubject (); s -> attach ( new ConcreteObserver ( s , \"X\" )); s -> attach ( new ConcreteObserver ( s , \"Y\" )); s -> attach ( new ConcreteObserver ( s , \"Z\" )); s -> setState ( \"ABC\" ); s -> Notify (); return 0 ; }","title":"9-\u89c2\u5bdf\u8005\u6a21\u5f0f"},{"location":"DesignPattern/9-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/#_1","text":"","title":"\u89c2\u5bdf\u8005\u6a21\u5f0f"},{"location":"DesignPattern/9-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/#_2","text":"\u5b9a\u4e49\u4e86\u4e00\u79cd\u4e00\u5bf9\u591a\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u8ba9\u591a\u4e2a\u89c2\u5bdf\u8005\u5bf9\u8c61\u540c\u65f6\u76d1\u542c\u67d0\u4e00\u4e2a\u4e3b\u4f53\u5bf9\u8c61\u3002\u8fd9\u4e2a\u4e3b\u9898\u5bf9\u8c61\u5728\u72b6\u6001\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u4f1a\u901a\u77e5\u6240\u6709\u89c2\u5bdf\u8005\u5bf9\u8c61\uff0c\u4f7f\u5b83\u4eec\u80fd\u591f\u81ea\u52a8\u66f4\u65b0\u81ea\u5df1","title":"\u5b9a\u4e49"},{"location":"DesignPattern/9-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/#_3","text":"#include <iostream> #include <list> #include <string> using namespace std ; class Observer { public : virtual void Update () = 0 ; }; class Subject { private : list < Observer *> observers ; public : virtual ~ Subject () { for ( auto x : observers ) { delete x ; } observers . clear (); } void attach ( Observer * observer ) { observers . push_back ( observer ); } void Detach ( Observer * observer ) { observers . remove ( observer ); } void Notify () { for ( auto ob : observers ) { ob -> Update (); } } }; class ConcreteSubject : public Subject { private : string subjectState ; public : void setState ( string value ) { this -> subjectState = value ; } string getState () { return subjectState ; } }; class ConcreteObserver : public Observer { private : string name ; string observerState ; ConcreteSubject * subject ; public : ConcreteObserver ( ConcreteSubject * subject , string name ) { this -> name = name ; this -> subject = subject ; } void Update () override { observerState = subject -> getState (); cout << \"\u89c2\u5bdf\u8005 \" << name << \" \u7684\u65b0\u72b6\u6001\u662f \" << observerState << endl ; } ConcreteSubject * getSubject () { return subject ; } void setSubject ( ConcreteSubject * sub ) { subject = sub ; } }; int main () { ConcreteSubject * s = new ConcreteSubject (); s -> attach ( new ConcreteObserver ( s , \"X\" )); s -> attach ( new ConcreteObserver ( s , \"Y\" )); s -> attach ( new ConcreteObserver ( s , \"Z\" )); s -> setState ( \"ABC\" ); s -> Notify (); return 0 ; }","title":"\u4ee3\u7801"},{"location":"Libevent/","text":"hello world \u00b6","title":"\u5f00\u59cb"},{"location":"Libevent/#hello-world","text":"","title":"hello world"},{"location":"Lua/","text":"hello world \u00b6","title":"\u5f00\u59cb"},{"location":"Lua/#hello-world","text":"","title":"hello world"},{"location":"mkdocs/%E6%97%A0%E6%B3%95build%E7%9A%84%E5%8E%9F%E5%9B%A0/","text":"\u65e0\u6cd5build\u7684\u539f\u56e0 \u00b6 \u63cf\u8ff0: \u00b6 INFO - Cleaning site directory INFO - Building documentation to directory: /../.../.... \u5728building documentation \u4e4b\u540e\u65e0\u6cd5build\u5b8c\u6210\uff0c\u4e00\u76f4\u5361\u5728\u8fd9\u4e2a\u5730\u65b9 \u539f\u56e0: \u00b6 \u6587\u4ef6\u5939\u91cc\u9762\u7684 markdown \u6587\u4ef6\u5b58\u5728\u8bed\u6cd5\u9519\u8bef \u5bfc\u81f4\u65e0\u6cd5\u7f16\u8bd1\u6210html \u6587\u4ef6\uff0c\u5f88\u64cd\u86cb\uff01\uff01\uff01\uff01\uff01\uff01","title":"\u65e0\u6cd5build"},{"location":"mkdocs/%E6%97%A0%E6%B3%95build%E7%9A%84%E5%8E%9F%E5%9B%A0/#build","text":"","title":"\u65e0\u6cd5build\u7684\u539f\u56e0"},{"location":"mkdocs/%E6%97%A0%E6%B3%95build%E7%9A%84%E5%8E%9F%E5%9B%A0/#_1","text":"INFO - Cleaning site directory INFO - Building documentation to directory: /../.../.... \u5728building documentation \u4e4b\u540e\u65e0\u6cd5build\u5b8c\u6210\uff0c\u4e00\u76f4\u5361\u5728\u8fd9\u4e2a\u5730\u65b9","title":"\u63cf\u8ff0:"},{"location":"mkdocs/%E6%97%A0%E6%B3%95build%E7%9A%84%E5%8E%9F%E5%9B%A0/#_2","text":"\u6587\u4ef6\u5939\u91cc\u9762\u7684 markdown \u6587\u4ef6\u5b58\u5728\u8bed\u6cd5\u9519\u8bef \u5bfc\u81f4\u65e0\u6cd5\u7f16\u8bd1\u6210html \u6587\u4ef6\uff0c\u5f88\u64cd\u86cb\uff01\uff01\uff01\uff01\uff01\uff01","title":"\u539f\u56e0:"}]}